{
  "FCS_DTLSC_EXT.1": {
    "title": "DTLS Client Protocol",
    "cc_id": "FCS_DTLSC_EXT.1",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "d9b19690-8bd0-4e8c-9868-28936ce04915"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "The following actions should be auditable if FAU_GEN Security Audit Data Generation is included in the PP, PP-Module, functional package, or ST: <ul><li>Establishment and termination of a DTLS session </li> <li>Failure to establish a DTLS session </li> <li>Failure to verify presented identifier </li> </ul> ",
      "componentLeveling": " requires the TSF to implement DTLS as a client in the specified manner.\n    ",
      "dependencies": "\n      FCS_CKM.1 Cryptographic Key Generation<br/>\n      FCS_CKM.2 Cryptographic Key Distribution<br/>\n      FCS_COP.1 Cryptographic Operation<br/>\n      FCS_RBG.1 Random Bit Generation (RBG)<br/>\n      FIA_X509_EXT.1 X.509 Certificate Validation<br/>\n      FIA_X509_EXT.2 X.509 Certificate Authentication\n    ",
      "managementFunction": "No specific management functions are identified.\n    ",
      "toggle": true
    },
    "auditEvents": {
      "cd0dbf19-c6d7-4856-8e2b-698a8856f76a": {
        "description": "Failure to establish a DTLS session",
        "items": [
          {
            "info": "Reason for failure",
            "optional": false
          }
        ],
        "optional": false
      },
      "af465d12-e263-44e1-a439-be4ed59464c8": {
        "description": "Failure to verify presented identifier",
        "items": [
          {
            "info": "Presented identifier and reference identifier",
            "optional": false
          }
        ],
        "optional": false
      },
      "e4cee9d3-0c94-4713-b019-3436aea175bf": {
        "description": "Establishment and termination of a DTLS session",
        "items": [
          {
            "info": "Non-TOE endpoint of connection",
            "optional": false
          }
        ],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "50e216fb-f110-4d58-b1c8-80342332dd6d": {
        "elementXMLID": "fel-dtlsc-impl",
        "selectableGroups": {
          "group-2": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "ec5b7371-8ac2-4437-8a0c-9c6abf183e84",
              "95a71df1-d823-4b9a-a42e-5800799d30ad"
            ]
          },
          "group-3": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "82a33574-53f9-4537-9f1a-44decb32b3c9",
              "2997d5b3-6a60-4a14-8708-4630adfe724b",
              "e54066ab-3c50-4abd-8571-a99ecea937aa",
              "cedeb927-19ba-4727-bc2c-c071713f7bbc"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall implement\n      "
          },
          {
            "selections": "group-2"
          },
          {
            "text": " as a client that supports additional functionality for session renegotiation protection and "
          },
          {
            "selections": "group-3"
          },
          {
            "text": " and shall abort attempts by a server to negotiate any DTLS version prior to DTLS 1.2 (RFC 6347).\n      "
          }
        ],
        "selectables": {
          "ec5b7371-8ac2-4437-8a0c-9c6abf183e84": {
            "type": "selectable",
            "uuid": "ec5b7371-8ac2-4437-8a0c-9c6abf183e84",
            "id": "fcs_dtlsc_ext.1.1_1",
            "description": "DTLS 1.2 (RFC 6347)",
            "exclusive": false,
            "nestedGroups": []
          },
          "95a71df1-d823-4b9a-a42e-5800799d30ad": {
            "type": "selectable",
            "uuid": "95a71df1-d823-4b9a-a42e-5800799d30ad",
            "id": "fcs_dtlsc_ext.1.1_2",
            "description": "DTLS 1.3 (RFC 9147)",
            "exclusive": false,
            "nestedGroups": []
          },
          "82a33574-53f9-4537-9f1a-44decb32b3c9": {
            "type": "selectable",
            "uuid": "82a33574-53f9-4537-9f1a-44decb32b3c9",
            "id": "dtlsc_mutual_auth",
            "description": "mutual authentication",
            "exclusive": false,
            "nestedGroups": []
          },
          "2997d5b3-6a60-4a14-8708-4630adfe724b": {
            "type": "selectable",
            "uuid": "2997d5b3-6a60-4a14-8708-4630adfe724b",
            "id": "dtlsc_downgrade_protection",
            "description": "supplemental downgrade protection",
            "exclusive": false,
            "nestedGroups": []
          },
          "e54066ab-3c50-4abd-8571-a99ecea937aa": {
            "type": "selectable",
            "uuid": "e54066ab-3c50-4abd-8571-a99ecea937aa",
            "id": "dtlsc_resumption",
            "description": "session resumption",
            "exclusive": false,
            "nestedGroups": []
          },
          "cedeb927-19ba-4727-bc2c-c071713f7bbc": {
            "type": "selectable",
            "uuid": "cedeb927-19ba-4727-bc2c-c071713f7bbc",
            "id": "fcs_dtlsc_ext.1.1_3",
            "description": "no optional functionality",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          This SFR is claimed if \"DTLS as a client\" is selected in FCS_TLS_EXT.1.1.\n        </p> <p>\n        The ST author will claim supported DTLS versions and optional functionality as appropriate for the claimed versions. \n        </p> <p>\n        Session renegotiation protection is required for both DTLS 1.2 and DTLS 1.3, and the TSS must include the requirements from FCS_DTLSC_EXT.4. \n        Within FCS_DTLSC_EXT.4, options for implementation of secure session renegotiation in DTLS 1.2 or rejecting renegotiation requests\n        required in DTLS 1.3 and optionally supported in DTLS 1.2 are claimed.  \n        </p> <p>\n        If \"mutual authentication\" is selected, then the TSS must additionally include the requirements from FCS_DTLSC_EXT.2. \n        If the TOE implements DTLS with mutual authentication, this selection must be made.\n        </p> <p>\n        If \"supplemental downgrade protection\" is selected, then the TSS must additionally include the requirements from FCS_DTLSC_EXT.3. \n        This is claimed when both DTLS 1.3 and DTLS 1.2 are supported and the client uses the method to reject downgrade. Note that TLS 1.1\n        or below downgrade protection in DTLS is used to notify a client that the server is capable of supporting DTLS 1.2 or DTLS 1.3, when\n        it negotiates a DTLS 1.0 session because it received a ClientHello indicating maximum support for DTLS 1.0 (there is no DTLS version 1.1).\n        Since this FP does not allow negotiation of DTLS 1.0, it is not necessary to claim such support.\n        </p> <p>\n        If \"session resumption\" is selected, then the TSS must additionally include the requirements from FCS_DTLSC_EXT.5. \n        </p> <p>\n        DTLS version numbers are denoted on the wire as the 1\u2019s complement of the corresponding textual DTLS versions as described in RFC 6347, Section 4.1. \n        DTLS version 1.2 is 0xfefd; DTLS version 1.3 is 0xfefc. \n        </p>"
      },
      "3d34455a-9c98-413c-a32a-8943f2b212af": {
        "elementXMLID": "fcs_dtlsc_ext-1-2",
        "selectableGroups": {
          "group-4": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlsc_ext.1.2_1",
              "5552e533-af5f-44cb-8cff-07250cde8dbc"
            ]
          },
          "fcs_dtlsc_ext.1.2_1": {
            "description": [
              {
                "text": "TLS 1.2 ciphersuites:"
              },
              {
                "groups": [
                  "group-6"
                ]
              },
              {
                "text": "and shall not offer other TLS 1.2 ciphersuites,"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-6": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "d907dec3-eac2-4e0c-a93a-f10748c6753f",
              "f6559a29-5bdf-45eb-bfda-96820dfbb56d",
              "def49c88-112c-4763-ad28-6c5122504352",
              "99bea8a6-c77c-48da-b247-3747cbd8fa2d",
              "caca5383-d10c-4634-bf59-ab400806876f",
              "3630e443-b400-4f8f-a7f9-14f98b8e618b",
              "fcs_dtlsc_ext.1.2_8"
            ]
          },
          "fcs_dtlsc_ext.1.2_8": {
            "description": [
              {
                "text": "ciphersuites using pre-shared secrets:"
              },
              {
                "groups": [
                  "group-8"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-8": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "a2e31707-60b3-4742-9752-2e11050028a6",
              "e23c48e1-bb76-44ea-895c-21a5395e017d",
              "e95fe365-9dca-4fb4-ae35-bda3d9146bc4"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following &lt;assignable&gt;list of supported TLS ciphersuites &lt;/assignable&gt; , offering the supported ciphersuites in a ClientHello message in preference order: &lt;assignable&gt;list of supported ciphersuites &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n          The TSF shall be able to support the following "
          },
          {
            "selections": "group-4"
          },
          {
            "text": "\n          offering the supported ciphersuites in a ClientHello message in preference order:\n          "
          },
          {
            "assignment": "9dffd61e-d1da-4dd5-a1dd-7b5f2c8b8bed"
          },
          {
            "text": ".\n        "
          }
        ],
        "selectables": {
          "d907dec3-eac2-4e0c-a93a-f10748c6753f": {
            "type": "selectable",
            "uuid": "d907dec3-eac2-4e0c-a93a-f10748c6753f",
            "id": "fcs_dtlsc_ext.1.2_2",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "f6559a29-5bdf-45eb-bfda-96820dfbb56d": {
            "type": "selectable",
            "uuid": "f6559a29-5bdf-45eb-bfda-96820dfbb56d",
            "id": "fcs_dtlsc_ext.1.2_3",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "def49c88-112c-4763-ad28-6c5122504352": {
            "type": "selectable",
            "uuid": "def49c88-112c-4763-ad28-6c5122504352",
            "id": "fcs_dtlsc_ext.1.2_4",
            "description": "TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "99bea8a6-c77c-48da-b247-3747cbd8fa2d": {
            "type": "selectable",
            "uuid": "99bea8a6-c77c-48da-b247-3747cbd8fa2d",
            "id": "fcs_dtlsc_ext.1.2_5",
            "description": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "caca5383-d10c-4634-bf59-ab400806876f": {
            "type": "selectable",
            "uuid": "caca5383-d10c-4634-bf59-ab400806876f",
            "id": "fcs_dtlsc_ext.1.2_6",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "3630e443-b400-4f8f-a7f9-14f98b8e618b": {
            "type": "selectable",
            "uuid": "3630e443-b400-4f8f-a7f9-14f98b8e618b",
            "id": "fcs_dtlsc_ext.1.2_7",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "a2e31707-60b3-4742-9752-2e11050028a6": {
            "type": "selectable",
            "uuid": "a2e31707-60b3-4742-9752-2e11050028a6",
            "id": "fcs_dtlsc_ext.1.2_9",
            "description": "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442",
            "exclusive": false,
            "nestedGroups": []
          },
          "e23c48e1-bb76-44ea-895c-21a5395e017d": {
            "type": "selectable",
            "uuid": "e23c48e1-bb76-44ea-895c-21a5395e017d",
            "id": "fcs_dtlsc_ext.1.2_10",
            "description": "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "e95fe365-9dca-4fb4-ae35-bda3d9146bc4": {
            "type": "selectable",
            "uuid": "e95fe365-9dca-4fb4-ae35-bda3d9146bc4",
            "id": "fcs_dtlsc_ext.1.2_11",
            "description": "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "5552e533-af5f-44cb-8cff-07250cde8dbc": {
            "type": "selectable",
            "uuid": "5552e533-af5f-44cb-8cff-07250cde8dbc",
            "id": "fcs_dtlsc_ext.1.2_12",
            "description": "TLS 1.3 ciphersuite TLS_AES_256_GCM_SHA384 as defined in RFC 8446, and shall not offer other TLS 1.3 ciphersuites",
            "exclusive": false,
            "nestedGroups": []
          },
          "9dffd61e-d1da-4dd5-a1dd-7b5f2c8b8bed": {
            "id": "fcs_dtlsc_ext.1.2_13",
            "leadingText": "",
            "description": "list of supported ciphersuites",
            "trailingText": "",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n        DTLS uses TLS ciphersuites. The ST author should select the ciphersuites that are supported, and must select at least one ciphersuite \n        for each DTLS version supported \u2013 TLS 1.2 ciphersuites for DTLS 1.2 and TLS 1.3 ciphersuites for DTLS 1.3. Pre-shared secret ciphersuites for\n        DTLS 1.2 are only claimed as required by a specific PP.\n        </p> <p>\n          While mandatory for RFC 8446, TLS_AES_128_GCM_SHA256 is disallowed by this SFR.\n        </p> <p>\n          In addition to the supported ciphersuites, the ST author indicates the order of ciphersuites included in the ClientHello, \n          indicating the preferred ciphersuites for server negotiation. To eliminate the need to produce duplicate lists, it is recommended to complete the selected list of ciphersuites in the order that they are presented and then complete the following assignment by saying that the presentation order is the same as in the previous list. If more than one ordering is possible (e.g., the order is constructed dynamically based on some property of the system on which the TOE is running) the ST uses the assignment to specify a dynamic ordering and the describes in the TSS the conditions for presenting the ordering. It is recommended, but not required, that the TLS 1.3 ciphersuites\n          claimed are listed before TLS 1.2 ciphersuites, and that any other ciphersuites are listed last among the TLS 1.3 ciphersuites.\n        </p>"
      },
      "c8bd07d6-a5dd-494c-83a4-053ad14694cf": {
        "elementXMLID": "fcs_dtlsc_ext-1-3",
        "selectableGroups": {},
        "title": [
          {
            "description": "\n        The TSF shall not offer ClientHello messages indicating the following: \n        <ul><li>null encryption</li> <li>support for anonymous servers</li> <li>use of cryptography that is deprecated, export-grade, or otherwise disallowed for encryption, including DES, 3DES, RC2, RC4, or IDEA</li> <li>use of MD5 or SHA-1 for key derivation</li></ul> and shall abort sessions where a server attempts to negotiate cryptographic options not enumerated in the ClientHello\n        message.\n      "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          This element explicitly excludes ciphersuites defined for TLS 1.2 and previous TLS or SSL versions that might be included in the \n          ClientHello from a TSF that supports DTLS 1.2 (as the only supported version, or as a fallback version for DTLS 1.3 clients \n          negotiating with potential DTLS 1.2 servers). The requirement also constrains the choice of DTLS 1.3 ciphersuites to the single TLS_AES_GCM_SHA384 ciphersuite specified in RFC 8446. In addition, this requirement prohibits Using Raw Public Keys in Transport Layer Security and Datagram\n          Transport Layer Security (RFC 7250) for server certificates.\n        </p> <p>\n          Ciphersuites for TLS 1.2 are of the form TLS_(key establishment algorithm)_WITH_(encryption algorithm)_(message digest algorithm), and\n          are listed in the TLS parameters section of the internet assignments at iana.org. This requirement constrains the value of \n          (encryption algorithm) and (message digest algorithm).\n        </p> <p>\n          Ciphersuites for TLS 1.3 are of the form TLS_(AEAD)_(HASH), where (AEAD) is of the form (encryption algorithm)_(symmetric key \n          length)_(mode) for an authenticated encryption with associated data specification (RFC 5116). This requirement constrains the \n          value of the (encryption algorithm) component of (AEAD) and the value of (HASH). \n        </p>"
      },
      "b2f801b9-b682-4d7f-b968-4bde5e77cb6f": {
        "elementXMLID": "fcs_dtlsc_ext-1-4",
        "selectableGroups": {
          "group-9": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "03b92aa0-30e7-4605-927b-d8f85d7a17c2",
              "7a60462a-dd28-4abf-8c30-43c66465f1e1"
            ]
          },
          "group-10": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "67dec155-bc12-4351-832d-19e0ff20ec17",
              "62a4af06-60d5-4960-97ab-cf5cc3863258",
              "fd295b41-c169-4c06-82fb-cc2d20c1d10d"
            ]
          },
          "group-11": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlsc_ext.1.4_6",
              "fcs_dtlsc_ext.1.4_12",
              "fcs_dtlsc_ext.1.4_15",
              "99b6b33b-3660-4d06-b1c8-b6616759d2d9",
              "819bacc4-12b6-4dcf-9c23-3ede6e96317b",
              "fcs_dtlsc_ext.1.4_25",
              "f5791c96-fc77-4d25-b27c-398d5232ef3f"
            ]
          },
          "fcs_dtlsc_ext.1.4_6": {
            "description": [
              {
                "text": "signature_algorithms_cert extension (RFC 8446) indicating support for"
              },
              {
                "groups": [
                  "group-13"
                ]
              },
              {
                "text": ", and"
              },
              {
                "groups": [
                  "group-15"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-13": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "0813040c-f8a3-431e-aa92-b07e319cacc6",
              "ffbc2215-ff1c-4265-a20e-1507ae340c0c"
            ]
          },
          "group-15": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "c35c5da2-539f-40bf-80db-9fa90a340d18",
              "048e2d31-ef71-4bfe-81b4-4d851c870b97",
              "66267b3b-dbc6-4688-8727-110821969993"
            ]
          },
          "fcs_dtlsc_ext.1.4_12": {
            "description": [
              {
                "text": "supported_versions extension (RFC 8446) indicating support for DTLS 1.3 and"
              },
              {
                "groups": [
                  "group-17"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-17": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "0129e426-2258-4bb6-a997-464e3afc4efe",
              "4cdc3357-fb47-4350-9b56-454ce7b5ee05"
            ]
          },
          "fcs_dtlsc_ext.1.4_15": {
            "description": [
              {
                "text": "supported_groups extension indicating support for"
              },
              {
                "groups": [
                  "group-19"
                ]
              },
              {
                "text": "and"
              },
              {
                "groups": [
                  "group-21"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-19": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "d5911631-a1d9-47f3-a89f-089e68991e70",
              "d21a8b8f-28a1-43b2-8a1f-0854767cb297",
              "40520f24-9efb-4c7c-8ca4-91f052095d9e"
            ]
          },
          "group-21": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "6ff0c0cb-8606-4e69-98f0-76c6e7a4935f",
              "8dd24a68-e501-4314-a3ca-235fd445af15",
              "c6fc47cc-a954-4cc2-b5dd-bb845df741ba",
              "282a3899-14c8-4193-a32f-84d1d6b7b4b4"
            ]
          },
          "fcs_dtlsc_ext.1.4_25": {
            "description": [
              {
                "text": "extended_master_secret extension (RFC 7627) enforcing server support, and"
              },
              {
                "groups": [
                  "group-23"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-23": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "76629008-4d54-47bb-b9a1-fa413be9a770",
              "7d9cf4cc-7d7b-47bf-8e31-272d887dd3e0"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following TLS ClientHello message extensions: &lt;ul&gt;&lt;li&gt;signature_algorithms extension (RFC 8446) indicating support for &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;ecdsa_secp384r1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pkcs1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;/selectables&gt; , and &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;rsa_pss_pss_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pss_rsae_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;no other signature algorithms &lt;/selectable&gt; &lt;/selectables&gt; and &lt;/li&gt; &lt;assignable&gt;other supported DTLS extensions &lt;/assignable&gt; &lt;br/&gt;and shall not send the following extensions: &lt;ul&gt;&lt;li&gt;early_data &lt;/li&gt; &lt;li&gt;psk_key_exchange_modes indicating PSK only mode. &lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt; &lt;/title&gt; ",
        "title": [
          {
            "description": "\n      The TSF shall be able to support the following DTLS ClientHello message extensions: \n       signature_algorithms extension (RFC 8446) indicating support for"
          },
          {
            "selections": "group-9"
          },
          {
            "description": ", and"
          },
          {
            "selections": "group-10"
          },
          {
            "description": "<ul><li> and\n        </li></ul>"
          },
          {
            "selections": "group-11"
          },
          {
            "description": "\n          and shall not send the following extensions: <ul><li>early_data</li> <li>psk_key_exchange_modes indicating PSK only mode.</li></ul>"
          }
        ],
        "selectables": {
          "03b92aa0-30e7-4605-927b-d8f85d7a17c2": {
            "type": "selectable",
            "uuid": "03b92aa0-30e7-4605-927b-d8f85d7a17c2",
            "id": "fcs_dtlsc_ext.1.4_1",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "7a60462a-dd28-4abf-8c30-43c66465f1e1": {
            "type": "selectable",
            "uuid": "7a60462a-dd28-4abf-8c30-43c66465f1e1",
            "id": "fcs_dtlsc_ext.1.4_2",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "67dec155-bc12-4351-832d-19e0ff20ec17": {
            "type": "selectable",
            "uuid": "67dec155-bc12-4351-832d-19e0ff20ec17",
            "id": "fcs_dtlsc_ext.1.4_3",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "62a4af06-60d5-4960-97ab-cf5cc3863258": {
            "type": "selectable",
            "uuid": "62a4af06-60d5-4960-97ab-cf5cc3863258",
            "id": "fcs_dtlsc_ext.1.4_4",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "fd295b41-c169-4c06-82fb-cc2d20c1d10d": {
            "type": "selectable",
            "uuid": "fd295b41-c169-4c06-82fb-cc2d20c1d10d",
            "id": "fcs_dtlsc_ext.1.4_5",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "0813040c-f8a3-431e-aa92-b07e319cacc6": {
            "type": "selectable",
            "uuid": "0813040c-f8a3-431e-aa92-b07e319cacc6",
            "id": "fcs_dtlsc_ext.1.4_7",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "ffbc2215-ff1c-4265-a20e-1507ae340c0c": {
            "type": "selectable",
            "uuid": "ffbc2215-ff1c-4265-a20e-1507ae340c0c",
            "id": "fcs_dtlsc_ext.1.4_8",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "c35c5da2-539f-40bf-80db-9fa90a340d18": {
            "type": "selectable",
            "uuid": "c35c5da2-539f-40bf-80db-9fa90a340d18",
            "id": "fcs_dtlsc_ext.1.4_9",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "048e2d31-ef71-4bfe-81b4-4d851c870b97": {
            "type": "selectable",
            "uuid": "048e2d31-ef71-4bfe-81b4-4d851c870b97",
            "id": "fcs_dtlsc_ext.1.4_10",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "66267b3b-dbc6-4688-8727-110821969993": {
            "type": "selectable",
            "uuid": "66267b3b-dbc6-4688-8727-110821969993",
            "id": "fcs_dtlsc_ext.1.4_11",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "0129e426-2258-4bb6-a997-464e3afc4efe": {
            "type": "selectable",
            "uuid": "0129e426-2258-4bb6-a997-464e3afc4efe",
            "id": "fcs_dtlsc_ext.1.4_13",
            "description": "DTLS 1.2",
            "exclusive": false,
            "nestedGroups": []
          },
          "4cdc3357-fb47-4350-9b56-454ce7b5ee05": {
            "type": "selectable",
            "uuid": "4cdc3357-fb47-4350-9b56-454ce7b5ee05",
            "id": "fcs_dtlsc_ext.1.4_14",
            "description": "no other versions",
            "exclusive": false,
            "nestedGroups": []
          },
          "d5911631-a1d9-47f3-a89f-089e68991e70": {
            "type": "selectable",
            "uuid": "d5911631-a1d9-47f3-a89f-089e68991e70",
            "id": "fcs_dtlsc_ext.1.4_16",
            "description": "secp384r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "d21a8b8f-28a1-43b2-8a1f-0854767cb297": {
            "type": "selectable",
            "uuid": "d21a8b8f-28a1-43b2-8a1f-0854767cb297",
            "id": "fcs_dtlsc_ext.1.4_17",
            "description": "ffdhe3072 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "40520f24-9efb-4c7c-8ca4-91f052095d9e": {
            "type": "selectable",
            "uuid": "40520f24-9efb-4c7c-8ca4-91f052095d9e",
            "id": "fcs_dtlsc_ext.1.4_18",
            "description": "ffdhe4096 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "6ff0c0cb-8606-4e69-98f0-76c6e7a4935f": {
            "type": "selectable",
            "uuid": "6ff0c0cb-8606-4e69-98f0-76c6e7a4935f",
            "id": "fcs_dtlsc_ext.1.4_19",
            "description": "secp521r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "8dd24a68-e501-4314-a3ca-235fd445af15": {
            "type": "selectable",
            "uuid": "8dd24a68-e501-4314-a3ca-235fd445af15",
            "id": "fcs_dtlsc_ext.1.4_20",
            "description": "ffdhe6144(RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "c6fc47cc-a954-4cc2-b5dd-bb845df741ba": {
            "type": "selectable",
            "uuid": "c6fc47cc-a954-4cc2-b5dd-bb845df741ba",
            "id": "fcs_dtlsc_ext.1.4_21",
            "description": "ffdhe8192 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "282a3899-14c8-4193-a32f-84d1d6b7b4b4": {
            "type": "selectable",
            "uuid": "282a3899-14c8-4193-a32f-84d1d6b7b4b4",
            "id": "fcs_dtlsc_ext.1.4_22",
            "description": "no other supported groups",
            "exclusive": false,
            "nestedGroups": []
          },
          "99b6b33b-3660-4d06-b1c8-b6616759d2d9": {
            "type": "selectable",
            "uuid": "99b6b33b-3660-4d06-b1c8-b6616759d2d9",
            "id": "fcs_dtlsc_ext.1.4_23",
            "description": "key_share extension (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "819bacc4-12b6-4dcf-9c23-3ede6e96317b": {
            "type": "selectable",
            "uuid": "819bacc4-12b6-4dcf-9c23-3ede6e96317b",
            "id": "fcs_dtlsc_ext.1.4_24",
            "description": "post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446), tls_cert_with_extern_psk (RFC 8773), and psk_key_exchange_modes (RFC 8446) indicating psk_dhe_ke (DHE or ECDHE) mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "76629008-4d54-47bb-b9a1-fa413be9a770": {
            "type": "selectable",
            "uuid": "76629008-4d54-47bb-b9a1-fa413be9a770",
            "id": "fcs_dtlsc_ext.1.4_26",
            "description": "allowing legacy servers",
            "exclusive": false,
            "nestedGroups": []
          },
          "7d9cf4cc-7d7b-47bf-8e31-272d887dd3e0": {
            "type": "selectable",
            "uuid": "7d9cf4cc-7d7b-47bf-8e31-272d887dd3e0",
            "id": "fcs_dtlsc_ext.1.4_27",
            "description": "no other enforcement mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "f5791c96-fc77-4d25-b27c-398d5232ef3f": {
            "type": "selectable",
            "uuid": "f5791c96-fc77-4d25-b27c-398d5232ef3f",
            "id": "fcs_dtlsc_ext.1.4_28",
            "description": "no other extensions",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          DTLS uses TLS extensions.\n        </p> <p>\n          Support for the signature_algorithms extension is optional in RFC 5246 but is mandated for this functional package in accordance with RFC 9151. Support for the signature_algorithms extension is mandatory in RFC 8446 and remains so in this functional package. Whether the TOE's implementation conforms to RFC 5246, RFC 8446, or both is dependent on whether the TOE supports DTLS 1.2, DTLS 1.3, or both.\n        </p> <p>\n          If DTLS 1.3 is claimed in FCS_DTLSC_EXT.1.1, supported_versions, supported_groups, and key_share extensions are claimed in \n          accordance with RFC 8446 and the tls_cert_with_extern_psk extension is claimed in accordance with RFC 8773. \n          If TLS 1.3 is claimed, psk_key_exchange_modes indicating psk_dhe_ke mode is claimed in accordance with RFC 9151. \n          If DTLS 1.3 is not claimed, supported_versions and key_share extensions are not claimed.\n        </p> <p>\n          If DTLS 1.2 is\n          claimed, extended_master_secret extension must be claimed, with the ability to enforce server support, and optionally, the ability to \n          support legacy servers. The extended_master_secret extension (RFC 7627) selection cannot be claimed when DTLS 1.3 is claimed.\n        </p> <p>\n          If DTLS 1.2 is supported and if ECDHE or DHE ciphersuites are claimed in FCS_DTLSC_EXT.1.2, the supported_groups extension is claimed here with appropriate secp and ffdhe groups claimed.\n        </p> <p>\n          For compatibility purposes, DTLS clients may offer additional supported_groups values beyond what is specified in the selection.\n        </p> <p>\n          Other extensions may be supported; certain extensions and values may need to be claimed for SFRs defined outside of this package related to the calling applications.\n        </p>"
      },
      "b991dbb7-9d29-40ae-b887-0136224a90df": {
        "elementXMLID": "fcs_dtlsc_ext-1-5",
        "selectableGroups": {
          "group-24": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlsc_ext.1.5_1",
              "d946a78b-8038-4f73-9821-d9ced1fbd544",
              "3e77bd23-0c8b-44d1-ab66-72eed183d084"
            ]
          },
          "fcs_dtlsc_ext.1.5_1": {
            "description": [
              {
                "text": "verify that a presented identifier of name type:"
              },
              {
                "groups": [
                  "group-26"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-26": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "e7a142bf-3316-440a-93c9-38c846f730ed",
              "c91a8236-6edb-467e-bc1e-aa7b3a82caa5",
              "d10145e0-574c-4d24-bbc9-e74b75db4dac",
              "1167294f-dea8-4fd7-b646-bc0a03912d43",
              "fe60b647-eb71-4f2f-a857-8b51029b9b25",
              "f9ab7174-08e1-451a-840b-67087315c16f",
              "8f2e30e3-cd2f-4445-a552-45106637cfbe",
              "fcs_dtlsc_ext.1.5_9"
            ]
          },
          "fcs_dtlsc_ext.1.5_9": {
            "description": [
              {
                "groups": [
                  "c8fcba32-0edb-49d7-984b-ec3855519305"
                ]
              },
              {
                "text": "according to"
              },
              {
                "groups": [
                  "670f8bc4-fbe0-48f8-b708-3448c0eb8367"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;verify that a presented identifier of name type: &lt;assignable&gt;supported name types &lt;/assignable&gt; &lt;/selectable&gt; &lt;selectable&gt;interface with a supported function requesting the DTLS channel to verify that a presented identifier &lt;/selectable&gt; &lt;selectable&gt;pass initial name constraints to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier &lt;/selectable&gt; &lt;/selectables&gt; matches a reference identifier for the requested DTLS server and shall abort the session if no match is found. &lt;/title&gt; ",
        "title": [
          {
            "text": "\n        The TSF shall be able to "
          },
          {
            "selections": "group-24"
          },
          {
            "text": " \n        matches a reference identifier for the requested DTLS server and shall abort the session if no match is found.\n      "
          }
        ],
        "selectables": {
          "e7a142bf-3316-440a-93c9-38c846f730ed": {
            "type": "selectable",
            "uuid": "e7a142bf-3316-440a-93c9-38c846f730ed",
            "id": "fcs_dtlsc_ext.1.5_2",
            "description": "dNSName according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "c91a8236-6edb-467e-bc1e-aa7b3a82caa5": {
            "type": "selectable",
            "uuid": "c91a8236-6edb-467e-bc1e-aa7b3a82caa5",
            "id": "fcs_dtlsc_ext.1.5_3",
            "description": "uniformResourceIdentifier according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "d10145e0-574c-4d24-bbc9-e74b75db4dac": {
            "type": "selectable",
            "uuid": "d10145e0-574c-4d24-bbc9-e74b75db4dac",
            "id": "fcs_dtlsc_ext.1.5_4",
            "description": "SRVname according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "1167294f-dea8-4fd7-b646-bc0a03912d43": {
            "type": "selectable",
            "uuid": "1167294f-dea8-4fd7-b646-bc0a03912d43",
            "id": "fcs_dtlsc_ext.1.5_5",
            "description": "Common Name conversion to dNSName according to RFC 5280 and RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "fe60b647-eb71-4f2f-a857-8b51029b9b25": {
            "type": "selectable",
            "uuid": "fe60b647-eb71-4f2f-a857-8b51029b9b25",
            "id": "fcs_dtlsc_ext.1.5_6",
            "description": "directoryName according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "f9ab7174-08e1-451a-840b-67087315c16f": {
            "type": "selectable",
            "uuid": "f9ab7174-08e1-451a-840b-67087315c16f",
            "id": "fcs_dtlsc_ext.1.5_7",
            "description": "iPAddress according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "8f2e30e3-cd2f-4445-a552-45106637cfbe": {
            "type": "selectable",
            "uuid": "8f2e30e3-cd2f-4445-a552-45106637cfbe",
            "id": "fcs_dtlsc_ext.1.5_8",
            "description": "rfc822Name according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "c8fcba32-0edb-49d7-984b-ec3855519305": {
            "id": "fcs_dtlsc_ext.1.5_10",
            "description": "other name type",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "670f8bc4-fbe0-48f8-b708-3448c0eb8367": {
            "id": "fcs_dtlsc_ext.1.5_11",
            "description": "RFC number",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "d946a78b-8038-4f73-9821-d9ced1fbd544": {
            "type": "selectable",
            "uuid": "d946a78b-8038-4f73-9821-d9ced1fbd544",
            "id": "fcs_dtlsc_ext.1.5_12",
            "description": "interface with a supported function requesting the DTLS channel to verify that a presented identifier",
            "exclusive": false,
            "nestedGroups": []
          },
          "3e77bd23-0c8b-44d1-ab66-72eed183d084": {
            "type": "selectable",
            "uuid": "3e77bd23-0c8b-44d1-ab66-72eed183d084",
            "id": "fcs_dtlsc_ext.1.5_13",
            "description": "pass initial name constraints to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          The ST author claims the supported options for verifying that the server is associated with an expected reference identifier. The first option is claimed if the TSF implements name matching. The option \u201cinterface with a supported function\u2026\u201d is claimed if the validated certification path, names extracted from the subject field and/or subject alternate name extension of a leaf certificate of a validated certification path, or normalized representations of names extracted from the leaf certificate are passed to a supported function for matching. The option \u201cpass initial name constraints\u2026\u201d is claimed if the TSF formulates initial name constraints from the reference identifiers used by the certification path processing function. The final option is claimed if TLS 1.2 is supported and PSK ciphersuites are supported, and is used to associate the shared PSK with a known identifier.\n        </p><br/><br/><p>\n          If the TSF matches names, the rules for verification of identity are described in RFC 6125, Section 6 and RFC 5280, Section 7. If \"Common name conversion...\"\n          is claimed, both the subject field and the converted common name are matched. The reference identifier is established by the user\n          (e.g., entering a URL into a web browser or clicking a link), by configuration (e.g., configuring the name of a mail or \n          authentication server), or by an application (e.g., a parameter of an API) depending on the supported function. The client \n          establishes all acceptable reference identifiers for matching against the presented identifiers as validated in the server\u2019s\n          certificate. If the TSF performs matching of the reference identifiers to the identifiers provided in the server\u2019s certificate, the\n          first option is claimed and all supported name types are claimed. If the TSF presents the certificate, or the presented identifiers\n          from the certificate to the supported function, the second option is claimed. If the TSF constructs initial name constraints\n          derived from the reference identifiers for validation during certification path validation, the third option is claimed.\n        </p> <p>\n          In most cases where DTLS servers are represented by DNS-type names, the preferred method for verification is the Subject Alternative\n          Name using DNS, URI, or Service Names. Verification using a conversion of the Common Name relative distinguished name from a DNS\n          name type in the subject field is allowed for the purposes of backward compatibility.\n        </p> <p>\n          The client should avoid constructing reference identifiers using wildcards. However, if the presented identifiers include wildcards,\n          the client must follow the best practices regarding matching; these best practices are captured in the evaluation activity. If the\n          TSF supports wildcards and allows names with DNS portions containing internationalized names, the internationalized name should not\n          match any wildcard, in accordance with RFC 6125 section 7.2.\n        </p> <p>\n          Support for other name types is rare, but may be claimed for specific applications. If specified, the assignment includes both the\n          RFC describing normalization and matching rules and any refinements necessary to resolve options available in the RFC.\n        </p>"
      },
      "a9ac8af3-baf4-4b3b-856d-4ceb194c1a46": {
        "elementXMLID": "fel-dtlsc-bad-cert",
        "selectableGroups": {
          "group-27": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "12c58813-a24e-4227-b8e4-f12983505444",
              "fcs_dtlsc_ext.1.6_1"
            ]
          },
          "fcs_dtlsc_ext.1.6_1": {
            "description": [
              {
                "text": "except when override is authorized in accordance with"
              },
              {
                "groups": [
                  "8830ed83-6b91-4390-b6ed-d90cb96073c9"
                ]
              },
              {
                "text": "in the case where valid revocation information is not available"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "title": [
          {
            "text": "\n        The TSF shall not establish a trusted channel if the server certificate is invalid "
          },
          {
            "selections": "group-27"
          },
          {
            "text": ". \n      "
          }
        ],
        "selectables": {
          "12c58813-a24e-4227-b8e4-f12983505444": {
            "type": "selectable",
            "uuid": "12c58813-a24e-4227-b8e4-f12983505444",
            "id": "s-dtlsc-no-excep",
            "description": "with no DTLS-specific exceptions",
            "exclusive": false,
            "nestedGroups": []
          },
          "8830ed83-6b91-4390-b6ed-d90cb96073c9": {
            "id": "fcs_dtlsc_ext.1.6_2",
            "description": "override rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          The option \u201cexcept when\u2026\u201d is claimed if DTLS specific exception rules are implemented to allow server certificates with no valid\n          revocation status information to be accepted. This is claimed only when FIA_X509_EXT.2.2 includes the option \u201csupported function\n          determines acceptance via\u2026\u201d. The assignment for when override is authorized describes the DTLS-specific processing to include the privileged users authorized to configure an override, and the duration of an override. It is preferred that overrides are minimized in scope and time. Otherwise, \u201cwith no\n          DTLS-specific exceptions\u201d is claimed.\n        </p> <p>\n          Note that FIA_X509_EXT.1 may allow methods other than CRL or OCSP to validate the revocation status of a certificate. A\n          certificate that exclusively uses these alternate methods may not advertise revocation status information locations. Thus, a\n          certificate that is valid according to FIA_X509_EXT.1 and does not advertise revocation status information in a CRL_DP or AIA\n          extension is considered to be not revoked. DTLS-specific override mechanisms are for use with certificates with published\n          revocation status information that is not accessible, whether temporarily or because the information cannot be accessed during the\n          state of the TOE (e.g., for verifying signatures on boot code). The circumstances should be described by the ST author, who should\n          indicate the override mechanism and conditions that apply to the override, including system state, user or admin actions, etc.\n        </p>"
      },
      "8028d7f2-30fc-4ccc-8aef-dfef7cbb8e41": {
        "elementXMLID": "fel-dtlsc-bad-mac",
        "selectableGroups": {
          "group-28": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "c34b7d20-18b9-4223-86d4-0dbc7a5a33d7",
              "adfb4676-19a2-47c3-bd51-5a311cb1f967"
            ]
          }
        },
        "title": [
          {
            "text": "\n        The TSF shall "
          },
          {
            "selections": "group-28"
          },
          {
            "text": "\n        if a message received contains an invalid MAC or if decryption fails in the case of GCM and other AEAD ciphersuites.\n      "
          }
        ],
        "selectables": {
          "c34b7d20-18b9-4223-86d4-0dbc7a5a33d7": {
            "type": "selectable",
            "uuid": "c34b7d20-18b9-4223-86d4-0dbc7a5a33d7",
            "id": "fcs_dtlsc_ext.1.7_1",
            "description": "terminate the DTLS session",
            "exclusive": false,
            "nestedGroups": []
          },
          "adfb4676-19a2-47c3-bd51-5a311cb1f967": {
            "type": "selectable",
            "uuid": "adfb4676-19a2-47c3-bd51-5a311cb1f967",
            "id": "fcs_dtlsc_ext.1.7_2",
            "description": "silently discard the record",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n        All supported responses are claimed; at least one option is claimed. \n        </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "92fee571-b367-4c30-8747-3935f0b2e7c2": {
        "tss": "<p>\n            The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported DTLS versions,\n            features, ciphersuites, and extensions are specified in accordance with RFC 6347 (DTLS 1.2) and RFC 9147 (DTLS 1.3 and updates to\n            DTLS 1.2) and as refined in FCS_DTLSC_EXT.1 as appropriate. \n          </p> <p>\n            The evaluator shall verify that ciphersuites indicated in FCS_DTLSC_EXT.1.2 are included in the description, and that none of the\n            following ciphersuites are supported: ciphersuites indicating NULL, RC2, RC4, DES, IDEA, TDES, or AES-128 in the encryption\n            algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.\n          </p> <p>\n            The evaluator shall verify that the DTLS implementation description includes the extensions as required in FCS_DTLSC_EXT.1.4.\n          </p> <p>\n            The evaluator shall verify that the TSS describes applications that use the DTLS functions and how they establish reference\n            identifiers.\n          </p> <p>\n            If name matching is supported, the evaluator shall verify that the TSS includes a description of matching methods used for each\n            supported name type to the supported application defined reference identifiers. The evaluator shall verify that the TSS includes a\n            description of wildcards recognized for each name type claimed in FCS_DTLSC_EXT.1.5, if any, and shall verify that the matching rules meet\n            or exceed best practices. In particular, the evaluator shall ensure that the matching rules are as restrictive as, or more\n            restrictive than the following: \n            <ul><li>DNS names: The \u2018*\u2019 character used in the complete leftmost label of a DNS name represents any valid name that has the\n                same number of labels, and that matches all remaining labels. The \u2018*\u2019 character must only be used in the leftmost complete\n                label of a properly formatted DNS name. The \u2018*\u2019 must not be used to represent a public suffix, or in the leftmost label\n                immediately following a public suffix. </li> <li>URI or SRV names: The \u2018*\u2019 character can only occur in the domain name portion of the name represented as a DNS name. All\n                restrictions for wildcards in DNS names apply to the DNS portion of the name. URI host names presented as an IP address are\n                matched according to IP address matching rules \u2013 see best practices for IP addresses below. In accordance with RFC 6125, it\n                is preferred that such URIs are presented a matching name of type IP address in the SAN.</li> <li>IP addresses: RFC 5280 does not support IP address ranges as presented names, but indicates that presented names may be\n                compared to IP address ranges present in name constraints. If the TSF supports IP address ranges as reference identifiers,\n                the reference identifier matches if the presented name is in the range. IP ranges in name constraints (including reference\n                identifiers) should be presented in CIDR format. </li> <li>RFC 5322 names: RFC 5280 and updates RFC 8398 and RFC 8399 do not support special indicators representing more that a \n                a single mailbox as a presented name, but indicates that presented names may be compared to a single mailbox, \u2018any\u2019 email\n                address at a host, or \u2018any\u2019 email address on a domain (e.g., \u201cexample.com\u201d matches any email address on the host example.com\n                and \u201c.example.com\u201d matches any email address in the domain example.com, but does not match email addresses at the host\n                \u201cexample.com\u201d). Such matching is prohibited for internationalized RFC 5322 names.</li> <li>Embedded CN name types: The CN relative distinguished name of a DNS name type included in the subject field is not\n                strongly typed. Attempts to match both the name type and wildcard specifications can result in matches not intended, and\n                therefore, not authoritatively asserted by a certification authority. It is preferred that no matching of CN embedded names\n                be supported, but if necessary for backward compatibility, the description should clearly indicate how different name types\n                are interpreted in the matching algorithm. If an embedded CN is present, the DN structure containing the CN as an RDN is\n                matched, and the CN component is further matched according to the specific rules for the implied name type. In particular,\n                the \u2018*\u2019 character in a CN is not to be interpreted as representing more than a single entity unless the entirety of the RDN\n                is properly formatted as a DNS, URI, or SVR name, and represents a wildcard meeting best practices as described above.</li></ul></p> <p>\n            If name types are passed to the supported functions, the evaluator shall verify that for each claimed supported function, the TSS includes a description of the information used to validate the identifier that is passed to that function. \n          </p> <p>\n            If name constraints are passed to the certificate verification function, the evaluator shall verify that the TSS describes the\n            initial allow and deny tables for each reference identity reference name supported.\n          </p> <p>        \n            The evaluator shall verify that the TSS describes how the DTLS client IP address is validated prior to issuing a ServerHello\n            message.\n            <p>\n              If override rules are claimed in &lt;xref to=\"fel-dtlsc-bad-cert\"/&gt;, the evaluator shall confirm that the TSS identifies the subjects authorized to configure the override as well as the scope or duration of any overrides.\n            </p></p>\n            The evaluator shall verify that the TSS describes the actions that take place if a message received from the DTLS server fails\n            the integrity check. If both selections are chosen in &lt;xref to=\"fel-dtlsc-bad-mac\"/&gt;, the evaluator shall verify that the TSS describes when\n            each method is used and whether the behavior is configurable.",
        "introduction": "",
        "guidance": "<p>\n            The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that\n            DTLS conforms to the description in the TSS and that it includes any instructions on configuring the version, ciphersuites, or\n            optional extensions that are supported.\n          </p> <p>\n            The evaluator shall verify that all configurable features for matching identifiers in certificates presented in the DTLS\n            handshake to application specific reference identifiers are described.\n          </p> <p>\n            If override rules are claimed in &lt;xref to=\"fel-dtlsc-bad-cert\"/&gt;, the evaluator shall verify the operational guidance has instructions for applying them.\n          </p> <p>\n            If the TSS indicates the behavior of the TSF on receiving a message from the DTLS server that fails the MAC integrity check is\n            configurable, the evaluator shall verify that the guidance documentation describes instructions for configuring the behavior.\n          </p>",
        "testIntroduction": "The evaluator shall perform the following tests.",
        "testClosing": "",
        "testLists": {
          "040ed662-8f83-4ed1-885a-13b16cbbed57": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "c5adcbf3-03b0-4be1-9672-1ea4ee225777",
              "3e711120-73a1-4535-bce1-5d46f481a3bb",
              "aef0cfd5-2015-43d7-be97-20474cf44e84",
              "168c7f29-2635-4cf1-87b4-55ec0460f442",
              "38aa263e-962c-4345-abf5-c1041ab7afde",
              "6d48cecf-3a1d-4669-849b-377b78e79cd8",
              "a7d0baf5-f11a-4929-a206-5ecb6e54bad0",
              "bae97277-72db-41e6-837d-cb5d3b6e595f",
              "58336938-e957-458a-ab54-a5de02ee4a96",
              "a10080a6-6fed-471c-8713-808c65e8319e"
            ],
            "conclusion": ""
          },
          "7fb541b5-955e-4554-b611-1d951a6883d4": {
            "parentTestUUID": "3e711120-73a1-4535-bce1-5d46f481a3bb",
            "description": "",
            "testUUIDs": [
              "47ee8336-6642-4ab0-9066-9c03f209f848",
              "b65fed28-92b0-4b44-ac87-16d241b4d80d"
            ],
            "conclusion": ""
          },
          "c7773276-2700-43b1-8328-05bad3e7bb2c": {
            "parentTestUUID": "aef0cfd5-2015-43d7-be97-20474cf44e84",
            "description": "",
            "testUUIDs": [
              "fc5b4f50-0b52-453f-9761-7ab924fbd95c",
              "aaf52d6e-88c4-4a0d-a0ea-a045a501f8aa",
              "0d50bbeb-829c-4b60-9be3-22ae4a0af251",
              "6241f266-2283-462b-a7a9-ffc59ec84296",
              "06cf3731-46f2-4037-b2ea-84832aee0e23"
            ],
            "conclusion": ""
          },
          "827951fa-cb98-4cf8-ba27-b85e82e9cb7a": {
            "parentTestUUID": "168c7f29-2635-4cf1-87b4-55ec0460f442",
            "description": "",
            "testUUIDs": [
              "d2f8dd01-ec04-4ab0-bf1f-0c72420758bf",
              "31aa50ee-d913-4210-a72f-88a0a9889211",
              "39481982-d04d-4c92-bf09-e94547ee6a75",
              "2978d647-bcad-4d3f-bec0-a9128b45db47"
            ],
            "conclusion": ""
          },
          "4d730b20-ff74-42e9-9460-59469fdba03a": {
            "parentTestUUID": "d2f8dd01-ec04-4ab0-bf1f-0c72420758bf",
            "description": "",
            "testUUIDs": [
              "5f320e57-379c-4e59-bec0-7cd793953a6d",
              "95541563-ffd8-49c1-a634-9b3f14d7c17f",
              "5483c6da-0881-4526-83e4-933a542f8982",
              "7845f0e8-ae37-4a34-92fe-6d222c38f9da"
            ],
            "conclusion": ""
          },
          "df3a358c-eded-4eda-b4a4-52501a94ff37": {
            "parentTestUUID": "39481982-d04d-4c92-bf09-e94547ee6a75",
            "description": "",
            "testUUIDs": [
              "915dcafb-6cc6-4f5d-b4ce-bd95acaacbc7",
              "640bbaab-05be-4938-86e4-87f3fb88ad8e",
              "38ed587e-85d8-42d9-90b0-a7d301e0256e",
              "98d5f475-f871-4abd-8edd-14f155991dd8",
              "d6e7d088-aeea-4cb8-b95a-fef9fcfdcb12",
              "627f61e3-4266-405d-9fba-acb2397d1e96",
              "2ef4a109-1ca3-4419-a041-e6725dea39f6"
            ],
            "conclusion": ""
          },
          "f3ed5278-cc11-4462-b180-70c7e0742118": {
            "parentTestUUID": "2978d647-bcad-4d3f-bec0-a9128b45db47",
            "description": "",
            "testUUIDs": [
              "9dd68f69-a4e3-4f79-a66b-694658d7c90e",
              "a613b68f-613a-4ea2-a626-47326dcea219"
            ],
            "conclusion": ""
          },
          "b1255585-6e9d-47a9-a974-2ec6de2209c1": {
            "parentTestUUID": "38aa263e-962c-4345-abf5-c1041ab7afde",
            "description": "",
            "testUUIDs": [
              "a52e9e06-e9ad-43b5-a6cc-5d985f33ab50",
              "a8dd7060-d0e2-4465-8965-d826d91a4546",
              "fc70d07e-4eec-465e-aa54-0433c6559d4f"
            ],
            "conclusion": ""
          },
          "07fbf35e-8e80-488d-a809-0519d0e5e892": {
            "parentTestUUID": "a52e9e06-e9ad-43b5-a6cc-5d985f33ab50",
            "description": "",
            "testUUIDs": [
              "44a0a026-8173-4093-ae2d-bb7f2f47a485",
              "dc0c9bcc-2e0a-4221-b8a1-eb72c702c847",
              "7102ebc2-d304-4a1a-9cfc-ca04100828c1"
            ],
            "conclusion": ""
          },
          "4a231d9f-c0d3-4658-8853-9330a9b43858": {
            "parentTestUUID": "a8dd7060-d0e2-4465-8965-d826d91a4546",
            "description": "",
            "testUUIDs": [
              "aab89123-24ba-4b24-9b6c-917a7b028e3d",
              "4e79bb56-5414-41f5-af7b-3cd5b62ef29d"
            ],
            "conclusion": ""
          },
          "f88673d2-cdf8-426c-8812-0ecf4b1b6397": {
            "parentTestUUID": "fc70d07e-4eec-465e-aa54-0433c6559d4f",
            "description": "",
            "testUUIDs": [
              "ebff8236-96e5-47c7-922d-08f4ea9ae940",
              "e4116dbb-11b2-4236-8e2e-76512af8a2f2"
            ],
            "conclusion": ""
          },
          "cc486d36-ad68-4e74-b545-d1ffbdf6d541": {
            "parentTestUUID": "bae97277-72db-41e6-837d-cb5d3b6e595f",
            "description": "",
            "testUUIDs": [
              "de5d3aa3-0b91-4e8e-a7dc-723852e59a3d",
              "4c6ce920-78e4-42cf-a709-740049244056",
              "cb516f87-c033-49f5-8e8c-4e45a5993ca7"
            ],
            "conclusion": ""
          },
          "2d0984dd-e585-4eb3-a756-317f0fa6098c": {
            "parentTestUUID": "58336938-e957-458a-ab54-a5de02ee4a96",
            "description": "",
            "testUUIDs": [
              "ba7f35b7-50dc-41d4-9a3a-7ee5bacb6b59",
              "20977232-bf5d-4dc9-ac15-b5e73cf011c5",
              "bdd72adf-b487-417f-ad24-c8a341aa7a10",
              "ddd6bfce-0a80-4be7-a0b4-4366e33c2a4c",
              "41a4e586-8470-4639-87e7-3153b8a7ebc9"
            ],
            "conclusion": ""
          },
          "2d305746-2e9b-469d-a849-dd3059c9f2f3": {
            "parentTestUUID": "20977232-bf5d-4dc9-ac15-b5e73cf011c5",
            "description": "",
            "testUUIDs": [
              "83293597-7fe9-4f05-826e-c0691603591a",
              "892bb716-cf0c-471a-b6cb-d40f708c60c0",
              "fc15481e-8402-4255-8618-4233f3bbdaa0",
              "dd4964cf-165a-4cd2-9c99-fdf5d06500e4",
              "53bc2dac-fec9-4411-a430-e6183ea74c00",
              "48eaa3b9-ad31-4f06-a4d7-259cdbda7ed3",
              "31e88e4b-fe2e-4258-93fd-427a44dc8d2d",
              "1f4d0b94-a1de-4261-8fb9-84a291ffc0c4"
            ],
            "conclusion": " <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue\n                          sending the server certificate and certificate verify messages until the TSF times out.\n                        </p> "
          },
          "dd962e71-595b-4d45-8361-295e3031e43b": {
            "parentTestUUID": "53bc2dac-fec9-4411-a430-e6183ea74c00",
            "description": "",
            "testUUIDs": [
              "a8151125-84c2-469c-a520-3f90a7179268",
              "5a19ea02-0b1a-45b1-96af-972260a4e837",
              "88d35d52-5258-4f0a-8dc9-f3a7f1be5200"
            ],
            "conclusion": " <p><b>Note:</b> For negative sub-tests, if the TSF terminates the session, the test is successful. If the TSF\n                              silently drops the message, the evaluator shall continue sending the server finished until the TSF times out.\n                            </p> "
          },
          "83cb1ad5-85fc-47e1-ae30-830179360485": {
            "parentTestUUID": "bdd72adf-b487-417f-ad24-c8a341aa7a10",
            "description": "",
            "testUUIDs": [
              "f1253385-22a4-4479-a5d0-760088945075",
              "364d5610-af60-4212-8ca3-0b13d1fcc31d"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "c5adcbf3-03b0-4be1-9672-1ea4ee225777": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "dtls-client-supported-configurations",
            "objective": "(supported configurations) For each supported version, and for each supported\n                  ciphersuite associated with the version:\n                  <p>\n                  The evaluator shall establish a DTLS connection between the TOE and a test DTLS server that is configured to negotiate the\n                  tested version and ciphersuite in accordance with the RFC for the version.\n                  </p> <p>\n                  The evaluator shall observe that the TSF presents a ClientHello indicating DTLS 1.2 (value 'fe fd') in the highest or\n                  legacy version field and, if DTLS 1.3 is supported, the \"supported versions\" extension is present and contains the value\n                  'fe fc' for DTLS 1.3\n                  </p> <p>\n                  The evaluator shall observe that the ClientHello indicates the supported ciphersuites in the order indicated, and that it \n                  includes only the extensions supported, with appropriate values, for that version in accordance with the requirement.\n                  </p> <p>\n                  The evaluator shall observe that the TOE successfully completes the DTLS handshake.\n                  </p> <p><b>Note:</b> The highest version field is renamed to the legacy version field for DTLS 1.3. Regardless of the versions\n                  supported, this field is required to indicate DTLS 1.2. If the TOE supports both DTLS 1.2 and DTLS 1.3, the ClientHello\n                  should indicate all ciphersuites and all extensions as required for either version. In particular, the supported versions\n                  extension is required and must include the DTLS 1.3 value ('fe fc') and may also include the DTLS 1.2 indicator ('fe fd').\n                  </p> <p>\n                  If the TOE is configurable to support only DTLS 1.2, only DTLS 1.3, or both DTLS 1.2 and DTLS 1.3,\n                  &lt;xref to=\"dtls-client-supported-configurations\"/&gt; should be performed in each configuration, with ciphersuites and\n                  extensions appropriate for the configured version.\n                  </p> <p>\n                  The connection in &lt;xref to=\"dtls-client-supported-configurations\"/&gt; may be established as part of the establishment of a\n                  higher-level protocol, (e.g., as part of an EAP session). \n                  </p> <p>\n                  It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; it is not\n                  necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used \n                  (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "47ee8336-6642-4ab0-9066-9c03f209f848": {
            "testListUUID": "7fb541b5-955e-4554-b611-1d951a6883d4",
            "id": "dtls-client-obsolete-versions",
            "objective": "For each obsolete DTLS version (i.e., DTLS 1.0 is always obsolete, and DTLS 1.2 is obsolete if only DTLS 1.3 is supported), the evaluator shall\n                      initiate a DTLS connection from the TOE to a test DTLS server that is configured to negotiate the obsolete version and\n                      observe that the TSF silently drops the message or terminates the connection.\n                      <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall repeat sending the message until the TSF times out. It is preferred that the TSF logs a fatal error\n                        alert message (e.g., protocol version, insufficient security) in response to this, but it is acceptable that the TSF\n                        terminates the connection silently (i.e., without logging a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b65fed28-92b0-4b44-ac87-16d241b4d80d": {
            "testListUUID": "7fb541b5-955e-4554-b611-1d951a6883d4",
            "id": "dtls-client-nonstandard-versions",
            "objective": "<p>\n                        The evaluator shall follow the operational guidance to configure the TSF to\n                        ensure any supported beta DTLS 1.3 versions are disabled, as necessary. The evaluator\n                        shall send the TSF a ClientHello message indicating the supported version (referred to\n                        as the legacy version in RFC 9147) with the value 'fe fc' but without including the\n                        supported_versions extension and observe that the TSF responds with a ServerHello\n                        indicating DTLS 1.2, silently drops the message, or terminates the connection.\n                      </p> <p><b>Note:</b> If the TSF responds with a ServerHello indicating DTLS 1.2 in the highest version or legacy version,\n                      the test is successful. If the TSF silently drops the message, the evaluator shall repeat sending the message until the\n                      TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., protocol version) in response to\n                      this response, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal \n                      error alert). \n                    </p> <p>&lt;xref to=\"dtls-client-nonstandard-versions\"/&gt; is intended to test the TSF response to non-standard versions, higher than\n                      indicated in the ClientHello's \"highest version or legacy version\" supported, including early proposals for 'beta DTLS\n                      1.3' versions. If the TSF supports such beta versions, the evaluator shall follow the operational guidance instructions\n                      to disable them prior to conducting &lt;xref to=\"dtls-client-nonstandard-versions\"/&gt;.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3e711120-73a1-4535-bce1-5d46f481a3bb": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(obsolete versions) The evaluator shall perform the following tests:\n                \n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "7fb541b5-955e-4554-b611-1d951a6883d4"
            ]
          },
          "fc5b4f50-0b52-453f-9761-7ab924fbd95c": {
            "testListUUID": "c7773276-2700-43b1-8328-05bad3e7bb2c",
            "id": "",
            "objective": "(supported ciphersuite not offered) For each supported version, the evaluator shall attempt to establish a connection with a\n                      test DTLS server configured to negotiate the supported version and a ciphersuite not included in the ClientHello and\n                      observe that the TOE silently drops the message or rejects the connection.\n                    <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the\n                      evaluator shall repeat sending the ServerHello message until the TSF times out. It is preferred that the TSF logs a\n                      fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates\n                      the connection silently (i.e., without logging a fatal error alert). \n                    </p> <p>\n                      This test is intended to test the TSF\u2019s generic ability to recognize non-offered ciphersuites. \n                      If the ciphersuites in the ClientHello are configurable, \n                      the evaluator shall configure the TSF not to offer a supported ciphersuite and then use that ciphersuite in the test. \n                      If the TSF ciphersuite list is not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols\n                      associated with the tested version. \n                      Additional special cases of this test for special ciphersuites are performed separately.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "aaf52d6e-88c4-4a0d-a0ea-a045a501f8aa": {
            "testListUUID": "c7773276-2700-43b1-8328-05bad3e7bb2c",
            "id": "dtls-client-version-confusion",
            "objective": "(version confusion) For each supported version, \n                      the evaluator shall attempt to establish a connection with a test DTLS server that is configured to negotiate the\n                      supported version and a ciphersuite that is not associated with that version and observe that the TOE silently drops the\n                      message or rejects the connection.\n                      <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                        fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates\n                        the connection silently (i.e., without logging a fatal error alert). \n                      </p> <p>\n                        If the TSF supports DTLS 1.2, the evaluator shall use DTLS 1.3 ciphersuites for a server negotiating DTLS 1.2. If DTLS\n                        1.3 is supported, the test server negotiating DTLS 1.3 should select a DTLS 1.2 ciphersuite consistent with the client's\n                        supported groups and signature algorithm indicated by extensions in the DTLS 1.3 ClientHello. \n                      </p> <p>\n                        If the TOE is configurable to allow both DTLS 1.2 and DTLS 1.3 servers, the evaluator should use this configuration for\n                        the test, and configure the test server to use ciphersuites offered by the TSF in its ClientHello message.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "0d50bbeb-829c-4b60-9be3-22ae4a0af251": {
            "testListUUID": "c7773276-2700-43b1-8328-05bad3e7bb2c",
            "id": "",
            "objective": "(null ciphersuite) For each supported version, the evaluator shall attempt to establish a connection with a test TLS\n                  server configured to negotiate the null ciphersuite (TLS_NULL_WITH_NULL_NULL) and observe that the TOE silently discards the \n                  message or rejects the connection. \n                      <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently discards the message,\n                        the evaluator shall repeat the test until the TSF times out. It is preferred that the TSF logs a fatal error alert\n                        message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF\n                        terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6241f266-2283-462b-a7a9-ffc59ec84296": {
            "testListUUID": "c7773276-2700-43b1-8328-05bad3e7bb2c",
            "id": "",
            "objective": "The evaluator shall perform one or more of the following tests to demonstrate the TOE does not connect with\n                      anonymous servers:\n                      <p>\n                       [conditional] (anon ciphersuite) If the TSF supports DTLS 1.2, the evaluator shall attempt to establish a DTLS 1.2\n                       connection with a test TLS server configured to negotiate a ciphersuite using the anonymous server authentication\n                       method and observe that the TOE silently drops the message or rejects the connection.\n                      </p> <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message\n                        the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                        fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable\n                        that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                      </p> <p>\n                    See IANA TLS parameters for available ciphersuites to be selected by the test DTLS server. \n                    The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. \n                    For example, if the TSF only supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could\n                    select TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.\n                    </p> <p>\n                      [conditional] (anon ciphersuite) If the TSF supports DTLS 1.3, the evaluator shall attempt to establish a DTLS 1.3\n                      connection with a test DTLS server configured to assert a \u2018raw public key\u2019 in the server_certificate_type as defined in\n                      RFC 7250, and to send its certificate message including the raw public key indicator for the public key information\n                      field (regardless of the client's support for this extension). The evaluator shall observe that the TSF does not send\n                      the server_certificate_type extension indicating support for raw public keys in its ClientHello message and silently\n                      drops the message or terminates the session when receiving the server\u2019s certificate message.\n                    </p> <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message,\n                      the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                      fatal error alert message (e.g., bad_certificate, unsupported_certificate) in response to this, but it is acceptable\n                      that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                    </p> <p>\n                      It is acceptable for the TSF to support the extensions defined in RFC 7250. If so, it must not include the value\n                      indicating support for raw public keys in the server_certificate_type extension.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "06cf3731-46f2-4037-b2ea-84832aee0e23": {
            "testListUUID": "c7773276-2700-43b1-8328-05bad3e7bb2c",
            "id": "dtls-client-deprecated-encryption",
            "objective": "<p>\n                        The evaluator shall perform one or more of the following tests to demonstrate that the TOE does not accept\n                        connections using disallowed ciphersuites:\n                      </p> <p>\n                        [conditional] (disallowed encryption algorithm) If the TSF supports DTLS 1.2, for each\n                        disallowed encryption algorithm (NULL, RC2, RC4, DES, IDEA, TDES, and AES-128), \n                        the evaluator shall attempt to establish a DTLS 1.2 connection with a test DTLS server \n                        configured to negotiate a ciphersuite using the disallowed encryption algorithm \n                        and observe that the TOE silently drops the message or rejects the connection.\n                      </p> <p>\n                        [conditional] (disallowed encryption algorithm) If the TSF supports DTLS 1.3, for each DTLS 1.3 ciphersuite\n                        registered in IANA TLS parameters using AES-128 as the encryption algorithm, the evaluator shall attempt to\n                        establish a DTLS 1.3 connection with a test DTLS server configured to negotiate a ciphersuite using the\n                        disallowed encryption algorithm and observe that the TOE silently drops the message or rejects the connection.   \n                      </p> <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                        fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable\n                        that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                      </p> <p>\n                      See IANA TLS parameters for available ciphersuites to be tested. The test ciphersuite should use supported\n                      cryptographic algorithms for as many of the other components as possible. \n                      For example, if the TSF only supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select\n                      TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5, TLS_ECDHE_RSA_WITH_RC4_128_SHA, \n                      TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.  \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "aef0cfd5-2015-43d7-be97-20474cf44e84": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(ciphersuites) The evaluator shall perform the following tests on handling unexpected ciphersuites using a test DTLS\n                  server sending handshake messages compliant with the negotiated version except as indicated in the test:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "c7773276-2700-43b1-8328-05bad3e7bb2c"
            ]
          },
          "5f320e57-379c-4e59-bec0-7cd793953a6d": {
            "testListUUID": "4d730b20-ff74-42e9-9460-59469fdba03a",
            "id": "",
            "objective": "For each supported version, the evaluator shall initiate a DTLS session with a DTLS test server and observe that\n                        the TSF\u2019s ClientHello includes the signature_algorithms extension with values in conformance with the ST.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "95541563-ffd8-49c1-a634-9b3f14d7c17f": {
            "testListUUID": "4d730b20-ff74-42e9-9460-59469fdba03a",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.2 and supports an ECDHE or DHE ciphersuite, the evaluator shall ensure\n                        the test DTLS server sends a compliant ServerHello message selecting DTLS 1.2 and one of the supported ECDHE or DHE\n                        ciphersuites, a compliant server certificate message, and a key exchange message signed using a signature algorithm\n                        and hash combination not included in the ClientHello message (e.g., RSA with SHA-1). The evaluator shall observe\n                        that the TSF silently drops the message or terminates the handshake.\n                        <p><b>Note:</b> If the TSF terminates the handshake, the test is successful. If the TSF silently drops the message,\n                          the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                          fatal error alert message (e.g., handshake failure, illegal parameter, decryption error) in response to this, \n                          but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5483c6da-0881-4526-83e4-933a542f8982": {
            "testListUUID": "4d730b20-ff74-42e9-9460-59469fdba03a",
            "id": "",
            "objective": "[conditional] If DTLS 1.3 is supported, the evaluator shall configure the test DTLS server to respond to the TOE\n                        with a compliant ServerHello message selecting DTLS 1.3 and a server certificate message, \n                        but then also send a certificate verification message that uses a signature algorithm method not included in the\n                        signature_algorithms extension. The evaluator shall observe that the TSF only includes supported signature algorithms\n                        in the signature_algorithms extension in its ClientHello and silently drops the message or terminates the TLS\n                        handshake after receiving the server certificate message.\n                        <p><b>Note:</b> If the TSF terminates the handshake, the test is successful. If the TSF silently drops the\n                          message, the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that\n                          the TSF logs a fatal error alert message (e.g., handshake failure, illegal parameter, bad certificate,\n                          decryption error) in response to this, but it is acceptable that the TSF terminates the connection silently\n                          (i.e., without logging a fatal error alert).  \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7845f0e8-ae37-4a34-92fe-6d222c38f9da": {
            "testListUUID": "4d730b20-ff74-42e9-9460-59469fdba03a",
            "id": "",
            "objective": "\n                        [conditional] If certificate-based authentication is supported, and for all supported versions for which\n                        signature_algorithms_cert is not supported, the evaluator shall ensure the test DTLS server sends \n                        a compliant ServerHello message for the tested version and a server certificate message containing a\n                        valid certificate that represents the test DTLS server, but which is signed using a signature and hash\n                        combination not included in the TSF\u2019s signature_algorithms extension (e.g., a certificate signed using\n                        RSA and SHA-1). The evaluator shall observe that the TSF silently drops the message or terminates the TLS session.\n                        <p><b>Note:</b> If the TSF terminates the handshake, the test is successful. If the TSF silently drops\n                          the message, the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred\n                          that the TSF logs a fatal error alert message (e.g., unsupported certificate, bad certificate, decryption error,\n                          handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently\n                          (i.e., without logging a fatal error alert).  \n                        </p> <p>\n                          Certificate-based server authentication is required unless the TSF only supports DTLS with PSK authentication. DTLS 1.3 always requires certificate-based server authentication (even if a PSK is also supported for key exchange), so the only circumstance where this would apply is if DTLS 1.2 is claimed and the only supported ciphersuites are the TLS_*_PSK ciphersuites defined in RFCs 5487 and 8442. \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "d2f8dd01-ec04-4ab0-bf1f-0c72420758bf": {
            "testListUUID": "827951fa-cb98-4cf8-ba27-b85e82e9cb7a",
            "id": "",
            "objective": "\n                    (signature_algorithms) [conditional] If the TSF supports certificate-based server authentication, the evaluator shall\n                    perform the following tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "4d730b20-ff74-42e9-9460-59469fdba03a"
            ]
          },
          "31aa50ee-d913-4210-a72f-88a0a9889211": {
            "testListUUID": "827951fa-cb98-4cf8-ba27-b85e82e9cb7a",
            "id": "dtls-client-signature-algs-cert",
            "objective": "(signature_algorithms_cert) [conditional]  \n                    If signature_algorithms_cert is supported, then for each version that uses the signature_algorithms_cert extension, \n                    the evaluator shall ensure that the test DTLS server sends a compliant ServerHello message selecting the tested version\n                    and indicating certificate-based server authentication.\n                    <p>\n                    The evaluator shall ensure that the test DTLS server forwards a certificate message containing a valid certificate\n                    that represents the test DTLS server, but which is signed by a valid Certification Authority using a signature and\n                    hash combination not included in the TSF\u2019s signature_algorithms_cert extension (e.g., a certificate signed using RSA\n                    and SHA-1). The evaluator shall confirm the TSF silently drops the message or terminates the session.\n                    </p> <p><b>Note:</b> Certificate-based server authentication is required unless the TSF only supports DTLS with PSK authentication. DTLS 1.3 always requires certificate-based server authentication (even if a PSK is also supported for key exchange), so the only circumstance where this would apply is if DTLS 1.2 is claimed and the only supported ciphersuites are the TLS_*_PSK ciphersuites defined in RFCs 5487 and 8442. If the TSF only supports PSK authentication, &lt;xref to=\"dtls-client-signature-algs-cert\"/&gt; is not performed.\n                    </p> <p>\n                    For DTLS 1.3, the server certificate message is encrypted. \n                    The evaluator shall configure the test DTLS server with the indicated certificate and ensure that the certificate is \n                    indeed sent by observing the buffer of messages to be encrypted, or by inspecting one or both sets of logs from the TSF\n                    and test DTLS server.\n                    </p> <p>\n                    If the TSF terminates the handshake, the test is successful. If the TSF silently drops the server certificate message,\n                    the evaluator shall continue sending the message until the TSF times out.\n                    It is preferred that the TSF logs a fatal error alert message (e.g., unsupported certificate, bad certificate, \n                    decryption error, handshake failure) in response to this, but it is acceptable that the TSF terminates the connection\n                    silently (i.e., without logging a fatal error alert). \n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "915dcafb-6cc6-4f5d-b4ce-bd95acaacbc7": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>The evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) and initiate \n                        a DTLS 1.2 session with a test DTLS server configured to use the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627, and ensures that the test DTLS server \n                          includes the extended_master_secret extension in its ServerHello. The evaluator shall observe that the DTLS session between the TOE and DTLS Server is established successfully.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "640bbaab-05be-4938-86e4-87f3fb88ad8e": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>The evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) and initiate a DTLS 1.2 \n                          session with a test DTLS server configured to omit the extended_master_secret extension/compute a master secret according to RFC 5246, section 8.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensure that the test DTLS server does not \n                          include the extended_master_secret extension in its ServerHello.  The evaluator shall observe that the TSF silently drops the message or terminates the connection in accordance with the behavior documented \n                          in the ST and the DTLS session between the TOE and DTLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "38ed587e-85d8-42d9-90b0-a7d301e0256e": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers the evaluator shall configure the TSF (if so configurable) to allow legacy servers and initiate a DTLS 1.2 session \n                          with a test DTLS server configured to omit the extended_master_secret extension/compute a master secret according to RFC 5246, section 8.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test DTLS server does \n                          not include the extended_master_secret extension in its ServerHello.  The evaluator shall observe that the DTLS session between the TOE and DTLS Server is established successfully.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "98d5f475-f871-4abd-8edd-14f155991dd8": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers, and the TOE supports DTLS session resumption, the evaluator shall configure the TSF (if so configurable) to allow legacy \n                          servers and resume a DTLS 1.2 session that previously computed the master secret in accordance with RFC 5246, section 8 (did not use the extended_master_secret extension in accordance \n                          with RFC 7627) with a test DTLS server configured to include the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>\n                          The evaluator shall observe that the TSF\u2019s ClientHello omits the extended_master_secret extension and ensures that the test DTLS server includes the extended_master_secret extension in \n                          its ServerHello.  The evaluator shall observe that the TSF silently drops the message or terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the DTLS session \n                          between the TOE and DTLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "d6e7d088-aeea-4cb8-b95a-fef9fcfdcb12": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers, and the TOE supports DTLS session resumption, the evaluator shall configure the TSF (if so configurable) to allow legacy \n                          servers and resume a DTLS 1.2 session that previously used the extended_master_secret extension in accordance with RFC 7627 with a test DTLS server configured to omit the extended_master_secret extension.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test DTLS server does not include the extended_master_secret \n                          extension in its ServerHello.  The evaluator shall observe that the TSF silently drops the message or terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the DTLS session \n                          between the TOE and DTLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "627f61e3-4266-405d-9fba-acb2397d1e96": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports DTLS session resumption, the evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) \n                          and resume a DTLS 1.2 session that previously computed the master secret in accordance with RFC 5246, section 8 (did not use the extended_master_secret extension in accordance with RFC 7627) with a test DTLS server \n                          configured to include the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello omits the extended_master_secret extension and ensures that the test DTLS server includes the extended_master_secret extension in its ServerHello. \n                          The evaluator shall observe that the TSF silently drops the message or terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the DTLS session between the TOE and DTLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2ef4a109-1ca3-4419-a041-e6725dea39f6": {
            "testListUUID": "df3a358c-eded-4eda-b4a4-52501a94ff37",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports DTLS session resumption, the evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) \n                          and resume a DTLS 1.2 session that previously used the extended_master_secret extension in accordance with RFC 7627 with a test DTLS server configured to omit the extended_master_secret extension.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test DTLS server does not include the extended_master_secret \n                          extension in its ServerHello.  The evaluator shall observe that the TSF silently drops the message or terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the DTLS session between the TOE and DTLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "39481982-d04d-4c92-bf09-e94547ee6a75": {
            "testListUUID": "827951fa-cb98-4cf8-ba27-b85e82e9cb7a",
            "id": "",
            "objective": "(extended_master_secret for DTLS 1.2) [conditional] If the TSF supports DTLS 1.2, the evaluator shall establish a connection \n                    from the TOE with a test DTLS server configured as described in the following test and observe the behavior.\n                    <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                      the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs\n                      a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF\n                      terminates the connection silently (i.e., without logging a fatal error alert). \n                    </p> <p>In addition to mandatory tests 1-2:</p> <p>if the TOE supports Legacy Servers, also perform test 3;</p> <p>if the TOE supports session resumption, also perform tests 6-7;</p> <p>if the TOE supports both, also perform tests 4-5.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "df3a358c-eded-4eda-b4a4-52501a94ff37"
            ]
          },
          "9dd68f69-a4e3-4f79-a66b-694658d7c90e": {
            "testListUUID": "f3ed5278-cc11-4462-b180-70c7e0742118",
            "id": "",
            "objective": "For each supported group, the evaluator shall initiate a DTLS session with a compliant test DTLS 1.2 server\n                      supporting RFC 7919. The evaluator shall ensure that the test DTLS server is configured to select DTLS 1.2 and \n                      a ciphersuite using the supported group. The evaluator shall observe that the TSF\u2019s ClientHello lists the \n                      supported groups as indicated in the ST, and that the TSF successfully establishes the DTLS session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a613b68f-613a-4ea2-a626-47326dcea219": {
            "testListUUID": "f3ed5278-cc11-4462-b180-70c7e0742118",
            "id": "",
            "objective": "[conditional on DTLS 1.2 support for ECDHE ciphersuites]  The evaluator shall initiate a DTLS session with\n                      a test DTLS server that is configured to negotiate DTLS 1.2 and use an explicit version of a named EC group\n                      supported by the client. The evaluator shall ensure that the test DTLS server key exchange message includes \n                      the explicit formulation of the group in its key exchange message as indicated in RFC 4492, Section 5.4. \n                      The evaluator shall confirm that the TSF silently drops the message or terminates the session.\n                      <p><b>Note:</b>: If the TSF terminates the session, the test is successful. If the TSF silently drops the\n                        message, the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that\n                        the TSF logs a fatal error alert message (e.g., illegal parameter) in response to this, but it is acceptable\n                        that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2978d647-bcad-4d3f-bec0-a9128b45db47": {
            "testListUUID": "827951fa-cb98-4cf8-ba27-b85e82e9cb7a",
            "id": "",
            "objective": "(supported_groups for DTLS 1.2) [conditional] If the TSF supports DTLS 1.2, and supports ECDHE or DHE ciphersuites,\n                    the evaluator shall perform the following tests.\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "f3ed5278-cc11-4462-b180-70c7e0742118"
            ]
          },
          "168c7f29-2635-4cf1-87b4-55ec0460f442": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(extensions) For each supported version indicated in the following tests, \n                  the evaluator shall establish a connection from the TOE with a test server negotiating the tested version and providing \n                  server handshake messages as indicated when performing the following tests for validating proper extension handling:\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "827951fa-cb98-4cf8-ba27-b85e82e9cb7a"
            ]
          },
          "44a0a026-8173-4093-ae2d-bb7f2f47a485": {
            "testListUUID": "07fbf35e-8e80-488d-a809-0519d0e5e892",
            "id": "",
            "objective": "The evaluator shall configure the test DTLS server to include the supported versions extension in the ServerHello only containing the value 'fe fe.' The evaluator shall observe that the TSF silently drops the message or \n                      terminates the DTLS session.\n                      <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall continue sending the ServerHello until the TSF times out. It is preferred that the TSF logs a\n                        fatal error alert message (e.g., illegal parameter, handshake failure, protocol version) in response to this, but \n                        it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).   \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "dc0c9bcc-2e0a-4221-b8a1-eb72c702c847": {
            "testListUUID": "07fbf35e-8e80-488d-a809-0519d0e5e892",
            "id": "",
            "objective": "The evaluator shall configure the test DTLS server to include the supported versions extension in the ServerHello containing the value 'fe fc' and complete a compliant DTLS 1.3 handshake. \n                      The evaluator shall observe that the TSF completes the DTLS 1.3 handshake successfully.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7102ebc2-d304-4a1a-9cfc-ca04100828c1": {
            "testListUUID": "07fbf35e-8e80-488d-a809-0519d0e5e892",
            "id": "",
            "objective": "[conditional] If the TSF is configurable to support both DTLS 1.2 and DTLS 1.3, \n                      the evaluator shall follow operational guidance to configure this behavior. The evaluator shall ensure that the test DTLS server sends a DTLS 1.2 compliant server handshake and \n                      observe that the server random does not incidentally include any downgrade messaging. \n                      The evaluator shall observe that the TSF completes the DTLS 1.2 handshake successfully.\n                      <p><b>Note:</b> Enhanced downgrade protection defined in RFC 8446 is optional, and if supported, is tested separately. \n                      The evaluator may configure the test server\u2019s random, or may repeat the test until the server\u2019s random does not match a downgrade indicator.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a52e9e06-e9ad-43b5-a6cc-5d985f33ab50": {
            "testListUUID": "b1255585-6e9d-47a9-a974-2ec6de2209c1",
            "id": "",
            "objective": "(supported versions) The evaluator shall initiate DTLS 1.3 sessions in turn from the TOE to a test DTLS server\n                    configured as indicated in the sub-tests below: \n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "07fbf35e-8e80-488d-a809-0519d0e5e892"
            ]
          },
          "aab89123-24ba-4b24-9b6c-917a7b028e3d": {
            "testListUUID": "4a231d9f-c0d3-4658-8853-9330a9b43858",
            "id": "",
            "objective": "For each supported group, the evaluator shall configure the compliant test DTLS 1.3 server to select a ciphersuite using the group. \n                      The evaluator shall observe that the TSF sends an element of the group in its ClientHello key_share extension \n                      (after a HelloRetryRequest message from the test server, if the key share for the group is not included in the initial ClientHello). \n                      The evaluator shall ensure the test DTLS server sends an element of the group in its ServerHello and observes that the TSF completes the DTLS handshake successfully.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4e79bb56-5414-41f5-af7b-3cd5b62ef29d": {
            "testListUUID": "4a231d9f-c0d3-4658-8853-9330a9b43858",
            "id": "",
            "objective": "For each supported group, the evaluator shall modify the ServerHello sent by the test DTLS server to include an invalid key_share value claiming \n                      to be an element the group indicated in the supported_groups extension. \n                      The evaluator shall observe that the TSF silently drops the message or terminates the DTLS session.\n                      <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops\n                        the message, the evaluator shall continue sending the ServerHello until the TSF times out. It is \n                        preferred that the TSF logs a fatal error alert message (e.g., illegal parameter) in response to \n                        this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging\n                        a fatal error alert). \n                      </p> <p>\n                      For DHE ciphersuites, a zero value, or a value greater or equal to the modulus is not a valid element. \n                      For ECDHE groups, an invalid point contains x and y coordinates of the correct size, \n                      but represents a point not on the curve. The evaluator shall construct such an invalid point by modifying\n                      a byte in the y coordinate of a valid point and verify that the coordinates do not satisfy the curve equation.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a8dd7060-d0e2-4465-8965-d826d91a4546": {
            "testListUUID": "b1255585-6e9d-47a9-a974-2ec6de2209c1",
            "id": "",
            "objective": "(supported groups, key shares) The evaluator shall initiate DTLS 1.3 sessions in turn with a test DTLS server configured as indicated in the following sub-tests:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "4a231d9f-c0d3-4658-8853-9330a9b43858"
            ]
          },
          "ebff8236-96e5-47c7-922d-08f4ea9ae940": {
            "testListUUID": "f88673d2-cdf8-426c-8812-0ecf4b1b6397",
            "id": "",
            "objective": "<p>The evaluator shall configure the TSF to use the pre-shared key and ensure that the test DTLS server \n                          functions as a compliant DTLS 1.3 server. The evaluator shall observe that the TSF\u2019s ClientHello includes\n                          the pre_shared_key extension with the valid PSK indicator shared with the test server. The evaluator shall\n                          also observe that the TSF\u2019s ClientHello also includes the psk_key_exchange_modes and the post_handshake_auth\n                          extensions and that the psk_key_exchange_modes indicates psk_dhe_ke (the DHE or ECDHE mode) but does not \n                          include psk_ke (the PSK-only mode). The evaluator shall observe that the TSF completes the DTLS 1.3 handshake\n                          successfully in accordance with RFC 9147, to include the TSF sending appropriate key shares for one or more of the supported groups.\n                        </p> <p>\n                        Once the handshake is successful, the evaluator shall cause the test DTLS server to send a certificate request and observe that the TSF provides a certificate message and certificate verify message. \n                        </p> <p><b>Note:</b> It may be necessary to complete a standard handshake and send a new-ticket message from the test DTLS server to establish a pre-shared key, \n                        or it might be possible to configure the pre-shared key manually via out-of-band mechanisms. \n                        This can be performed in conjunction with other testing that is not tested as part of this SFR. \n                        It is not required at this time to support emerging standards on establishing PSK, but as such standards are finalized, this FP may be updated to require such support.\n                        </p> <p>\n                        DTLS messages after the handshake are encrypted so it may not be possible to observe the certificate and certificate verify messages sent by the TSF directly. \n                        The evaluator may need to configure the test DTLS server to use an application that requires post-handshake client authentication and \n                        terminates the session or otherwise has an observable effect if the certificate is not provided.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e4116dbb-11b2-4236-8e2e-76512af8a2f2": {
            "testListUUID": "f88673d2-cdf8-426c-8812-0ecf4b1b6397",
            "id": "",
            "objective": "The evaluator shall attempt to configure the TSF to send early data. \n                        If there is no indication from the TSF that this is blocked, the evaluator shall repeat test \n                        5.3.1 with the TSF so configured and observe that the TSF does not send application data prior to receiving the ServerHello. \n                        <p><b>Note:</b> Early data will be encrypted under the PSK and received by the test DTLS server prior to it sending a ServerHello message. \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "fc70d07e-4eec-465e-aa54-0433c6559d4f": {
            "testListUUID": "b1255585-6e9d-47a9-a974-2ec6de2209c1",
            "id": "",
            "objective": "\n                    (PSK support) [conditional] If the TSF supports pre-shared keys, the evaluator shall follow the operational guidance to use pre-shared keys, \n                    shall establish a pre-shared key between the TSF and the test DTLS server, and initiate DTLS 1.3 sessions in turn \n                    between the TSF and the test DTLS server configured as indicated in the following sub-tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "f88673d2-cdf8-426c-8812-0ecf4b1b6397"
            ]
          },
          "38aa263e-962c-4345-abf5-c1041ab7afde": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(DTLS 1.3 extensions) [conditional] If the TSF supports DTLS 1.3, the evaluator shall perform the following tests. \n                  For each test, the evaluator shall observe that the TSF\u2019s ClientHello includes the supported versions extension with\n                  the value 'fe fc' indicating DTLS 1.3:\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "b1255585-6e9d-47a9-a974-2ec6de2209c1"
            ]
          },
          "6d48cecf-3a1d-4669-849b-377b78e79cd8": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(corrupt finished message) For each supported version, the evaluator shall initiate a DTLS session from the TOE to a test DTLS server that sends a compliant set of server handshake messages, \n                  except for sending a modified finished message \n                  (modify a byte of the finished message that would have been sent by a compliant server). \n                  The evaluator shall observe that the TSF silently drops the message or terminates the session and in either case, does not complete the handshake by \n                  observing that the TSF does not send application data provided to the DTLS channel.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a7d0baf5-f11a-4929-a206-5ecb6e54bad0": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "dtls-client-missing-finished",
            "objective": "(missing finished message) For each supported version, the evaluator shall initiate a session from the TOE to a test DTLS server providing a compliant handshake, \n                  except for sending a random DTLS message (the five byte header indicates a correct DTLS message for the negotiated version, but not indicating a finished message) as the final message. \n                  The evaluator shall observe that the TSF silently drops the message or terminates the session and in either case, does not send application data.\n                  <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the \n                    evaluator shall continue sending the server finished until the TSF times out. It is preferred that the TSF logs a \n                    fatal error alert message (e.g., decryption error) in response to this, but it is acceptable that the TSF terminates\n                    the connection silently (i.e., without logging a fatal error alert).\n                  </p> <p>\n                  For DTLS 1.2, the modified message is sent after the change_cipher_spec message. For DTLS 1.3, the modified message is sent as the last message of the server\u2019s second flight of messages.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "de5d3aa3-0b91-4e8e-a7dc-723852e59a3d": {
            "testListUUID": "cc486d36-ad68-4e74-b545-d1ffbdf6d541",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.2 and if the ST indicates support for ECDSA or DSA ciphersuites, \n                    the evaluator shall initiate a DTLS session with a compliant test DTLS server and modify the signature in the server key exchange message. \n                    The evaluator shall observe that the TSF silently drops the key exchange message or terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4c6ce920-78e4-42cf-a709-740049244056": {
            "testListUUID": "cc486d36-ad68-4e74-b545-d1ffbdf6d541",
            "id": "",
            "objective": "[conditional] If the ST indicates support for DTLS 1.3, the evaluator shall initiate a DTLS session between the TOE \n                    and a test DTLS server that is configured to send a compliant ServerHello message, encrypted extension message, and certificate message, \n                    but will send a certificate verify message with an invalid signature (e.g., by modifying a byte from a valid signature). \n                    The evaluator shall confirm that the TSF silently drops the message or terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "cb516f87-c033-49f5-8e8c-4e45a5993ca7": {
            "testListUUID": "cc486d36-ad68-4e74-b545-d1ffbdf6d541",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.2 and if the ST indicates support for both RSA and ECDSA methods in the signature_algorithm \n                    (or, if supported, the signature_algorithms_cert) extension, \n                    and if the ST indicates one or more DTLS 1.2 ciphersuites indicating each of the RSA and ECDSA methods in its signature components, \n                    the evaluator shall choose two ciphersuites: one indicating an RSA signature (cipher 1) and one indicating an ECDSA signature (cipher 2).\n                    The evaluator shall then establish two certificates that are trusted by the TOE: one representing the test DTLS 1.2 server using an RSA signature (cert 1) and one \n                    representing the test DTLS 1.2 server using an ECDSA signature (cert 2).\n                    \n                    The evaluator shall initiate a DTLS session between the TOE and the test DTLS 1.2 server that is configured to select cipher 1 and to send cert 2. The evaluator shall verify that the TSF silently drops the message or terminates this DTLS session.\n                    The evaluator shall then initiate a DTLS session between the TOE and the test DTLS 1.2 server that is configured to select cipher 2 and to send cert 1. The evaluator shall verify that the TSF also silently drops the message or terminates this DTLS session. \n                    <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the \n                      evaluator shall continue sending the server finished until the TSF times out. It is preferred that the TSF logs a \n                      fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in response to this, but \n                      it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bae97277-72db-41e6-837d-cb5d3b6e595f": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "(unexpected/corrupt signatures within handshake) The evaluator shall perform the following tests, according to the versions supported.\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "cc486d36-ad68-4e74-b545-d1ffbdf6d541"
            ]
          },
          "ba7f35b7-50dc-41d4-9a3a-7ee5bacb6b59": {
            "testListUUID": "2d0984dd-e585-4eb3-a756-317f0fa6098c",
            "id": "",
            "objective": "<p>(certificate extended key usage purpose) The evaluator shall send a server certificate that contains the Server Authentication purpose in the ExtendedKeyUsage extension \n                      and verify that a connection is established. \n                      The evaluator shall repeat this test using a different certificate that is otherwise valid and trusted but lacks the \n                      Server Authentication purpose in the ExtendedKeyUsage extension and observe the TSF silently drops the certificate \n                      message or terminates the session.\n                    </p> <p><b>Note:</b>This test is not performed if only DTLS 1.2 with PSK ciphersuites are supported; it is required if DTLS 1.2 is supported and ciphersuites other than PSK ciphersuites are supported, or if DTLS 1.3 is supported.\n                    </p> <p>\n                      Depending on the selections in FCS_DTLSC_EXT.1.5 and FCS_DTLSC_EXT.1.6, this test is performed in conjunction with testing of FIA_X509_EXT.1 or SFRs specific to the supported functions using DTLS.\n                      </p> <p>\n                        If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall\n                        continue sending the server certificate and certificate verify messages until the TSF times out. It is preferred\n                        that the TSF logs a fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in\n                        response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging\n                        a fatal error alert). \n                      </p> <p>\n                      Ideally, the two certificates should be similar in regards to structure, the types of identifiers used, and the chain of trust.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "83293597-7fe9-4f05-826e-c0691603591a": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "",
            "objective": "The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers\n                          for the test server for the tested name type. The evaluator shall ensure the test DTLS server sends a certificate\n                          with a matching name of the tested name type and observe that the TSF completes the connection.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "892bb716-cf0c-471a-b6cb-d40f708c60c0": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "",
            "objective": "The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers that do not match the name representing the test server. \n                          The evaluator shall ensure the test DTLS server sends a certificate with a name of the type tested, and observe the TSF silently drops the message or terminates the session.\n                          <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                            the evaluator shall continue sending the server finished until the TSF times out. It is preferred that the TSF\n                            logs a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, but it is \n                            acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "fc15481e-8402-4255-8618-4233f3bbdaa0": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "dtls-client-valid-wildcard",
            "objective": "[conditional] If the TSF supports wildcards for a DNS, URI, or SVR name type, the evaluator shall prepare the TSF as necessary \n                          to use the matching method for the name type, and establish a reference identifier. \n                          The evaluator shall establish a certificate for the test server that includes a wildcard name for the DNS portion of \n                          the appropriate name type which matches the reference identifier. \n                          The evaluator shall ensure the DTLS server sends the certificate containing the wildcard name of the type tested, \n                          and observe that the TSF completes the connection. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "dd4964cf-165a-4cd2-9c99-fdf5d06500e4": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "dtls-client-no-wildcard",
            "objective": "[conditional] If the TSF supports a DNS, URI, or SVR name type, but does not support wildcards (in general, \n                          or specifically for internationalized names of the specified type), the evaluator shall prepare the TSF as necessary \n                          to use the matching method and establish a reference identifier that matches a wildcard name for the DNS portion of the appropriate name type, \n                          in accordance with the appropriate RFC, in a certificate representing the server. \n                          The evaluator shall ensure the DTLS server sends the certificate containing the wildcard name of the type tested, \n                          and observe that the TSF silently drops the message or terminates the connection. \n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, \n                          the evaluator shall continue sending the server finished until the TSF times out. If the TSF's ability to \n                          support wildcard certificates is configurable, \n                          both &lt;xref to=\"dtls-client-valid-wildcard\"/&gt; and &lt;xref to=\"dtls-client-no-wildcard\"/&gt; are performed under the appropriate configuration. \n                          This test is required if the TSF supports internationalized names of the specified type \u2013 in this case, the reference identifier only includes \n                          an internationalized encoding in the leftmost label. \n                          The certificate used is intended to match the certificate as if wildcards were supported and if the wildcard extended to internationalized names.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a8151125-84c2-469c-a520-3f90a7179268": {
            "testListUUID": "dd962e71-595b-4d45-8361-295e3031e43b",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with two labels, and the certificate includes a name whose DNS portion includes \n                              a matching rightmost label and a wildcard in the leftmost label (e.g., *.com).",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5a19ea02-0b1a-45b1-96af-972260a4e837": {
            "testListUUID": "dd962e71-595b-4d45-8361-295e3031e43b",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with two labels, \n                              and the certificate includes a name whose DNS portion includes two rightmost labels matching the reference identifier, \n                              and a wildcard in a third (leftmost) label (e.g., *.example.com, which does not match \"example.com\").",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "88d35d52-5258-4f0a-8dc9-f3a7f1be5200": {
            "testListUUID": "dd962e71-595b-4d45-8361-295e3031e43b",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with four labels, \n                              and the certificate includes a name whose DNS portion includes two rightmost labels matching the reference identifier, \n                              and a wildcard in the third label, and a matching identifier in the fourth (leftmost) label (e.g., foo.*.example.com).",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "53bc2dac-fec9-4411-a430-e6183ea74c00": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "dtls-client-invalid-wildcard",
            "objective": "\n                          [conditional] If the TSF supports wildcards for a DNS, URI, or SVR name type, the evaluator shall prepare the TSF as necessary to use the matching method. \n                          The evaluator shall establish a reference identifier and a certificate for the server as indicated in each of the sub-tests described below. \n                          The evaluator shall in turn, ensure the DTLS server sends the certificate associated with the reference identifier \n                          and observe that the TSF silently drops the message or terminates the session. \n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "dd962e71-595b-4d45-8361-295e3031e43b"
            ]
          },
          "48eaa3b9-ad31-4f06-a4d7-259cdbda7ed3": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "",
            "objective": "[conditional] If the TSF supports wildcards and supports embedded DNS, URI, or SVR name types in the CN, \n                          then for each supported name type, the evaluator shall repeat \n                          &lt;xref to=\"dtls-client-valid-wildcard\"/&gt;, &lt;xref to=\"dtls-client-no-wildcard\"/&gt;, and &lt;xref to=\"dtls-client-invalid-wildcard\"/&gt;\n                          using certificates with the prescribed name embedded in the CN. \n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "31e88e4b-fe2e-4258-93fd-427a44dc8d2d": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "dtls-client-ip-wildcard",
            "objective": "[conditional] If the TSF supports IP addresses as an embedded name type in the CN, \n                          the evaluator shall establish an IP address as a reference identifier and establish a certificate with a valid DNS name in the subject field, \n                          including a CN whose value is the digital formatting of the octets of the reference identifier. \n                          The evaluator shall ensure the server sends the certificate and observe that the TSF successfully completes the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1f4d0b94-a1de-4261-8fb9-84a291ffc0c4": {
            "testListUUID": "2d305746-2e9b-469d-a849-dd3059c9f2f3",
            "id": "",
            "objective": "[conditional] If the TSF supports IP addresses and any embedded name type in the CN, \n                          the evaluator shall establish an IP address as a reference identifier and establish a certificate with a valid DNS name in the subject field, \n                          including a CN whose value is the digital formatting of the octets of the reference identifier (as in &lt;xref to=\"dtls-client-ip-wildcard\"/&gt;) \n                          except that one of the octets is replaced by the \u2018*\u2019 character. \n                          The evaluator shall ensure the server sends the certificate and observe that the TSF silently drops the message or terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "20977232-bf5d-4dc9-ac15-b5e73cf011c5": {
            "testListUUID": "2d0984dd-e585-4eb3-a756-317f0fa6098c",
            "id": "",
            "objective": "\n                      (certificate identifiers) For each supported method of matching presented identifiers, \n                      and for each name type for which the TSF parses the presented identifiers from the server certificate for the method, \n                      the evaluator shall establish a valid certificate trusted by the TSF to represent the test server using only the tested name type.\n                      The evaluator shall perform the following sub-tests: \n                      ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "2d305746-2e9b-469d-a849-dd3059c9f2f3"
            ]
          },
          "f1253385-22a4-4479-a5d0-760088945075": {
            "testListUUID": "83cb1ad5-85fc-47e1-ae30-830179360485",
            "id": "",
            "objective": "The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the SAN. \n                        The evaluator shall ensure that the test server sends the certificate with the matching SAN and non-matching CN-encoded name, and observe that the TSF completes the connection.\n                        <p><b>Note:</b> Configuration of the TSF may depend on the application using DTLS.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "364d5610-af60-4212-8ca3-0b13d1fcc31d": {
            "testListUUID": "83cb1ad5-85fc-47e1-ae30-830179360485",
            "id": "",
            "objective": "The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the CN-encoded name. \n                        The evaluator shall ensure that the test server sends the certificate with the matching CN-encoded name and matching SAN name, and observe that the TSF silently drops the \n                        message or terminates the session.\n                        <p>\n                          If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall\n                          continue sending the server certificate and certificate verify messages until the TSF times out.\n                          It is preferred that the TSF logs a fatal error alert message (e.g., bad certificate, unknown certificate) in response\n                          to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bdd72adf-b487-417f-ad24-c8a341aa7a10": {
            "testListUUID": "2d0984dd-e585-4eb3-a756-317f0fa6098c",
            "id": "",
            "objective": "(mixed identifiers)[conditional] If the TSF supports a name matching method where the TSF performs matching of both CN-encoded name types and SAN names of the same type, \n                      then for each such method, and for each such name type, the evaluator shall establish a valid certificate trusted by the TSF \n                      to represent the test server using one name for the CN-encoded name type and a different name for the SAN name type The evaluator shall perform the following tests: \n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "83cb1ad5-85fc-47e1-ae30-830179360485"
            ]
          },
          "ddd6bfce-0a80-4be7-a0b4-4366e33c2a4c": {
            "testListUUID": "2d0984dd-e585-4eb3-a756-317f0fa6098c",
            "id": "",
            "objective": "(empty certificate) The evaluator shall configure the test DTLS server to supply an empty certificate message and verify that the TSF silently drops the message or terminates the session.\n                      <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall continue sending the server certificate and certificate verify messages until the TSF times out.\n                        It is preferred that the TSF logs a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "41a4e586-8470-4639-87e7-3153b8a7ebc9": {
            "testListUUID": "2d0984dd-e585-4eb3-a756-317f0fa6098c",
            "id": "",
            "objective": "(invalid certificate) [conditional] If validity exceptions are supported, \n                      then for each exception for certificate validity supported, \n                      the evaluator shall configure the TSF to allow the exception and ensure the test DTLS server sends a certificate that is valid and trusted, \n                      except for the allowed exception. The evaluator shall observe that the TSF completes the session. \n                      <p>\n                      Without modifying the TSF configuration, the evaluator shall initiate a new session with the test DTLS server that includes an additional validation error, and observe that the TSF silently drops the message or terminates the session.\n                      </p> <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                        the evaluator shall continue sending the server certificate and certificate verify messages until the TSF times out.\n                        It is preferred that the TSF logs a fatal error alert message (e.g., decode error, bad certificate) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                      </p> <p>\n                      The intent of this test is to verify the scope of the exception processing. \n                      If verifying certificate status information is claimed as an exception, then this test will verify that a DTLS session succeeds when all supported methods for obtaining certificate status information is blocked from the TSF, \n                      to include removing any status information that might be cached by the TSF. \n                      If the exception is limited to specific certificates \n                      (e.g., only leaf certificates are exempt, or only certain leaf certificates are exempt) \n                      the additional validation error could be unavailable revocation information for a non-exempt certificate \n                      (e.g., revocation status information from an intermediate CA is blocked for the issuing CA of an exempt leaf certificate, \n                      or revocation information from the issuing CA is blocked for a non-exempt leaf certificate). \n                      If the only option for the exception is for all revocation information for all certificates, another validation error from &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  (e.g., certificate expiration, extended key usage, etc.) may be used. \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "58336938-e957-458a-ab54-a5de02ee4a96": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "\n                  [conditional] If the TSF supports certificate-based server authentication, \n                  then for each supported version, the evaluator shall initiate a DTLS session from the TOE to the compliant test DTLS server \n                  configured to negotiate the tested version, and to authenticate using a certificate trusted by the TSF as specified in the following:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "2d0984dd-e585-4eb3-a756-317f0fa6098c"
            ]
          },
          "a10080a6-6fed-471c-8713-808c65e8319e": {
            "testListUUID": "040ed662-8f83-4ed1-885a-13b16cbbed57",
            "id": "",
            "objective": "<p>\n                     For each version supported, the evaluator shall establish a connection using a compliant handshake negotiating the \n                     version. The evaluator shall then cause the test server to send application data with at least one byte in a record \n                     message modified from what a compliant test server would send, and verify that the client discards the record or \n                     terminates the DTLS session as described in the TSS. If multiple behaviors are supported, the evaluator shall repeat \n                     the test for each behavior.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSC_EXT.2": {
    "title": "DTLS Client Support for Mutual Authentication",
    "cc_id": "FCS_DTLSC_EXT.2",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "50e216fb-f110-4d58-b1c8-80342332dd6d"
      ],
      "selections": [
        "82a33574-53f9-4537-9f1a-44decb32b3c9"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support mutually-authenticated DTLS when acting as a DTLS client.\n    ",
      "dependencies": "FCS_DTLSC_EXT.1 DTLS Client Protocol\n    ",
      "managementFunction": "No specific management functions are identified.\n    ",
      "toggle": true
    },
    "auditEvents": {
      "f2302d22-4cd7-4d52-9245-1c0ea0207579": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "21b78e12-5f59-4eae-93d3-0e3e5dd2d8b1": {
        "elementXMLID": "fel-dtlsc-mut-auth",
        "selectableGroups": {
          "group-29": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "b1b0b296-b132-41d4-ba65-c088de16d556",
              "96c2b6fe-224a-4695-888b-63935507412b"
            ]
          },
          "group-30": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "14ce267e-3c5d-4f18-8c29-6872b680b2a5",
              "59f17a6d-5e25-4c4a-93e0-a15d1dbf5c45"
            ]
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall support mutual DTLS authentication using X.509v3 certificates during the handshake and \n              "
          },
          {
            "selections": "group-29"
          },
          {
            "text": ", in accordance with "
          },
          {
            "selections": "group-30"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "b1b0b296-b132-41d4-ba65-c088de16d556": {
            "type": "selectable",
            "uuid": "b1b0b296-b132-41d4-ba65-c088de16d556",
            "id": "fcs_dtlsc_ext.2.1_1",
            "description": "in support of post-handshake authentication requests",
            "exclusive": false,
            "nestedGroups": []
          },
          "96c2b6fe-224a-4695-888b-63935507412b": {
            "type": "selectable",
            "uuid": "96c2b6fe-224a-4695-888b-63935507412b",
            "id": "fcs_dtlsc_ext.2.1_2",
            "description": "at no other time",
            "exclusive": false,
            "nestedGroups": []
          },
          "14ce267e-3c5d-4f18-8c29-6872b680b2a5": {
            "type": "selectable",
            "uuid": "14ce267e-3c5d-4f18-8c29-6872b680b2a5",
            "id": "fcs_dtlsc_ext.2.1_3",
            "description": "RFC 5246, Section 7.4.4",
            "exclusive": false,
            "nestedGroups": []
          },
          "59f17a6d-5e25-4c4a-93e0-a15d1dbf5c45": {
            "type": "selectable",
            "uuid": "59f17a6d-5e25-4c4a-93e0-a15d1dbf5c45",
            "id": "fcs_dtlsc_ext.2.1_4",
            "description": "RFC 8446, Section 4.3.2",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"mutual authentication\" is selected in FCS_DTLSC_EXT.1.1.\n              </p> <p>\n                Clients that support DTLS 1.3 and post-handshake authentication should claim \"in support of post-handshake authentication\n                requests\" in the first selection. The \"at no other time\" selection is claimed for clients only supporting DTLS 1.2 or for\n                DTLS 1.3 clients that do not support post-handshake authentication.                  \n              </p> <p>\n                The certificate request message sent by the server specifies the signature algorithms and certification authorities supported\n                by the server. If the client does not possess a matching certificate, it sends an empty certificate message. The structure of\n                the certificate request message is changed in TLS 1.3 to use the signature_algorithm, signature_algorithms_cert (optional), \n                and certificate_authorities extensions, and RFC 8446 allows for (D)TLS 1.2 implementations to use the new message structure. The \"RFC 8446, section 4.3.2\" option is claimed in the second selection if DTLS 1.3 is supported or if DTLS 1.2 is supported and the RFC 8446 method is supported for DTLS 1.2 servers. The \"RFC 5246, section 7.4.4\" option is claimed if DTLS 1.2 is supported and the RFC 5246 method is supported for interoperability with DTLS 1.2 servers that do not adopt the RFC 8446 method. When mutual authentication is supported, at least one of these methods must be claimed, per the selection.      \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "94ccaf35-bf10-4d7f-8cc3-59ef715cd9f4": {
        "tss": "<p>\n            The evaluator shall ensure that the TSS description required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes the use of client-side certificates for DTLS mutual authentication. \n            The evaluator shall also ensure that the TSS describes any factors beyond configuration that are necessary in order for the client to engage in mutual authentication using X.509v3 certificates.\n          </p>",
        "introduction": "",
        "guidance": "<p>\n            The evaluator shall ensure that the operational guidance includes any instructions necessary to configure the TOE to perform mutual authentication. \n            The evaluator shall also verify that the operational guidance required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes instructions for configuring the client-side certificates for DTLS mutual authentication.\n          </p>",
        "testIntroduction": "For each supported DTLS version, the evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "32118964-3adc-4ffe-9de2-1cc3b0c2835f": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "c70543da-9409-4f81-ba93-8427881190a5",
              "095dddb8-5b72-4002-8dce-0d4dd49de7c7",
              "8b8c959a-9370-4269-a9bc-b663412282e8"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "c70543da-9409-4f81-ba93-8427881190a5": {
            "testListUUID": "32118964-3adc-4ffe-9de2-1cc3b0c2835f",
            "id": "",
            "objective": "The evaluator shall establish a DTLS connection from the TSF to a test DTLS server that negotiates the tested version \n              and which is not configured for mutual authentication (i.e., does not send a Server\u2019s Certificate Request (type 13) message). \n              The evaluator shall observe negotiation of a DTLS channel and confirm that the TOE did not send a Client\u2019s Certificate message (type 11) during handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "095dddb8-5b72-4002-8dce-0d4dd49de7c7": {
            "testListUUID": "32118964-3adc-4ffe-9de2-1cc3b0c2835f",
            "id": "",
            "objective": "The evaluator shall establish a connection to a test DTLS server with a shared trusted root that is configured for mutual authentication \n              (i.e., it sends a Server\u2019s Certificate Request (type 13) message). \n              The evaluator shall observe negotiation of a DTLS channel and confirm that the TOE responds with a non-empty Client\u2019s Certificate message (type 11) and Certificate Verify (type 15) message.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "8b8c959a-9370-4269-a9bc-b663412282e8": {
            "testListUUID": "32118964-3adc-4ffe-9de2-1cc3b0c2835f",
            "id": "",
            "objective": "[conditional] If the TSF supports post-handshake authentication, \n              the evaluator shall establish a pre-shared key between the TSF and a test DTLS 1.3 server. \n              The evaluator shall initiate a DTLS session using the pre-shared key and confirm the TSF and test DTLS 1.3 server successfully complete the DTLS handshake and both support post-handshake authentication. \n              After the session is successfully established, the evaluator shall initiate a certificate request message from the test DTLS 1.3 server. \n              The evaluator shall observe that the TSF receives that authentication request \n              and shall take necessary actions, in accordance with the operational guidance, to complete the authentication request. \n              The evaluator shall confirm that the test DTLS 1.3 server receives certificate and certificate verification messages from the TSF over the channel that authenticates the client.\n              <p><b>Note:</b> DTLS 1.3 certificate requests from the test server and client certificate and certificate verify messages are encrypted. \n                The evaluator shall confirm that the TSF sends the appropriate messages by examining the messages received at the test DTLS 1.3 server and by inspecting any relevant server logs. \n                The evaluator may also take advantage of the calling application to demonstrate that the TOE receives data configured at the test DTLS server. \n              </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSC_EXT.3": {
    "title": "DTLS Client Downgrade Protection",
    "cc_id": "FCS_DTLSC_EXT.3",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "50e216fb-f110-4d58-b1c8-80342332dd6d"
      ],
      "selections": [
        "2997d5b3-6a60-4a14-8708-4630adfe724b"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to implement version downgrade protection when acting as a DTLS client.\n          ",
      "dependencies": "FCS_DTLSC_EXT.1 DTLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "2bce192f-b9bb-43a7-a0a4-0403ad0332a6": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "aece0200-576a-44f5-ac2e-4ac10c5a290f": {
        "elementXMLID": "fcs_dtlsc_ext-3-1",
        "selectableGroups": {
          "group-31": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "b238314b-1938-463c-bf56-047f9dbf91ab",
              "20dc1cbb-f93c-49b4-a83a-d795605d836c"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall not establish a DTLS channel if the ServerHello message includes a\n              "
          },
          {
            "selections": "group-31"
          },
          {
            "text": "\n              in the server random field. "
          }
        ],
        "selectables": {
          "b238314b-1938-463c-bf56-047f9dbf91ab": {
            "type": "selectable",
            "uuid": "b238314b-1938-463c-bf56-047f9dbf91ab",
            "id": "fcs_dtlsc_ext.3.1_1",
            "description": "TLS 1.2 downgrade indicator",
            "exclusive": false,
            "nestedGroups": []
          },
          "20dc1cbb-f93c-49b4-a83a-d795605d836c": {
            "type": "selectable",
            "uuid": "20dc1cbb-f93c-49b4-a83a-d795605d836c",
            "id": "fcs_dtlsc_ext.3.1_2",
            "description": "TLS 1.1 or below downgrade indicator",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"supplemental downgrade protection\" is selected in FCS_DTLSC_EXT.1.1.\n              </p> <p>\n                DTLS uses the TLS downgrade indicators. \n              </p> <p>\n                The ST author claims the \u201cTLS 1.2 downgrade indicator\u201d when FCS_DTLSC_EXT.1 indicates support for both TLS 1.2 and TLS 1.3\n                and implements supplemental downgrade protection. This option is not claimed if DTLS 1.3 is not supported. The \u201cTLS 1.1 or\n                below downgrade indicator\u201d option may also be claimed if supported, but should only be claimed if the TSF is capable of \n                detecting the indicator. This package requires the TSF to always terminate DTLS 1.0 sessions based on the ServerHello \n                negotiated version field; it is acceptable to ignore any downgrade indicator. However, a TSF that is capable of detecting\n                the TLS 1.1 or below downgrade indicator may claim this option if it takes different actions depending on whether the TLS 1.1\n                or below downgrade indicator is set.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "4be6b1fc-b326-43e8-931f-eda73cf6a472": {
        "tss": "<p>\n                  The evaluator shall review the TSS and confirm that the description of the DTLS client protocol includes the downgrade protection mechanism in accordance with RFC 9147 \n                  and identifies any configurable features of the TSF needed to meet the requirements. \n                  If the TSS claims that the TLS 1.1 and below indicator is processed in the DTLS 1.2 implementation to prevent downgrade to DTLS 1.0, \n                  the evaluator shall confirm that the TSS indicates which configurations allow processing of the downgrade indicator \n                  and the specific response of the TSF when it receives the downgrade indicator as opposed to simply terminating the session for the unsupported version.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall review the operational guidance and confirm that any instructions to configure the TSF to meet the requirements are included.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests to confirm the response to downgrade indicators from a test DTLS 1.3 server:",
        "testClosing": "",
        "testLists": {
          "85be3194-6df9-4dbc-930b-e6843b14605a": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "258a7ae2-6caa-4a6a-b200-c4419c4c27b4",
              "be1839c8-bdc0-4fec-b7fa-28b1f1e0d907"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "258a7ae2-6caa-4a6a-b200-c4419c4c27b4": {
            "testListUUID": "85be3194-6df9-4dbc-930b-e6843b14605a",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.3, the evaluator shall initiate a DTLS 1.3 session with a test DTLS 1.3 server \n                    configured to send a compliant DTLS 1.2 ServerHello (not including any DTLS 1.3 extensions) \n                    but including the DTLS 1.2 downgrade indicator \u201844 4F 57 4E 47 52 44 01\u2019 in the last eight bytes of the server random field. \n                    The evaluator shall confirm that the TSF silently drops the ServerHello message or terminates the session.\n                    <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                      the evaluator shall continue sending the server message until the TSF times out. It is preferred that the TSF logs\n                      a fatal error alert message (e.g., illegal parameter), but it is acceptable that the TSF terminate the session \n                      without logging an error alert.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "be1839c8-bdc0-4fec-b7fa-28b1f1e0d907": {
            "testListUUID": "85be3194-6df9-4dbc-930b-e6843b14605a",
            "id": "",
            "objective": "[conditional] If the TSF supports the TLS 1.1 or below downgrade indicator to prevent downgrade to DTLS 1.0, and if the ST indicates a configuration where the indicator is processed, \n                    the evaluator shall follow operational guidance instructions to configure the TSF so it parses a DTLS 1.1 ServerHello message to detect and process the TLS downgrade indicator. \n                    The evaluator shall initiate a DTLS session between the TOE and a test DTLS server that is configured to send a DTLS 1.0 ServerHello message \n                    with the downgrade indicator \u201844 4F 57 4E 47 52 44 00\u2019 in the last eight bytes of the server random field, \n                    but which is otherwise compliant with RFC 4347. The evaluator shall observe that the TSF silently drops the ServerHello \n                    message or terminates the session as described in the ST.\n                    <p><b>Note:</b> The TSF is required not to accept a negotiation of DTLS 1.0. This test confirms the TSF is able to\n                      distinguish attempts to negotiate DTLS 1.0 when the TLS 1.1 and below downgrade indicator is provided, and is only \n                      performed when the indicator is processed resulting in a different behavior than other attempts to negotiate DTLS 1.0.\n                      If the TSF terminates the session according to the unique behavior indicated in the ST, the test is successful. If the\n                      TSF silently drops the message, the evaluator shall continue sending the server finished until the TSF demonstrates the \n                      unique response to the downgrade indicator as described in the ST. It is preferred that the TSF logs a fatal error \n                      alert message (illegal parameter or unsupported version), but it is acceptable that the TSF terminate the session\n                      without logging an error alert. \n                    </p> <p>\n                      Use of the TLS 1.1 and below indicator as a redundant mechanism \n                      where there is no configuration that actually processes the value does not require additional testing, \n                      since this would be addressed by &lt;xref to=\"dtls-client-obsolete-versions\"/&gt; for FCS_DTLSC_EXT.1.1. \n                      This test is only required if the TSF responds differently (e.g., a different error alert) when the downgrade indicator is present than when DTLS 1.0 or below is negotiated and the downgrade indicator is not present.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSC_EXT.4": {
    "title": "DTLS Client Support for Renegotiation",
    "cc_id": "FCS_DTLSC_EXT.4",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "6f4ccf3d-f268-4462-a602-02bfb4823d60"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session renegotiation when acting as a DTLS client.\n          ",
      "dependencies": "FCS_DTLSC_EXT.1 DTLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "cdf09c95-bd11-407c-8262-1d1115436cf5": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "03526126-214e-4f2b-87fb-0d77041e7886": {
        "elementXMLID": "fel-dtlsc-renego",
        "selectableGroups": {
          "group-32": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "34f50df8-4bfb-41ba-be0a-8e45abefbd83",
              "d652cf81-2d73-4bd3-b1db-f864915f9063",
              "832d9998-dd27-413d-a6e5-903b9bbbaf09"
            ]
          },
          "group-33": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "c009bfbe-f8ed-497d-92a9-3d6aca9e3cd6",
              "e1a773de-f998-4190-bdf8-3949c2848a83"
            ]
          },
          "group-34": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "e6e255fa-39e7-48c0-b49d-3ef396a7737e",
              "1e8da5a5-acc9-4a91-a50f-fcfd2db0595a"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support secure DTLS renegotiation through use of "
          },
          {
            "selections": "group-32"
          },
          {
            "text": "\n              and shall\n              "
          },
          {
            "selections": "group-33"
          },
          {
            "text": "\n              if an unexpected ServerHello is received or\n              "
          },
          {
            "selections": "group-34"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "34f50df8-4bfb-41ba-be0a-8e45abefbd83": {
            "type": "selectable",
            "uuid": "34f50df8-4bfb-41ba-be0a-8e45abefbd83",
            "id": "fcs_dtlsc_ext.4.1_1",
            "description": "the \u201crenegotiation_info\u201d TLS extension in accordance with RFC 5746",
            "exclusive": false,
            "nestedGroups": []
          },
          "d652cf81-2d73-4bd3-b1db-f864915f9063": {
            "type": "selectable",
            "uuid": "d652cf81-2d73-4bd3-b1db-f864915f9063",
            "id": "fcs_dtlsc_ext.4.1_2",
            "description": "the TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuite signaling value in accordance with RFC 5746",
            "exclusive": false,
            "nestedGroups": []
          },
          "832d9998-dd27-413d-a6e5-903b9bbbaf09": {
            "type": "selectable",
            "uuid": "832d9998-dd27-413d-a6e5-903b9bbbaf09",
            "id": "fcs_dtlsc_ext.4.1_3",
            "description": "rejection of all renegotiation attempts",
            "exclusive": false,
            "nestedGroups": []
          },
          "c009bfbe-f8ed-497d-92a9-3d6aca9e3cd6": {
            "type": "selectable",
            "uuid": "c009bfbe-f8ed-497d-92a9-3d6aca9e3cd6",
            "id": "fcs_dtlsc_ext.4.1_4",
            "description": "terminate the session",
            "exclusive": false,
            "nestedGroups": []
          },
          "e1a773de-f998-4190-bdf8-3949c2848a83": {
            "type": "selectable",
            "uuid": "e1a773de-f998-4190-bdf8-3949c2848a83",
            "id": "fcs_dtlsc_ext.4.1_5",
            "description": "discard the message",
            "exclusive": false,
            "nestedGroups": []
          },
          "e6e255fa-39e7-48c0-b49d-3ef396a7737e": {
            "type": "selectable",
            "uuid": "e6e255fa-39e7-48c0-b49d-3ef396a7737e",
            "id": "fcs_dtlsc_ext.4.1_6",
            "description": "hello request message is received",
            "exclusive": false,
            "nestedGroups": []
          },
          "1e8da5a5-acc9-4a91-a50f-fcfd2db0595a": {
            "type": "selectable",
            "uuid": "1e8da5a5-acc9-4a91-a50f-fcfd2db0595a",
            "id": "fcs_dtlsc_ext.4.1_7",
            "description": "in no other case",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"DTLS as a client\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n                A client supporting DTLS 1.3 must claim \u201crejection of all renegotiation attempts.\u201d This option may also be claimed as a\n                method for TLS 1.2 renegotiation protection.\n              </p> <p>\n                The TLS_EMPTY_RENEGOTIATION_INFO_SCSV is the preferred mechanism for DTLS 1.2 protection against insecure renegotiation when\n                the client does not renegotiate. The ST author will claim \"a HelloRequest message is received\" in the second selection to\n                indicate support for this mechanism.\n              </p> <p>\n                RFC 5746 allows the client to accept connections with servers that do not support the extension; this FP refines RFC 5746\n                and requires the client to terminate sessions with such servers. Thus, unexpected ServerHello messages include\n                <ul><li>\n                    an initial ServerHello negotiating DTLS 1.2 that does not contain a renegotiation_info extension\n                  </li> <li>\n                    an initial ServerHello negotiating DTLS 1.2 that has a renegotiation_info extension that is non-empty\n                  </li> <li>\n                    a subsequent ServerHello renegotiating DTLS 1.2 that does not contain a renegotiation_info extension\n                  </li> <li>\n                    a subsequent ServerHello negotiating DTLS 1.2 that has a renegotiation_info extension with an incorrect renegotiated_connection value\n                  </li>\n                 and\n                  <li>\n                    a ServerHello request message when renegotiation is not allowed (for DTLS 1.3 or when the option is claimed for TLS 1.2).\n                  </li></ul></p> <p>\n                DTLS 1.3 provides protection against insecure renegotiation by not allowing renegotiation. If DTLS 1.3 is claimed in\n                FCS_DTLSC_EXT.1.1, the client receives a ServerHello that attempts to negotiate DTLS 1.3, and the ServerHello also contains\n                a non-empty renegotiation_info extension; the client will terminate the connection or silently discard the message.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "99bd55c3-5bb6-45b2-99b3-073662590146": {
        "tss": "<p>\n                  The evaluator shall examine the TSS to ensure that DTLS renegotiation protections are described in accordance with the requirements. \n                  The evaluator shall ensure that any configurable features of the renegotiation protections are identified.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall examine the operational guidance to confirm that instructions for any configurable features of the renegotiation protection mechanisms are included.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests as indicated. If DTLS 1.2 is supported and one or more of the secure renegotiation methods defined in RFC 5746 is claimed, &lt;xref to=\"dtls-client-accepts-renegotiation\"/&gt; is required. If DTLS 1.2 is supported and the TSF (has a configuration that) rejects all DTLS 1.2 renegotiation attempts, or if DTLS 1.3 is supported, &lt;xref to=\"dtls-client-prevents-renegotiation\"/&gt; is required.",
        "testClosing": "",
        "testLists": {
          "6340097b-8400-4135-af59-a6328457cc7a": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "87c07d10-f907-402e-af12-f9f1d8c48615",
              "025b43c3-adcd-4d7c-af65-511bb7132173"
            ],
            "conclusion": ""
          },
          "c1629502-4e72-455f-a63f-c72291c9b207": {
            "parentTestUUID": "87c07d10-f907-402e-af12-f9f1d8c48615",
            "description": "",
            "testUUIDs": [
              "5a870982-fde2-4133-b9d0-7948c693c0c7",
              "01037e8c-c38b-4de2-a630-fd54d85e3a12"
            ],
            "conclusion": ""
          },
          "eada22ae-9d7a-4827-b314-54a9ebf2df65": {
            "parentTestUUID": "01037e8c-c38b-4de2-a630-fd54d85e3a12",
            "description": "",
            "testUUIDs": [
              "9d8189c3-149e-4ca2-91c5-9c0578073b92",
              "246837fe-80ed-4752-b340-910509ed7b0b",
              "93857ab5-3ecb-437d-8e32-109847751457"
            ],
            "conclusion": ""
          },
          "ed6caeb4-ff8b-46e0-be8b-05383cf3bc3c": {
            "parentTestUUID": "025b43c3-adcd-4d7c-af65-511bb7132173",
            "description": "",
            "testUUIDs": [
              "bddb79d3-d756-4729-b735-825be2aed3d7",
              "c3be590a-cd7f-4670-9e91-1701c66906f6"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "5a870982-fde2-4133-b9d0-7948c693c0c7": {
            "testListUUID": "c1629502-4e72-455f-a63f-c72291c9b207",
            "id": "dtls-client-offers-renegotiation",
            "objective": "The evaluator shall initiate a DTLS connection with a test server configured to negotiate a compliant DTLS 1.2 handshake. \n                        The evaluator shall inspect the messages received by the test DTLS 1.2 server. \n                        The evaluator shall observe that either the \u201crenegotiation_info\u201d field or the SCSV ciphersuite is included in the ClientHello message during the initial handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "9d8189c3-149e-4ca2-91c5-9c0578073b92": {
            "testListUUID": "eada22ae-9d7a-4827-b314-54a9ebf2df65",
            "id": "",
            "objective": "The evaluator shall configure the test DTLS 1.2 server to send a renegotiation_info extension whose value indicates a non-zero length. \n                            The evaluator shall confirm that the TSF silently drops the ServerHello message or terminates the connection. \n                            <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                              the evaluator shall continue sending the ServerHello message until the TSF times out. It is preferred that \n                              the TSF logs a fatal error alert message (e.g., illegal parameter) in response to this, but it is acceptable\n                              that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "246837fe-80ed-4752-b340-910509ed7b0b": {
            "testListUUID": "eada22ae-9d7a-4827-b314-54a9ebf2df65",
            "id": "",
            "objective": "The evaluator shall configure the test DTLS 1.2 server to send a compliant renegotiation_info extension and observe the TSF successfully completes the DTLS 1.2 connection.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "93857ab5-3ecb-437d-8e32-109847751457": {
            "testListUUID": "eada22ae-9d7a-4827-b314-54a9ebf2df65",
            "id": "",
            "objective": "The evaluator shall initiate a session renegotiation after completing a successful handshake with a test DTLS 1.2 server that completes a successful DTLS 1.2 handshake \n                            (as in &lt;xref to=\"dtls-client-offers-renegotiation\"/&gt;) and then sends a HelloRequest from the test DTLS server with a \n                            \u201crenegotiation_info\u201d extension that has an unexpected \u201cclient_verify_data\u201d or \u201cserver_verify_data\u201d \n                            value (modify a byte from a compliant response). The evaluator shall verify that the TSF silently drops the ServerHello message or \n                            terminates the connection.\n                            <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                              the evaluator shall continue sending the ServerHello message until the TSF times out. It is preferred that \n                              the TSF logs a fatal error alert message (e.g., illegal parameter, handshake error) in response to this, but \n                              it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "01037e8c-c38b-4de2-a630-fd54d85e3a12": {
            "testListUUID": "c1629502-4e72-455f-a63f-c72291c9b207",
            "id": "",
            "objective": "For each of the following sub-tests, the evaluator shall initiate a new TLS connection with a test DTLS 1.2 server configured to send a renegotiation_info extension as specified, \n                        but otherwise complete a compliant DTLS 1.2 session:\n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "eada22ae-9d7a-4827-b314-54a9ebf2df65"
            ]
          },
          "87c07d10-f907-402e-af12-f9f1d8c48615": {
            "testListUUID": "6340097b-8400-4135-af59-a6328457cc7a",
            "id": "dtls-client-accepts-renegotiation",
            "objective": "[conditional] If the TSF supports DTLS 1.2 and supports a configuration to accept renegotiation requests for DTLS 1.2, \n                    the evaluator shall follow any operational guidance to configure the TSF. The evaluator shall perform the following tests:  \n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "c1629502-4e72-455f-a63f-c72291c9b207"
            ]
          },
          "bddb79d3-d756-4729-b735-825be2aed3d7": {
            "testListUUID": "ed6caeb4-ff8b-46e0-be8b-05383cf3bc3c",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.2 and supports a configuration to reject DTLS 1.2 renegotiation, \n                        the evaluator shall follow the operational guidance as necessary to prevent renegotiation. \n                        The evaluator shall initiate a DTLS session between the so-configured TSF and a test DTLS 1.2 server that is configured to perform a compliant handshake, \n                        followed by a HelloRequest. The evaluator shall confirm that the TSF completes the initial handshake successfully but silently drops the HelloRequest message or terminates the TLS session after receiving the HelloRequest.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                          the evaluator shall continue sending the HelloRequest message until the TSF times out. It is preferred that\n                          the TSF logs a fatal error alert message (e.g., unexpected message) in response to this, but it is acceptable that\n                          the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c3be590a-cd7f-4670-9e91-1701c66906f6": {
            "testListUUID": "ed6caeb4-ff8b-46e0-be8b-05383cf3bc3c",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.3, the evaluator shall initiate a TLS session between the TSF and a test DTLS 1.3 server that completes a compliant DTLS 1.3 handshake, \n                        followed by a HelloRetryRequest message. The evaluator shall observe that the TSF completes the initial DTLS 1.3 handshake successfully, but silently drops the HelloRetryRequest message or \n                        terminates the session on receiving the HelloRetryRequest message.\n                        <p>\n                          If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                          the evaluator shall continue sending the server finished until the TSF times out. It is preferred\n                          that the TSF logs a fatal error alert message (e.g., unexpected message) in response to this, but\n                          it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "025b43c3-adcd-4d7c-af65-511bb7132173": {
            "testListUUID": "6340097b-8400-4135-af59-a6328457cc7a",
            "id": "dtls-client-prevents-renegotiation",
            "objective": "[conditional] if the TSF supports a configuration that prevents renegotiation, the evaluator shall perform the following tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "ed6caeb4-ff8b-46e0-be8b-05383cf3bc3c"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSC_EXT.5": {
    "title": "DTLS Client Support for Session Resumption",
    "cc_id": "FCS_DTLSC_EXT.5",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "50e216fb-f110-4d58-b1c8-80342332dd6d"
      ],
      "selections": [
        "e54066ab-3c50-4abd-8571-a99ecea937aa"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption when acting as a DTLS client.\n          ",
      "dependencies": "FCS_DTLSC_EXT.1 DTLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "1a7a8ae8-5b26-45e4-a120-a01c3e8ec510": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "08133e5d-1d6b-4ea4-b470-c26083296070": {
        "elementXMLID": "fcs_dtlsc_ext-5-1",
        "selectableGroups": {
          "group-35": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "51a78cfb-31f6-44dd-b4e0-0beeeb841f04",
              "ea534b55-36e4-4735-b034-b9720c05d804",
              "852a998e-c2b3-48a4-a134-545018c11c9c"
            ]
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall support session resumption as a DTLS client via the use of "
          },
          {
            "selections": "group-35"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "51a78cfb-31f6-44dd-b4e0-0beeeb841f04": {
            "type": "selectable",
            "uuid": "51a78cfb-31f6-44dd-b4e0-0beeeb841f04",
            "id": "fcs_dtlsc_ext.5.1_1",
            "description": "session ID in accordance with RFC 5246",
            "exclusive": false,
            "nestedGroups": []
          },
          "ea534b55-36e4-4735-b034-b9720c05d804": {
            "type": "selectable",
            "uuid": "ea534b55-36e4-4735-b034-b9720c05d804",
            "id": "fcs_dtlsc_ext.5.1_2",
            "description": "tickets in accordance with RFC 5077",
            "exclusive": false,
            "nestedGroups": []
          },
          "852a998e-c2b3-48a4-a134-545018c11c9c": {
            "type": "selectable",
            "uuid": "852a998e-c2b3-48a4-a134-545018c11c9c",
            "id": "dtlsc_v13_resumption",
            "description": "PSK and tickets in accordance with RFC 8446",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"session resumption\" is selected in FCS_DTLSC_EXT.1.1.\n              </p> <p>\n                The ST author indicates which session resumption mechanisms are supported. One or both of the first two options, \"session ID\n                in accordance with RFC 5246\" and \"tickets in accordance with RFC 5077\" are claimed if resumption of DTLS 1.2 sessions is\n                supported. If resumption of DTLS 1.3 sessions is supported, \"PSK and tickets in accordance with RFC 8446\" is selected, \n                and the selection-based SFR FCS_DTLSC_EXT.6 must also be claimed.\n              </p> <p>\n                While it is possible to perform session resumption using PSK ciphersuites in DTLS 1.2, this is uncommon. \n                Validation of key establishment and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is addressed in FCS_DTLSC_EXT.1. \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "cf1dcc41-69eb-414c-ba0a-485a1e44dd19": {
        "tss": "<p>\n                  The evaluator shall examine the TSS and confirm that the DTLS client protocol description includes a description of the supported resumption mechanisms.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "3c5a3d86-896b-4ed5-a36a-3447889d108e": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "b3fcd95c-8d6d-4550-86ba-2874e8135180",
              "e00a73e4-92fc-4918-bd50-f8c1fae0d3b5"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "b3fcd95c-8d6d-4550-86ba-2874e8135180": {
            "testListUUID": "3c5a3d86-896b-4ed5-a36a-3447889d108e",
            "id": "dtls-client-successful-resumption",
            "objective": "For each supported DTLS version and for each supported resumption mechanism that is supported for that version, \n                    the evaluator shall establish a new DTLS session between the TSF and a compliant test DTLS server that is configured to negotiate the indicated version \n                    and perform resumption using the indicated mechanism. \n                    The evaluator shall confirm that the TSF completes the initial DTLS handshake and shall cause the TSF to close the session normally. \n                    The evaluator shall then cause the TSF to resume the session with the test DTLS server using the indicated method and observe that the TSF successfully establishes the session.\n                    <p><b>Note:</b> For each method, successful establishment refers to proper use of the mechanism, to include compliant extensions and behavior, as indicated in the referenced RFC.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e00a73e4-92fc-4918-bd50-f8c1fae0d3b5": {
            "testListUUID": "3c5a3d86-896b-4ed5-a36a-3447889d108e",
            "id": "",
            "objective": "(TLS 1.3 session id echo) [conditional] If the TSF supports DTLS 1.3, the evaluator shall initiate a new DTLS 1.3 session with a test TLS server. \n                    The evaluator shall cause the test DTLS server to send a DTLS 1.3 ServerHello message \n                    (or a HelloRetryRequest request if the TSF does not include the key_share extension) that contains a different value in the legacy_session_id field from the expected 32-byte value, and observe that the TSF silently drops the ServerHello message or terminates the session.\n                    <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message,\n                      the evaluator shall continue sending the ServerHello message until the TSF times out. It is preferred that the \n                      TSF logs a fatal error alert message (e.g., illegal parameter) in response to this, but it is acceptable that the\n                      TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSC_EXT.6": {
    "title": "DTLS Client DTLS 1.3 Resumption Refinements",
    "cc_id": "FCS_DTLSC_EXT.6",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [],
      "selections": [
        "852a998e-c2b3-48a4-a134-545018c11c9c"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption behavior specific to DTLS 1.3 when acting as a DTLS client.\n          ",
      "dependencies": "FCS_DTLSC_EXT.1 DTLS Client Protocol<br/>\n            FCS_DTLSC_EXT.5 DTLS Client Support for Session Resumption\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "650691c7-6b20-446f-aa08-ca3219c41fb8": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "74279c31-6bee-4a95-a2de-7a1421dba862": {
        "elementXMLID": "fcs_dtlsc_ext-6-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall send a psk_key_exchange_modes extension with value psk_dhe_ke when DTLS 1.3 session resumption is offered. \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "cb8e857e-c630-45db-9f78-4813fa0516d7": {
        "elementXMLID": "fcs_dtlsc_ext-6-2",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall not send early data in DTLS 1.3 sessions. \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"PSK and tickets in accordance with RFC 8446\" is selected in FCS_DTLSC_EXT.5.1.\n              </p> <p>\n                This SFR is claimed when session resumption is supported for DTLS 1.3. RFC 8446 allows pre-shared keys to be used directly\n                and also allows early data to be protected using only the pre-shared key. This SFR refines the RFC to use PSK only with a\n                supplemental DHE or ECDHE key establishment to ensure perfect forward secrecy for all sessions.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "b4e213f4-9fe3-4747-8a7d-3238f7bec3be": {
        "tss": "<p>\n              The evaluator shall examine the TSS to verify that the TLS client protocol description indicates that a PSK cannot be used without DHE or ECDHE and prohibits sending early data. \n              The evaluator shall examine the TSS to verify it lists all applications that can be secured by TLS 1.3 using pre-shared keys and \n              describes how each TLS 1.3 client application ensures data for the application is not sent using early data.\n            </p>",
        "introduction": "",
        "guidance": "<p>\n              The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. \n              The evaluator shall ensure the operational guidance includes any instructions required to configure applications so the DTLS 1.3 client implementation does not send early data.\n            </p>",
        "testIntroduction": "[conditional] For each application that is able to be secured via DTLS 1.3 using PSK, the evaluator shall follow operational guidance to configure the application not to send early data. The evaluator shall cause the application to initiate a resumed DTLS 1.3 session between the TSF and a compliant test DTLS 1.3 server as in &lt;xref to=\"dtls-client-successful-resumption\"/&gt; in FCS_DTLSC_EXT.5. The evaluator shall observe that the TSF ClientHello for DTLS 1.3 includes the psk_mode extension with the value psk_dhe_ke and sends a key share value for a supported group. The evaluator shall confirm that early data is not received by the test TLS server. <p><b>Note:</b> If no applications supported by the TOE provide data to DTLS 1.3 that can be sent using PSK, this test is omitted.\n            </p>",
        "testClosing": "",
        "testLists": {},
        "tests": {},
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.1": {
    "title": "DTLS Server Protocol",
    "cc_id": "FCS_DTLSS_EXT.1",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "e9ee3ce6-6dff-47de-805d-73a48a63c2ea"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "The following actions should be auditable if FAU_GEN Security Audit Data Generation is included in the PP, PP-Module, functional package, or ST: <ul><li>Failure to establish a DTLS session </li> </ul> ",
      "componentLeveling": " requires the TSF to implement DTLS as a server in the specified manner.\n    ",
      "dependencies": "\n      FCS_CKM.1 Cryptographic Key Generation<br/>\n      FCS_CKM.2 Cryptographic Key Distribution<br/>\n      FCS_COP.1 Cryptographic Operation<br/>\n      FCS_RBG.1 Random Bit Generation (RBG)<br/>\n      FIA_X509_EXT.1 X.509 Certificate Validation<br/>\n      FIA_X509_EXT.2 X.509 Certificate Authentication\n    ",
      "managementFunction": "No specific management functions are identified.\n    ",
      "toggle": true
    },
    "auditEvents": {
      "8e865dff-1711-4f81-8adf-ce762c81ac70": {
        "description": "Failure to establish a DTLS session",
        "items": [
          {
            "info": "Reason for failure",
            "optional": false
          }
        ],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "eaebf1b6-75b6-49e3-ae81-f3f2d00a66ce": {
        "elementXMLID": "fel-dtlss-impl",
        "selectableGroups": {
          "group-36": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "ba1ba1c6-29ee-4342-8b7e-2a498144c0d9",
              "74eb7a59-6bc2-4b09-8367-be1ebbbe1cc0"
            ]
          },
          "group-37": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "8b518eb7-85e5-4b4f-b96c-e3c910fff6ca",
              "beecd10b-9be1-4374-89a7-5531a08a1158",
              "8c275a1d-9902-4d5f-a404-6afb0b997e8b",
              "2143f05c-af30-4c4c-8bec-c699c032bb1b"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall implement \n      "
          },
          {
            "selections": "group-36"
          },
          {
            "text": " as a server that supports additional functionality for session renegotiation protection and\n        "
          },
          {
            "selections": "group-37"
          },
          {
            "text": "\n        and shall reject connection attempts from clients supporting only DTLS 1.0.\n      "
          }
        ],
        "selectables": {
          "ba1ba1c6-29ee-4342-8b7e-2a498144c0d9": {
            "type": "selectable",
            "uuid": "ba1ba1c6-29ee-4342-8b7e-2a498144c0d9",
            "id": "fcs_dtlss_ext.1.1_1",
            "description": "DTLS 1.2 (RFC 6347)",
            "exclusive": false,
            "nestedGroups": []
          },
          "74eb7a59-6bc2-4b09-8367-be1ebbbe1cc0": {
            "type": "selectable",
            "uuid": "74eb7a59-6bc2-4b09-8367-be1ebbbe1cc0",
            "id": "fcs_dtlss_ext.1.1_2",
            "description": "DTLS 1.3 (RFC 9147)",
            "exclusive": false,
            "nestedGroups": []
          },
          "8b518eb7-85e5-4b4f-b96c-e3c910fff6ca": {
            "type": "selectable",
            "uuid": "8b518eb7-85e5-4b4f-b96c-e3c910fff6ca",
            "id": "dtlss_mutual_auth",
            "description": "mutual authentication",
            "exclusive": false,
            "nestedGroups": []
          },
          "beecd10b-9be1-4374-89a7-5531a08a1158": {
            "type": "selectable",
            "uuid": "beecd10b-9be1-4374-89a7-5531a08a1158",
            "id": "dtlss_downgrade_protection",
            "description": "supplemental downgrade protection",
            "exclusive": false,
            "nestedGroups": []
          },
          "8c275a1d-9902-4d5f-a404-6afb0b997e8b": {
            "type": "selectable",
            "uuid": "8c275a1d-9902-4d5f-a404-6afb0b997e8b",
            "id": "dtlss_resumption",
            "description": "session resumption",
            "exclusive": false,
            "nestedGroups": []
          },
          "2143f05c-af30-4c4c-8bec-c699c032bb1b": {
            "type": "selectable",
            "uuid": "2143f05c-af30-4c4c-8bec-c699c032bb1b",
            "id": "fcs_dtlss_ext.1.1_3",
            "description": "no optional functionality",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          This SFR is claimed if \"DTLS as a server\" is selected in FCS_TLS_EXT.1.1.\n        </p> <p>\n          The ST author will claim supported DTLS versions and optional functionality as appropriate for the claimed versions. \n        </p> <p>\n          Session renegotiation protection is required for both DTLS 1.2 and DTLS 1.3, and the ST must include the requirements from\n          FCS_DTLSS_EXT.4. Within FCS_DTLSS_EXT.4, options for implementation of secure session renegotiation in DTLS 1.2, or rejecting\n          renegotiation requests required in DTLS 1.3 and optionally supported in DTLS 1.2 are claimed.  \n        </p> <p>\n          If \"mutual authentication\" is selected, then the ST must additionally include the requirements from FCS_DTLSS_EXT.2. \n          If the TOE implements DTLS with mutual authentication, this selection must be made.\n        </p> <p>\n          Supplemental downgrade protection is claimed if both DTLS 1.2 and DTLS 1.3 are supported. If \"supplemental downgrade protection\" is selected, then the ST must additionally include the requirements from FCS_DTLSS_EXT.3. \n        \n        </p> <p>\n          If \"session resumption\" is selected, then the ST must additionally include the requirements from FCS_DTLSS_EXT.5.\n        </p> <p>\n          DTLS version numbers are denoted on the wire as the 1\u2019s complement of the corresponding textual DTLS versions as described in RFC 6347, Section 4.1. \n          DTLS version 1.2 is 0xfefd; DTLS version 1.3 is 0xfefc. \n        </p>"
      },
      "9774009f-2bd4-4894-80c7-31106233daa9": {
        "elementXMLID": "fcs_dtlss_ext-1-2",
        "selectableGroups": {
          "group-38": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlss_ext.1.2_1",
              "a4c395a5-a2ad-4512-8216-98e6f9c38d6e"
            ]
          },
          "fcs_dtlss_ext.1.2_1": {
            "description": [
              {
                "text": "TLS 1.2 ciphersuites:"
              },
              {
                "groups": [
                  "group-40"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-40": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "0e5c2818-843b-4166-9963-9637086942c2",
              "88059e47-c294-44d5-b3cd-006f1deec22a",
              "91485992-bd74-456e-acd6-4c5d1944b296",
              "2d473949-31da-4a26-a22d-0e0169f40601",
              "e2c767d2-9825-43dd-9008-716e3810e344",
              "07366d67-fa19-46b1-9a2b-0950b7df8996",
              "fcs_dtlss_ext.1.2_8"
            ]
          },
          "fcs_dtlss_ext.1.2_8": {
            "description": [
              {
                "text": "ciphersuites using pre-shared secrets:"
              },
              {
                "groups": [
                  "group-42"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-42": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "70ed56bb-d6da-461b-9f2f-abe7bae6f6c8",
              "50dadaac-3e7e-4c16-9d75-2bacfd4eb3e7",
              "5d06e401-4a95-48ef-908d-bdf3a8faabe6"
            ]
          },
          "group-43": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "7b5ec4b5-be3c-4d20-b88a-793be2769cde",
              "4ab82d9b-f1b0-43a1-8fff-a65714ba2202",
              "bc142ae7-3d03-4eea-bb09-a1e84b375e82"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following &lt;assignable&gt;list of supported TLS ciphersuites &lt;/assignable&gt; , offering the supported ciphersuites in a ClientHello message in preference order: &lt;assignable&gt;priority &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n        The TSF shall be able to support the following "
          },
          {
            "selections": "group-38"
          },
          {
            "text": "\n        using a preference order based on "
          },
          {
            "selections": "group-43"
          },
          {
            "text": ".\n      "
          }
        ],
        "selectables": {
          "0e5c2818-843b-4166-9963-9637086942c2": {
            "type": "selectable",
            "uuid": "0e5c2818-843b-4166-9963-9637086942c2",
            "id": "fcs_dtlss_ext.1.2_2",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "88059e47-c294-44d5-b3cd-006f1deec22a": {
            "type": "selectable",
            "uuid": "88059e47-c294-44d5-b3cd-006f1deec22a",
            "id": "fcs_dtlss_ext.1.2_3",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "91485992-bd74-456e-acd6-4c5d1944b296": {
            "type": "selectable",
            "uuid": "91485992-bd74-456e-acd6-4c5d1944b296",
            "id": "fcs_dtlss_ext.1.2_4",
            "description": "TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "2d473949-31da-4a26-a22d-0e0169f40601": {
            "type": "selectable",
            "uuid": "2d473949-31da-4a26-a22d-0e0169f40601",
            "id": "fcs_dtlss_ext.1.2_5",
            "description": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "e2c767d2-9825-43dd-9008-716e3810e344": {
            "type": "selectable",
            "uuid": "e2c767d2-9825-43dd-9008-716e3810e344",
            "id": "fcs_dtlss_ext.1.2_6",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "07366d67-fa19-46b1-9a2b-0950b7df8996": {
            "type": "selectable",
            "uuid": "07366d67-fa19-46b1-9a2b-0950b7df8996",
            "id": "fcs_dtlss_ext.1.2_7",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "70ed56bb-d6da-461b-9f2f-abe7bae6f6c8": {
            "type": "selectable",
            "uuid": "70ed56bb-d6da-461b-9f2f-abe7bae6f6c8",
            "id": "fcs_dtlss_ext.1.2_9",
            "description": "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442",
            "exclusive": false,
            "nestedGroups": []
          },
          "50dadaac-3e7e-4c16-9d75-2bacfd4eb3e7": {
            "type": "selectable",
            "uuid": "50dadaac-3e7e-4c16-9d75-2bacfd4eb3e7",
            "id": "fcs_dtlss_ext.1.2_10",
            "description": "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "5d06e401-4a95-48ef-908d-bdf3a8faabe6": {
            "type": "selectable",
            "uuid": "5d06e401-4a95-48ef-908d-bdf3a8faabe6",
            "id": "fcs_dtlss_ext.1.2_11",
            "description": "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "a4c395a5-a2ad-4512-8216-98e6f9c38d6e": {
            "type": "selectable",
            "uuid": "a4c395a5-a2ad-4512-8216-98e6f9c38d6e",
            "id": "fcs_dtlss_ext.1.2_12",
            "description": "TLS 1.3 ciphersuite TLS_AES_256_GCM_SHA384 as defined in RFC 8446, and shall not offer other TLS 1.3 ciphersuites",
            "exclusive": false,
            "nestedGroups": []
          },
          "7b5ec4b5-be3c-4d20-b88a-793be2769cde": {
            "type": "selectable",
            "uuid": "7b5ec4b5-be3c-4d20-b88a-793be2769cde",
            "id": "fcs_dtlss_ext.1.2_13",
            "description": "RFC 9151 priority",
            "exclusive": false,
            "nestedGroups": []
          },
          "4ab82d9b-f1b0-43a1-8fff-a65714ba2202": {
            "type": "selectable",
            "uuid": "4ab82d9b-f1b0-43a1-8fff-a65714ba2202",
            "id": "fcs_dtlss_ext.1.2_14",
            "description": "ClientHello ordering",
            "exclusive": false,
            "nestedGroups": []
          },
          "bc142ae7-3d03-4eea-bb09-a1e84b375e82": {
            "id": "fcs_dtlss_ext.1.2_16",
            "description": "additional priority",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<P>\n            DTLS supports TLS ciphersuites. The ST author selects the ciphersuites that are supported and must select at least one ciphersuite\n            suitable for each supported DTLS version \u2013 TLS 1.2 ciphersuites for DTLS 1.2 and TLS 1.3 ciphersuites for DTLS 1.3. It is necessary\n            to limit the ciphersuites that can be used administratively in an evaluated configuration on the server in the test environment. If\n            administrative steps need to be taken so that the ciphersuites negotiated by the implementation are limited to those in this\n            requirement, then the appropriate instructions need to be contained in the guidance.\n          </P> <p>\n            While indicated as mandatory in RFC 8446, the ciphersuite TLS_AES_128_GCM_SHA256 is disallowed by this SFR.\n          </p> <p>\n            The final selection indicates the TOE\u2019s preference for negotiating a ciphersuite. RFC 9151 indicates the required ciphersuites for\n            NSS systems and \"RFC 9151 priority\" is claimed if those ciphersuites are selected whenever offered by the client.\n          </p> <p>\n            The \"ClientHello ordering\" option is claimed if client priority is considered; if both are claimed, the ST author should indicate\n            which is primary and which is secondary, and whether the priority scheme is configurable. If other priority schemes or tertiary\n            priority is used, the ST author will claim the third option and describe the scheme in the ST.\n          </p>"
      },
      "a3b3bf56-bbaf-48f9-a92e-ac12b1721646": {
        "elementXMLID": "fcs_dtlss_ext-1-3",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n        The TSF shall not establish a connection with a client that does not indicate support for at least one of the supported cryptographic\n        parameter sets.\n      "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          DTLS uses TLS cryptographic parameters. In DTLS 1.2 handshakes, the cryptographic parameters are determined by the TLS 1.2\n          ciphersuite components passed in the ClientHello. In DTLS 1.3, the cryptographic parameters are determined by the ciphersuite\n          components and the supported group extension. When both DTLS 1.2 and DTLS 1.3 are supported, cryptographic parameters are\n          determined by the highest version supported by the client.\n        </p> <p>\n          Ciphersuites for TLS 1.2 are of the form TLS_(key establishment algorithm)_WITH_(encryption algorithm)_(message digest algorithm) and\n          are listed in the TLS parameters section of the internet assignments at iana.org.\n        </p> <p>\n          Ciphersuites for TLS 1.3 are of the form TLS_(AEAD)_(HASH), where (AEAD) is of the form (encryption algorithm)_(symmetric key\n          length)_(mode) for an authenticated encryption with associated data specification (RFC 5116).\n        </p>"
      },
      "634cc87b-fff9-4136-8f29-dabef7e10e3c": {
        "elementXMLID": "fcs_dtlss_ext-1-4",
        "selectableGroups": {
          "group-44": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "044911c7-08e9-4060-be89-e318fda3a6b5",
              "4d487310-92e4-42a2-bd32-a55add5070ef"
            ]
          },
          "group-45": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "b64fe3dc-f054-4b32-ae1d-df7748a3f880",
              "fa2deb44-7fdc-4c6f-a364-951d1e4fbd8a",
              "1b0644aa-91db-4639-bdf7-9cbebaad8529"
            ]
          },
          "group-46": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlss_ext.1.4_6",
              "fcs_dtlss_ext.1.4_12",
              "fcs_dtlss_ext.1.4_15",
              "5b756126-949f-43ca-a8e5-eee195351b56",
              "3b1a93d8-0d51-400d-9c78-4a139562c3a0",
              "fcs_dtlss_ext.1.4_25",
              "24d315d6-445f-42ed-af53-c0d0be9a1a07"
            ]
          },
          "fcs_dtlss_ext.1.4_6": {
            "description": [
              {
                "text": "signature_algorithms_cert extension (RFC 8446) indicating support for"
              },
              {
                "groups": [
                  "group-48"
                ]
              },
              {
                "text": ", and"
              },
              {
                "groups": [
                  "group-50"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-48": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "2e2a22d6-d0de-4c48-a8f8-efe7b85b401f",
              "63cae545-b837-4952-b0d7-d8fce714aef3"
            ]
          },
          "group-50": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "33dca15b-69df-400f-80b8-ae417e091bf5",
              "3bf25546-004c-4d69-9ff5-587bc36622fc",
              "cb6c1b10-a8ff-482b-a0fa-0b13a87d6a8f"
            ]
          },
          "fcs_dtlss_ext.1.4_12": {
            "description": [
              {
                "text": "supported_versions extension (RFC 8446) indicating support for DTLS 1.3 and"
              },
              {
                "groups": [
                  "group-52"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-52": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "d3e8a402-50bf-49c2-af33-78786568cda7",
              "978d2429-5caf-4508-a687-1c416e98b311"
            ]
          },
          "fcs_dtlss_ext.1.4_15": {
            "description": [
              {
                "text": "supported_groups extension indicating support for"
              },
              {
                "groups": [
                  "group-54"
                ]
              },
              {
                "text": "and"
              },
              {
                "groups": [
                  "group-56"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-54": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "47c465f3-d192-43d4-aaca-f78987b0c674",
              "b645bfb9-f517-43b0-b67c-d58b8967ef35",
              "8fc40145-6a77-4f70-b5b7-3f0befcdfd9f"
            ]
          },
          "group-56": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "59a42b75-41a7-4fdb-8918-be29d65dcc3e",
              "9f89338c-7793-4548-9b9a-6b761180473b",
              "2986fb01-4e2f-4e2c-a860-3b2e25cb7990",
              "1509c8ae-0bf9-4ac9-87ff-4473b2ad7156"
            ]
          },
          "fcs_dtlss_ext.1.4_25": {
            "description": [
              {
                "text": "extended_master_secret extension (RFC 7627) enforcing client support and"
              },
              {
                "groups": [
                  "group-58"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-58": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "4b7c8ac2-a32f-4c83-b54d-a5453b6ee168",
              "a320b11e-9722-4ecf-826e-e93ed692d3c7"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to process the following TLS ClientHello message extensions: &lt;ul&gt;&lt;li&gt;signature_algorithms extension (RFC 8446) indicating support for &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;ecdsa_secp384r1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pkcs1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;/selectables&gt; , and &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;rsa_pss_pss_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pss_rsae_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;no other signature algorithms &lt;/selectable&gt; &lt;/selectables&gt; &lt;/li&gt; &lt;/ul&gt; and the following other extensions: &lt;assignable&gt;other supported DTLS extensions &lt;/assignable&gt; &lt;/title&gt; ",
        "title": [
          {
            "description": "\n        The TSF shall be able to process the following DTLS ClientHello message extensions: \n         signature_algorithms extension (RFC 8446) indicating support for"
          },
          {
            "selections": "group-44"
          },
          {
            "description": ", and"
          },
          {
            "selections": "group-45"
          },
          {
            "description": "<ul><li></li></ul>\n          \n           and the following other extensions: "
          },
          {
            "selections": "group-46"
          },
          {
            "text": ".\n         \n      "
          }
        ],
        "selectables": {
          "044911c7-08e9-4060-be89-e318fda3a6b5": {
            "type": "selectable",
            "uuid": "044911c7-08e9-4060-be89-e318fda3a6b5",
            "id": "fcs_dtlss_ext.1.4_1",
            "description": "_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "4d487310-92e4-42a2-bd32-a55add5070ef": {
            "type": "selectable",
            "uuid": "4d487310-92e4-42a2-bd32-a55add5070ef",
            "id": "fcs_dtlss_ext.1.4_2",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "b64fe3dc-f054-4b32-ae1d-df7748a3f880": {
            "type": "selectable",
            "uuid": "b64fe3dc-f054-4b32-ae1d-df7748a3f880",
            "id": "fcs_dtlss_ext.1.4_3",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "fa2deb44-7fdc-4c6f-a364-951d1e4fbd8a": {
            "type": "selectable",
            "uuid": "fa2deb44-7fdc-4c6f-a364-951d1e4fbd8a",
            "id": "fcs_dtlss_ext.1.4_4",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "1b0644aa-91db-4639-bdf7-9cbebaad8529": {
            "type": "selectable",
            "uuid": "1b0644aa-91db-4639-bdf7-9cbebaad8529",
            "id": "fcs_dtlss_ext.1.4_5",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "2e2a22d6-d0de-4c48-a8f8-efe7b85b401f": {
            "type": "selectable",
            "uuid": "2e2a22d6-d0de-4c48-a8f8-efe7b85b401f",
            "id": "fcs_dtlss_ext.1.4_7",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "63cae545-b837-4952-b0d7-d8fce714aef3": {
            "type": "selectable",
            "uuid": "63cae545-b837-4952-b0d7-d8fce714aef3",
            "id": "fcs_dtlss_ext.1.4_8",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "33dca15b-69df-400f-80b8-ae417e091bf5": {
            "type": "selectable",
            "uuid": "33dca15b-69df-400f-80b8-ae417e091bf5",
            "id": "fcs_dtlss_ext.1.4_9",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "3bf25546-004c-4d69-9ff5-587bc36622fc": {
            "type": "selectable",
            "uuid": "3bf25546-004c-4d69-9ff5-587bc36622fc",
            "id": "fcs_dtlss_ext.1.4_10",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "cb6c1b10-a8ff-482b-a0fa-0b13a87d6a8f": {
            "type": "selectable",
            "uuid": "cb6c1b10-a8ff-482b-a0fa-0b13a87d6a8f",
            "id": "fcs_dtlss_ext.1.4_11",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "d3e8a402-50bf-49c2-af33-78786568cda7": {
            "type": "selectable",
            "uuid": "d3e8a402-50bf-49c2-af33-78786568cda7",
            "id": "fcs_dtlss_ext.1.4_13",
            "description": "DTLS 1.2",
            "exclusive": false,
            "nestedGroups": []
          },
          "978d2429-5caf-4508-a687-1c416e98b311": {
            "type": "selectable",
            "uuid": "978d2429-5caf-4508-a687-1c416e98b311",
            "id": "fcs_dtlss_ext.1.4_14",
            "description": "no other versions",
            "exclusive": false,
            "nestedGroups": []
          },
          "47c465f3-d192-43d4-aaca-f78987b0c674": {
            "type": "selectable",
            "uuid": "47c465f3-d192-43d4-aaca-f78987b0c674",
            "id": "fcs_dtlss_ext.1.4_16",
            "description": "secp384r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "b645bfb9-f517-43b0-b67c-d58b8967ef35": {
            "type": "selectable",
            "uuid": "b645bfb9-f517-43b0-b67c-d58b8967ef35",
            "id": "fcs_dtlss_ext.1.4_17",
            "description": "ffdhe3072 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "8fc40145-6a77-4f70-b5b7-3f0befcdfd9f": {
            "type": "selectable",
            "uuid": "8fc40145-6a77-4f70-b5b7-3f0befcdfd9f",
            "id": "fcs_dtlss_ext.1.4_18",
            "description": "ffdhe4096 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "59a42b75-41a7-4fdb-8918-be29d65dcc3e": {
            "type": "selectable",
            "uuid": "59a42b75-41a7-4fdb-8918-be29d65dcc3e",
            "id": "fcs_dtlss_ext.1.4_19",
            "description": "secp521r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "9f89338c-7793-4548-9b9a-6b761180473b": {
            "type": "selectable",
            "uuid": "9f89338c-7793-4548-9b9a-6b761180473b",
            "id": "fcs_dtlss_ext.1.4_20",
            "description": "ffdhe6144 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "2986fb01-4e2f-4e2c-a860-3b2e25cb7990": {
            "type": "selectable",
            "uuid": "2986fb01-4e2f-4e2c-a860-3b2e25cb7990",
            "id": "fcs_dtlss_ext.1.4_21",
            "description": "ffdhe8192 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "1509c8ae-0bf9-4ac9-87ff-4473b2ad7156": {
            "type": "selectable",
            "uuid": "1509c8ae-0bf9-4ac9-87ff-4473b2ad7156",
            "id": "fcs_dtlss_ext.1.4_22",
            "description": "no other supported groups",
            "exclusive": false,
            "nestedGroups": []
          },
          "5b756126-949f-43ca-a8e5-eee195351b56": {
            "type": "selectable",
            "uuid": "5b756126-949f-43ca-a8e5-eee195351b56",
            "id": "fcs_dtlss_ext.1.4_23",
            "description": "key_share extension (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "3b1a93d8-0d51-400d-9c78-4a139562c3a0": {
            "type": "selectable",
            "uuid": "3b1a93d8-0d51-400d-9c78-4a139562c3a0",
            "id": "fcs_dtlss_ext.1.4_24",
            "description": "post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446), tls_cert_with_extern_psk (RFC 8773), and psk_key_exchange_modes (RFC 8446) indicating psk_dhe_ke (DHE or ECDHE) mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "4b7c8ac2-a32f-4c83-b54d-a5453b6ee168": {
            "type": "selectable",
            "uuid": "4b7c8ac2-a32f-4c83-b54d-a5453b6ee168",
            "id": "fcs_dtlss_ext.1.4_26",
            "description": "allowing legacy clients",
            "exclusive": false,
            "nestedGroups": []
          },
          "a320b11e-9722-4ecf-826e-e93ed692d3c7": {
            "type": "selectable",
            "uuid": "a320b11e-9722-4ecf-826e-e93ed692d3c7",
            "id": "fcs_dtlss_ext.1.4_27",
            "description": "no other enforcement mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "24d315d6-445f-42ed-af53-c0d0be9a1a07": {
            "type": "selectable",
            "uuid": "24d315d6-445f-42ed-af53-c0d0be9a1a07",
            "id": "fcs_dtlss_ext.1.4_28",
            "description": "no other extensions",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n        DTLS uses TLS extensions. \n        </p> <p>\n          Support for the signature_algorithms extension is optional in RFC 5246 but is mandated for this functional package in accordance with RFC 9151. Support for the signature_algorithms extension is mandatory in RFC 8446 and remains so in this functional package. Whether the TOE's implementation conforms to RFC 5246, RFC 8446, or both is dependent on whether the TOE supports DTLS 1.2, DTLS 1.3, or both.\n        </p> <p>\n        If support for DTLS 1.3 is claimed in FCS_DTLSS_EXT.1.1, the selections for supported_versions, supported_groups, and key_share are claimed in accordance with RFC 8446 and the \n        tls_cert_with_extern_psk extension is claimed in accordance with RFC 8773. \n        If DTLS 1.3 is claimed, psk_key_exchange_modes indicating psk_dhe_ke mode is claimed in accordance with RFC 9151.\n        If DTLS 1.3 is not claimed, supported_versions and key_share are not claimed.\n        </p> <p>\n          If DTLS 1.2 is claimed, extended_master_secret extension must be claimed, with the ability to enforce client support, and optionally, the ability to support legacy clients. The extended_master_secret extension (RFC 7627) selection cannot be claimed when DTLS 1.3 is claimed.\n        </p> <p>\n          If DTLS 1.2 is supported and DHE or ECDHE ciphersuites are claimed in FCS_DTLSS_EXT.1.2, the entry for supported_groups is claimed. Support for additional extensions is acceptable. For signature_algorithms and signature_algorithms_certs (if supported), at least one of the signature schemes presented in the first sub-selection is claimed.\n        </p>"
      },
      "a0530b1c-dcf9-442e-b7b8-2a5e4dcc3eb5": {
        "elementXMLID": "fcs_dtlss_ext-1-5",
        "selectableGroups": {
          "group-59": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlss_ext.1.5_1",
              "fcs_dtlss_ext.1.5_4",
              "fcs_dtlss_ext.1.5_11"
            ]
          },
          "fcs_dtlss_ext.1.5_1": {
            "description": [
              {
                "text": "RSA with size"
              },
              {
                "groups": [
                  "group-61"
                ]
              },
              {
                "text": "bits and no other sizes"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-61": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "9728e481-a632-4660-8465-77da90e24f8e",
              "ac3d8556-fa44-413f-9fc9-5bbb059b7fb0"
            ]
          },
          "fcs_dtlss_ext.1.5_4": {
            "description": [
              {
                "text": "Diffie-Hellman groups"
              },
              {
                "groups": [
                  "group-63"
                ]
              },
              {
                "text": "and no other groups, consistent with the client's supported_groups extension and"
              },
              {
                "groups": [
                  "group-65"
                ]
              },
              {
                "text": "extension"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-63": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "6310a078-454b-43a9-bdf9-a09b29bb0aa7",
              "6b0a9372-80c6-4b08-b11d-31ac3bb4f653",
              "70c5510c-9a9c-498c-a29c-e6187449e515",
              "f8ddf480-72ba-4504-befa-7b3826c37002"
            ]
          },
          "group-65": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "51df93e6-d113-4c28-a634-29a17919bc11",
              "9ea91afc-fe61-4013-9c4e-84582c70ae04"
            ]
          },
          "fcs_dtlss_ext.1.5_11": {
            "description": [
              {
                "text": "ECDHE parameters using elliptic curves"
              },
              {
                "groups": [
                  "group-67"
                ]
              },
              {
                "text": "and no other curves, consistent with the client's supported_groups extension and"
              },
              {
                "groups": [
                  "group-69"
                ]
              },
              {
                "text": "extension and using non-compressed formatting for points"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-67": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "dbb2decb-acf7-4288-8319-a93150a8e9c5",
              "920f7e62-7ea8-4268-958c-ad29a6f474df"
            ]
          },
          "group-69": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "8268bda6-5a6e-4aad-8330-e00968130bdb",
              "707a982e-fa2f-41ce-bb15-f634aaf8810f"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall perform key establishment for DTLS using &lt;assignable&gt;key establishment parameters &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n        The TSF shall perform key establishment for DTLS using "
          },
          {
            "selections": "group-59"
          },
          {
            "text": ".\n      "
          }
        ],
        "selectables": {
          "9728e481-a632-4660-8465-77da90e24f8e": {
            "type": "selectable",
            "uuid": "9728e481-a632-4660-8465-77da90e24f8e",
            "id": "fcs_dtlss_ext.1.5_2",
            "description": "3072",
            "exclusive": false,
            "nestedGroups": []
          },
          "ac3d8556-fa44-413f-9fc9-5bbb059b7fb0": {
            "type": "selectable",
            "uuid": "ac3d8556-fa44-413f-9fc9-5bbb059b7fb0",
            "id": "fcs_dtlss_ext.1.5_3",
            "description": "4096",
            "exclusive": false,
            "nestedGroups": []
          },
          "6310a078-454b-43a9-bdf9-a09b29bb0aa7": {
            "type": "selectable",
            "uuid": "6310a078-454b-43a9-bdf9-a09b29bb0aa7",
            "id": "fcs_dtlss_ext.1.5_5",
            "description": "ffdhe3072",
            "exclusive": false,
            "nestedGroups": []
          },
          "6b0a9372-80c6-4b08-b11d-31ac3bb4f653": {
            "type": "selectable",
            "uuid": "6b0a9372-80c6-4b08-b11d-31ac3bb4f653",
            "id": "fcs_dtlss_ext.1.5_6",
            "description": "ffdhe4096",
            "exclusive": false,
            "nestedGroups": []
          },
          "70c5510c-9a9c-498c-a29c-e6187449e515": {
            "type": "selectable",
            "uuid": "70c5510c-9a9c-498c-a29c-e6187449e515",
            "id": "fcs_dtlss_ext.1.5_7",
            "description": "ffdhe6144",
            "exclusive": false,
            "nestedGroups": []
          },
          "f8ddf480-72ba-4504-befa-7b3826c37002": {
            "type": "selectable",
            "uuid": "f8ddf480-72ba-4504-befa-7b3826c37002",
            "id": "fcs_dtlss_ext.1.5_8",
            "description": "ffdhe8192",
            "exclusive": false,
            "nestedGroups": []
          },
          "51df93e6-d113-4c28-a634-29a17919bc11": {
            "type": "selectable",
            "uuid": "51df93e6-d113-4c28-a634-29a17919bc11",
            "id": "fcs_dtlss_ext.1.5_9",
            "description": "key_share extension",
            "exclusive": false,
            "nestedGroups": []
          },
          "9ea91afc-fe61-4013-9c4e-84582c70ae04": {
            "type": "selectable",
            "uuid": "9ea91afc-fe61-4013-9c4e-84582c70ae04",
            "id": "fcs_dtlss_ext.1.5_10",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          },
          "dbb2decb-acf7-4288-8319-a93150a8e9c5": {
            "type": "selectable",
            "uuid": "dbb2decb-acf7-4288-8319-a93150a8e9c5",
            "id": "fcs_dtlss_ext.1.5_12",
            "description": "secp384r1",
            "exclusive": false,
            "nestedGroups": []
          },
          "920f7e62-7ea8-4268-958c-ad29a6f474df": {
            "type": "selectable",
            "uuid": "920f7e62-7ea8-4268-958c-ad29a6f474df",
            "id": "fcs_dtlss_ext.1.5_13",
            "description": "secp521r1",
            "exclusive": false,
            "nestedGroups": []
          },
          "8268bda6-5a6e-4aad-8330-e00968130bdb": {
            "type": "selectable",
            "uuid": "8268bda6-5a6e-4aad-8330-e00968130bdb",
            "id": "fcs_dtlss_ext.1.5_14",
            "description": "key_share extension",
            "exclusive": false,
            "nestedGroups": []
          },
          "707a982e-fa2f-41ce-bb15-f634aaf8810f": {
            "type": "selectable",
            "uuid": "707a982e-fa2f-41ce-bb15-f634aaf8810f",
            "id": "fcs_dtlss_ext.1.5_15",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          DTLS uses key establishment mechanisms from the equivalent TLS version.  \n        </p> <p>\n          If DTLS 1.2 and RSA ciphersuites are supported, the ST author claims the \u201cRSA with key size \u2026\u201d option and the key\n          sizes supported. The requirements apply to the RSA key size for the server\u2019s certificate and in the key exchange messages received\n          by the server.\n        </p> <p>\n          If DTLS 1.2 and supported_groups extension are supported (for ECDHE or DHE groups), the ST author claims either the\n          \u201cDiffie_Hellman groups\u2026\u201d or \u201cECDHE parameters...\u201d option according to the supported ciphersuites and supported_groups extension\n          values. This is required when ECDHE ciphersuites are supported and recommended when DHE ciphersuites are supported.\n        </p> <p>\n          If DTLS 1.3 is supported, the ST author claims one or both of \u201cDiffie-Hellman groups\u2026\u201d or ECDHE parameters\u2026\u201d options and the \u201ckey\n          share\u201d options in the sub-selections. The requirements apply to the values of the supported_groups extension and the key\n          share extension contained in the ServerHello messages.\n        </p>"
      },
      "ddc8a627-cfff-44ab-9179-bfef6687d1f5": {
        "elementXMLID": "fcs_dtlss_ext-1-6",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n        The TSF shall not proceed with a connection handshake attempt if the DTLS client fails validation.\n      "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "\n        The process to validate the IP address of a DTLS client is specified in RFC 6347, Section 4.2.1 (DTLS 1.2) and in RFC 9147, Section 5.1 (DTLS 1.3). \n        The server validates the DTLS client during connection establishment (handshaking) and prior to sending a ServerHello message. \n        After receiving a ClientHello, a DTLS 1.2 server sends a HelloVerifyRequest along with a cookie, \n        whereas a DTLS 1.3 server sends a HelloRetryRequest message along with a cookie. \n        In both TLS 1.2 and TLS 1.3, the cookie is a signed message using a keyed hash function. \n        The DTLS client then sends another ClientHello with the cookie attached. \n        If the DTLS server successfully verifies the signed cookie, the client is not using a spoofed IP address.\n      "
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "253e42fa-0099-445e-b012-e74407459196": {
        "tss": "<p>\n            The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions, are specified in accordance with RFC 6347 (DTLS 1.2) and RFC 9147 (DTLS 1.3 and updates to DTLS 1.2) as appropriate. The evaluator shall check the description to see if beta DTLS 1.3 versions are supported.\n          </p> <p>\n            The evaluator shall verify that ciphersuites indicated in FCS_DTLSS_EXT.1.2 are included in the description, and that none of the following ciphersuites are supported: ciphersuites indicating NULL, RC2, RC4, DES, IDEA, TDES, or AES-128 in the encryption algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.\n          </p> <p>\n            The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_DTLSS_EXT.1.4.\n          </p> <p>\n            The evaluator shall confirm that the TLS description includes the number and types of certificates that can be installed to represent the TOE.\n          </p>",
        "introduction": "",
        "guidance": "<p>\n            The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that the TSF conforms to the requirements. If the ST indicates that beta versions of TLS 1.3 are supported for backward compatibility, the evaluator shall ensure that the operational guidance provides instructions for disabling these versions.\n          </p> <p>\n            The evaluator shall review the operational guidance to ensure instructions on installing certificates representing the TOE are provided.\n          </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "4d156b50-172e-4491-9232-18e588670de1",
              "3b00a75e-92d0-4e1e-850a-146ef9b479a8",
              "74447349-12c9-47d6-b9c5-e48704cdebe6",
              "7ae86821-2e7c-4f5a-a01c-c683bb64c292",
              "afd6ef94-7dbe-46d6-bbfe-a6baa2c0ae31",
              "ca296f84-dede-46ee-91cd-82d1fb59505b",
              "8635d827-0321-4d32-931a-016e76bd89b2"
            ],
            "conclusion": ""
          },
          "75825d3d-a8ff-4c9c-9bdf-42edc99b8531": {
            "parentTestUUID": "4d156b50-172e-4491-9232-18e588670de1",
            "description": "",
            "testUUIDs": [
              "0586f090-7e6d-4314-9fbe-fdf91ec74d4a",
              "ec31c144-09c8-47d6-8ebe-b1d17c9d4c48",
              "ae2a5f13-17c5-4a76-85f2-ba22527e3260"
            ],
            "conclusion": ""
          },
          "68529999-280c-4d47-a0de-e112d50360ca": {
            "parentTestUUID": "3b00a75e-92d0-4e1e-850a-146ef9b479a8",
            "description": "",
            "testUUIDs": [
              "54b544b8-5dae-4ced-83a6-70a21814c127",
              "4490544c-7706-4eaf-8a64-958aabb2898a"
            ],
            "conclusion": ""
          },
          "97923aaf-0b2e-4b77-9b55-52f68a6959c5": {
            "parentTestUUID": "74447349-12c9-47d6-b9c5-e48704cdebe6",
            "description": "",
            "testUUIDs": [
              "971ceb48-4f1e-4cf4-ad38-6ef729246828",
              "2dfa937c-d0f3-4b77-b41a-2a3f0c719f49",
              "d5f8fae0-6624-4a46-ab56-1081cd2cc94e",
              "3aa65dbd-1dd7-43b2-980c-9138ff4c2206",
              "a8f6a3e0-60eb-4370-bd59-214ca65113e8"
            ],
            "conclusion": ""
          },
          "8d84c4a7-2a22-4f1e-9159-84de81329fea": {
            "parentTestUUID": "7ae86821-2e7c-4f5a-a01c-c683bb64c292",
            "description": "",
            "testUUIDs": [
              "4e4eec93-ae58-4a2f-8850-b6c3591025c5",
              "773e3992-4865-4088-bc4a-0cb74253c7f3"
            ],
            "conclusion": ""
          },
          "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3": {
            "parentTestUUID": "4e4eec93-ae58-4a2f-8850-b6c3591025c5",
            "description": "",
            "testUUIDs": [
              "cb3d56df-ebf1-480f-9301-737ae01e15fe",
              "dfa3d4e5-5bba-4554-b149-756b8dc8fb5a",
              "bedd40e1-229a-4365-93fb-7a3467f2fc89",
              "79c77fc0-860a-47f2-871d-91bc6d2c84ee"
            ],
            "conclusion": ""
          },
          "61de52f1-f780-463f-b10d-9250a3c0e683": {
            "parentTestUUID": "bedd40e1-229a-4365-93fb-7a3467f2fc89",
            "description": "",
            "testUUIDs": [
              "891cbe69-74ba-4fff-b8ea-1986f7006ea8",
              "c0013e62-9d81-4dee-92c2-3d99509501d0",
              "8b3f9f0d-9792-467f-b658-878014464d48"
            ],
            "conclusion": ""
          },
          "876cc4a8-0188-4147-9059-bb9aa9a7f4de": {
            "parentTestUUID": "afd6ef94-7dbe-46d6-bbfe-a6baa2c0ae31",
            "description": "",
            "testUUIDs": [
              "3ca2974e-abaf-43ef-b254-cc6f3ddd3202",
              "1c2b0009-5eff-4ca4-8eb3-8526502272d8",
              "9d156382-7176-4f65-9cef-494360c93a19",
              "42401229-3a6a-46a4-a459-a6a8d6371140",
              "d312395d-3bbb-4fc1-bf75-84941941a258"
            ],
            "conclusion": ""
          },
          "2f6239b8-3fd0-4d26-a9d4-81f5931877b8": {
            "parentTestUUID": "3ca2974e-abaf-43ef-b254-cc6f3ddd3202",
            "description": "",
            "testUUIDs": [
              "839a67c9-177d-4713-8b20-eb55699925d4",
              "f346f723-168e-4a8a-8a6e-7502ec1f19d9"
            ],
            "conclusion": ""
          },
          "d192320b-4810-4ef8-adcf-2ba925cbb8eb": {
            "parentTestUUID": "9d156382-7176-4f65-9cef-494360c93a19",
            "description": "",
            "testUUIDs": [
              "be4ed2ee-8f25-4705-9ca6-2d6c982144db",
              "c62216f3-a4bc-483c-b84f-c151ffbbe646",
              "e373fffe-cf85-43c0-be49-2dbd95d98724",
              "11d258a7-9303-46d3-81c5-e6cff430075b",
              "f9a1eb3a-0dd7-4408-86ca-cdfc57d58530",
              "a7cf69e2-0f3b-477f-930d-97c685397b0a"
            ],
            "conclusion": ""
          },
          "a0cdfcec-9a9f-4f2c-9d16-20289f36e3c9": {
            "parentTestUUID": "42401229-3a6a-46a4-a459-a6a8d6371140",
            "description": "",
            "testUUIDs": [
              "3eb8ccc5-cf56-47e5-99ec-f3d68015f8f1",
              "3ac9718d-6548-4858-b5d4-6547f796cf92"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "0586f090-7e6d-4314-9fbe-fdf91ec74d4a": {
            "testListUUID": "75825d3d-a8ff-4c9c-9bdf-42edc99b8531",
            "id": "dtls-server-supported-configurations",
            "objective": "\n                  [conditional] If DTLS 1.2 is supported, for each supported TLS 1.2 ciphersuite, the evaluator shall send a compliant DTLS 1.2 ClientHello with the highest version or legacy version of 1.2 (value 'fe fd'), a single entry in the ciphersuites field consisting of the specific ciphersuite, and no supported_versions extension or key_share extension. The evaluator shall observe the TSF\u2019s ServerHello indicates DTLS 1.2 in the highest version or legacy version field, does not include a supported_versions or key_share extension, and indicates the specific ciphersuite in the ciphersuite field. If the ciphersuite requires certificate-based authentication, the evaluator shall observe that the TSF sends a valid certificate representing the TOE and successfully completes the DTLS handshake.\n                  <p><b>Note:</b> The ciphersuites TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487, if supported, do not require certificate-based authentication of the server.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "ec31c144-09c8-47d6-8ebe-b1d17c9d4c48": {
            "testListUUID": "75825d3d-a8ff-4c9c-9bdf-42edc99b8531",
            "id": "",
            "objective": "(DTLS 1.2 support for DTLS 1.3 clients) [conditional] If DTLS 1.2 is supported and the TSF is configurable to support only DTLS 1.2 (or if DTLS 1.3 is not supported), and if the TSF supports DHE or ECDHE ciphersuites, the evaluator shall follow any operational guidance instructions necessary to configure the TSF to only support DTLS 1.2. For each supported DTLS 1.2 ciphersuite with DHE or ECDHE indicated as the key establishment method, the evaluator shall send a ClientHello with the highest version or legacy version of 1.2 (value 'fe fd'), a list of ciphersuites consisting of one or more TLS 1.3 ciphersuites followed by the specific TLS 1.2 ciphersuite and no other TLS 1.2 ciphersuites in the ciphersuites field, and including a DTLS 1.3 supported group and key_share extension with consistent values. The evaluator shall observe that the TSF\u2019s ServerHello indicates DTLS 1.2 in the highest version or legacy version field, does not include a supported_versions or key_share extension, and indicates the specific TLS 1.2 ciphersuite in the ciphersuite field. The evaluator shall observe that the TSF completes the DTLS 1.2 handshake successfully.\n                      <p><b>Note:</b> Supported ciphersuites using RSA key establishment should not be included in this test. The supported_groups extension sent by the test DTLS client should be consistent with the TLS 1.2 ciphersuite (e.g., it should be an EC group if the ciphersuite is ECDHE).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "ae2a5f13-17c5-4a76-85f2-ba22527e3260": {
            "testListUUID": "75825d3d-a8ff-4c9c-9bdf-42edc99b8531",
            "id": "",
            "objective": "(DTLS 1.3 support) [conditional] If the TSF supports DTLS 1.3, then for each supported TLS 1.3 ciphersuite and supported_groups value, the evaluator shall send a compliant DTLS 1.3 ClientHello indicating a list of one or more TLS 1.2 ciphersuites followed by the specific TLS 1.3 ciphersuite and no other ciphersuites in the ciphersuites field, a supported_versions extension indicating DTLS 1.3 (value 'fe fc\u2019) only, a supported_groups extension indicating the selected group, and a key_share extension containing a value representing an element of the specific group. The evaluator shall observe the TSF\u2019s ServerHello contains the supported_versions extension indicating DTLS 1.3, the specific ciphersuite in the selected ciphersuite field, and a key_share extension containing an element of the specific supported group. The evaluator shall observe that the TSF completes the DTLS 1.3 handshake successfully.\n          <p><b>Note:</b> The connections in Test FCS_DTLSS_EXT.1:1.1 may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session.\n          </p> <p>\n            It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).\n          </p> <p>\n            It is not necessary to pair every supported ciphersuite with every supported group. It is sufficient to use a set of ciphersuite and supported group pairs such that each ciphersuite and each supported group are included in this set.\n          </p> <p>\n            DTLS 1.3 includes the supported_groups extension in the encrypted_extensions message. This message may be observed at the test client after it is decrypted to help verify the key_share is actually a member of the supported group requested.\n          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4d156b50-172e-4491-9232-18e588670de1": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": " (supported configurations) The evaluator shall perform the following tests:\n              ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "75825d3d-a8ff-4c9c-9bdf-42edc99b8531"
            ]
          },
          "54b544b8-5dae-4ced-83a6-70a21814c127": {
            "testListUUID": "68529999-280c-4d47-a0de-e112d50360ca",
            "id": "dtls-server-obsolete-versions",
            "objective": "For each supported DTLS version, the evaluator shall send a ClientHello to the TSF indicating the selected version as the highest version. The evaluator shall observe the TSF silently drops the ClientHello message or terminates the connection.\n            <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ServerHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., protocol version, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4490544c-7706-4eaf-8a64-958aabb2898a": {
            "testListUUID": "68529999-280c-4d47-a0de-e112d50360ca",
            "id": "dtls-server-beta-versions",
            "objective": "[conditional] If DTLS 1.3 is not supported, or if DTLS 1.3 is supported and the ST indicates that it processes the legacy version field, then the evaluator shall follow the operational guidance to configure the TSF to ensure any supported beta DTLS 1.3 versions are disabled, as necessary. The evaluator shall send the TSF a ClientHello message indicating the supported version (referred to as the legacy version in RFC 9147) with the value 'fe fc' and observe that the TSF responds with a ServerHello indicating the highest version of \u2018fe fd\u2019 supported.\n            <p><b>Note:</b> Test FCS_DTLSS_EXT.1:2.2 is intended to test the TSF response to non-standard versions, including beta versions of DTLS 1.3. If the TSF supports such beta versions, the evaluator shall follow the operational guidance instructions to disable them prior to conducting Test FCS_DTLSS_EXT.1:2.2.\n            </p> <p>\n              Some DTLS 1.3 implementations ignore the legacy version field and only check for the supported_versions extension to determine DTLS 1.3 support by a client. It is preferred that the legacy version field should still be set to a standard version ('fe fd') in the ServerHello, but it is acceptable that presence of the supported_versions indicating DTLS 1.3 (value 'fe fc') overrides the legacy_version indication to determine highest supported version. In this case, this test is not performed.\n            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3b00a75e-92d0-4e1e-850a-146ef9b479a8": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": "(obsolete versions) The evaluator shall perform the following tests:\n        ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "68529999-280c-4d47-a0de-e112d50360ca"
            ]
          },
          "971ceb48-4f1e-4cf4-ad38-6ef729246828": {
            "testListUUID": "97923aaf-0b2e-4b77-9b55-52f68a6959c5",
            "id": "",
            "objective": "(ciphersuite not supported) For each supported version, the evaluator shall follow the operational guidance, if available, to configure the TSF to disable a supported ciphersuite. The evaluator shall send a compliant ClientHello to the TSF indicating support for the specific version and a ciphersuites field containing this single disabled ciphersuite. The evaluator shall observe that the TOE silently ignores the message or rejects the connection.\n                  <p><b>Note:</b> If the TSF rejects the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                  </p> <p>\n                    If the TSF\u2019s ciphersuites are not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. Additional special cases of this test for special ciphersuites are performed separately.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2dfa937c-d0f3-4b77-b41a-2a3f0c719f49": {
            "testListUUID": "97923aaf-0b2e-4b77-9b55-52f68a6959c5",
            "id": "dtls-server-version-confusion",
            "objective": "(version confusion) For each supported version, the evaluator shall send a ClientHello that is compliant for the specific version that includes a list of ciphersuites consisting of a single ciphersuite not associated with that version. The evaluator shall observe that the TOE silently drops the message or rejects the connection.\n                  <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                  </p> <p>If DTLS 1.2 is supported, Test &lt;xref to=\"dtls-server-version-confusion\"/&gt; sends a TLS 1.3 ciphersuite to the TSF as a server negotiating DTLS 1.2, using a supported TLS 1.3 ciphersuite if the TSF supports DTLS 1.3. If DTLS 1.3 is supported, Test &lt;xref to=\"dtls-server-version-confusion\"/&gt; sends a TLS 1.2 ciphersuites with compatible supported_group, signature_algorithms, and key_ share extensions to the TSF as a server negotiating DTLS 1.3, using a supported TLS 1.2 ciphersuite if the TSF supports DTLS 1.2.\n               </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "d5f8fae0-6624-4a46-ab56-1081cd2cc94e": {
            "testListUUID": "97923aaf-0b2e-4b77-9b55-52f68a6959c5",
            "id": "",
            "objective": "(null ciphersuite) For each supported version, the evaluator shall send a ClientHello indicating support for the version and include a ciphersuite list consisting of only the null ciphersuite (TLS_NULL_WITH_NULL_NULL, with the value '00 00') and observe that the TOE silently drops the message or rejects the connection.\n                  <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3aa65dbd-1dd7-43b2-980c-9138ff4c2206": {
            "testListUUID": "97923aaf-0b2e-4b77-9b55-52f68a6959c5",
            "id": "",
            "objective": "<p>\n                    (anonymous connection request) The evaluator shall perform one or more of the following tests according to the supported DTLS versions:\n                  </p> <p>\n                    [conditional] If DTLS 1.2 is supported, the evaluator shall send the TSF a DTLS 1.2 handshake that is compliant, except that the ciphersuites field includes a ciphersuite list consisting only of ciphersuites using the anonymous server authentication method and observe that the TOE silently drops the message or rejects the connection.\n                  </p> <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                  </p> <p>\n                  See IANA TLS parameters for available ciphersuites to be included in the ClientHello. The test ciphersuites list should include ciphersuites using supported cryptographic algorithms in as many of the other components as possible. For example, if the TSF supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the evaluator should include TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.\n                </p> <p>\n                    [conditional] If DTLS 1.3 is supported, the evaluator shall configure the TSF (if necessary) to not support anonymous server requests, and send the TSF a ClientHello containing the server_cert_type extension indicating only \u2018raw public key\u2019 type. The evaluator shall observe that the TSF either ignores the extension (the extension is not supported), proceeding with a normal DTLS handshake, to include sending a valid certificate and certificate verify message, it silently drops the message, or it terminates the session (the extension is supported, but the anonymous server functionality is not supported).\n                  </p> <p><b>Note:</b> If the ST indicates the extension is not supported and the TSF ignores the extension and completes the expected handshake, the test is successful. If the ST indicates the server_cert_type extension is supported and the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., unsupported_certificate) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a8f6a3e0-60eb-4370-bd59-214ca65113e8": {
            "testListUUID": "97923aaf-0b2e-4b77-9b55-52f68a6959c5",
            "id": "dtls-server-deprecated-encryption",
            "objective": "<p>\n                    (disallowed encryption algorithm) The evaluator shall perform one or more of the following, depending on the supported versions:\n                  </p> <p>\n                    [conditional] If DTLS 1.2 is supported, the evaluator shall send the TSF a DTLS 1.2 ClientHello that is compliant with RFC 9151, except that the ciphersuites field is a list consisting only of ciphersuites indicating a disallowed encryption algorithm, including at least one each of NULL, RC2, RC4, DES, IDEA, TDES, and AES-128. The evaluator shall observe that the TOE silently drops the message or rejects the connection.\n                  </p> <p><b>Note:</b> See IANA TLS parameters for available TLS 1.2 ciphersuites to be included. The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. For example, if the TSF supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test could include TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5, TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.\n                  </p> <p>\n                      If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                    </p> <p>\n                    [conditional] If DTLS 1.3 is supported, the evaluator shall send the TSF a DTLS 1.3 ClientHello that is compliant with RFC 9151, except that the ciphersuites field contains the single ciphersuite TLS_AES_128_GCM_SHA256. The evaluator shall observe that the TOE silently drops the message or rejects the connection. \n                  </p> <p><b>Note:</b> If the TSF rejects the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n              </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "74447349-12c9-47d6-b9c5-e48704cdebe6": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": "(ciphersuites) The evaluator shall perform the following tests on handling unexpected ciphersuites using a test DTLS client sending handshake messages compliant with the negotiated version except as indicated in the test:\n              ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "97923aaf-0b2e-4b77-9b55-52f68a6959c5"
            ]
          },
          "cb3d56df-ebf1-480f-9301-737ae01e15fe": {
            "testListUUID": "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3",
            "id": "dtls-server-correct-signature",
            "objective": "[conditional] If DTLS 1.2 is supported, then for each supported value of the signature_algorithms extension, the evaluator shall provision a certificate with a key pair compatible with the specific signature_algorithm value and \n                          send the TSF a DTLS 1.2 ClientHello that indicates all supported ciphersuites and has a signature_algorithms extension consisting of a single value matching the specific signature algorithm.\n                          <p>\n                            If the TSF supports the signature_algorithms_cert extension, the ClientHello also contains the value consistent with the provisioned certificate.\n                          </p> <p>\n                            The evaluator shall observe that the TSF negotiates DTLS 1.2 with\n                            a DTLS 1.2 ciphersuite that is compatible with the signature algorithm, and that it sends a certificate message containing the provisioned certificate with a key pair that is consistent \n                            with the specific signature_algorithm value (and signed using the signature_algorithms_cert extension value, if supported). \n                          </p> <p><b>Note:</b> For DTLS 1.2, the ciphersuite describes the signature algorithm as RSA or ECDSA \n                            and is compatible with the certificate used if the signature algorithm component of the ciphersuite is of the same type as the signature value of the signature_algorithms extension. \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "dfa3d4e5-5bba-4554-b149-756b8dc8fb5a": {
            "testListUUID": "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3",
            "id": "dtls-server-correct-1-3-signature",
            "objective": "[conditional] If the TSF supports DTLS 1.3, then for each supported value of the signature_algorithm, \n                          the evaluator shall provision a certificate with a key pair that is compatible with the specific signature_algorithm value, \n                          send a DTLS 1.3 ClientHello that indicates a supported ciphersuite and has a signature_algorithms extension consisting of a single value matching the specific signature algorithm. \n                          <p>\n                            If the TSF supports the signature_algorithms_cert extension, the ClientHello also contains a signature_algorithms_cert extension with a value consistent with the provisioned certificate.\n                          </p> <p>\n                            The evaluator shall observe that the TSF sends a certificate message containing the provisioned certificate consistent with the \n                            specific signature_algorithm value (and signed using the signature_algorithms_cert extension value) and a certificate verify message using the signature_algorithms extension value.\n                          </p> <p><b>Note:</b> For DTLS 1.3, the certificate message and certificate verify is encrypted. The evaluator shall confirm the values of these messages as received at the test DTLS client, using logs, or using a test DTLS client designed to expose the certificates after they are decrypted. \n                          </p> <p>\n                            It is not necessary to manually verify the signature used in the key exchange message (DTLS 1.2) or certificate verify message (DTLS 1.3). \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "891cbe69-74ba-4fff-b8ea-1986f7006ea8": {
            "testListUUID": "61de52f1-f780-463f-b10d-9250a3c0e683",
            "id": "dtls-server-mismatch-signature",
            "objective": "[conditional] If the TSF supports DTLS 1.2, the evaluator shall repeat &lt;xref to=\"dtls-server-correct-signature\"/&gt; with both the provisioned certificate indicated for \n                              &lt;xref to=\"dtls-server-correct-signature\"/&gt; and a provisioned certificate using a public key that is not consistent with the \n                              signature_algorithm value, but signed by a CA using the signature algorithm specified in the ClientHello. \n                              The evaluator shall observe that the TSF\u2019s certificate message does not include the certificate that does not match \n                              the signature_algorithm value in the ClientHello. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c0013e62-9d81-4dee-92c2-3d99509501d0": {
            "testListUUID": "61de52f1-f780-463f-b10d-9250a3c0e683",
            "id": "dtls-server-mismatch-1-3-signature",
            "objective": "[conditional] If TSF supports DTLS 1.3, \n                              the evaluator shall similarly repeat &lt;xref to=\"dtls-server-correct-1-3-signature\"/&gt; \n                              with both the provisioned certificate indicated for &lt;xref to=\"dtls-server-correct-1-3-signature\"/&gt; and a provisioned certificate \n                              with public keys that are not consistent with the signature_algorithm value but which are signed by a CA \n                              using the signature_algorithm value specified in the ClientHello, \n                              and observe that the certificate message sent by the TSF does not include the certificate that \n                              does not match the value of the signature_algorithm entry in the ClientHello. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "8b3f9f0d-9792-467f-b658-878014464d48": {
            "testListUUID": "61de52f1-f780-463f-b10d-9250a3c0e683",
            "id": "",
            "objective": "[conditional] If the ST also indicates support for the signature_algorithms_cert extension, \n                              the evaluator shall repeat &lt;xref to=\"dtls-server-mismatch-signature\"/&gt; (if DTLS 1.2 is supported) and &lt;xref to=\"dtls-server-mismatch-1-3-signature\"/&gt; \n                              (if DTLS 1.3 is supported) using additional provisioned certificates \n                              representing the TOE that use public keys consistent with the signature_algorithm value, \n                              but which are signed by CAs using signature algorithms that do not match the value of the signature_algorithms_cert in the ClientHello \n                              and observe that the TSF\u2019s certificate message does not include the certificate that does not match \n                              the signature_algorithms_cert values in the ClientHello.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bedd40e1-229a-4365-93fb-7a3467f2fc89": {
            "testListUUID": "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3",
            "id": "",
            "objective": "\n                          [conditional] If the ST indicates that the TSF supports provisioning of multiple certificates, \n                          the evaluator shall conduct the following sub-tests:\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "61de52f1-f780-463f-b10d-9250a3c0e683"
            ]
          },
          "79c77fc0-860a-47f2-871d-91bc6d2c84ee": {
            "testListUUID": "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3",
            "id": "",
            "objective": "[conditional] If DTLS 1.2 is supported, the evaluator shall provision a certificate as in &lt;xref to=\"dtls-server-correct-signature\"/&gt;, \n                          but shall send a ClientHello that only offers ciphersuites whose signature component does not match the value of the signature_algorithms extension. The evaluator shall observe that the TSF silently drops the message or terminates the handshake.\n                          <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, illegal parameter) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4e4eec93-ae58-4a2f-8850-b6c3591025c5": {
            "testListUUID": "8d84c4a7-2a22-4f1e-9159-84de81329fea",
            "id": "",
            "objective": "\n                      (signature algorithms) [conditional] If the TSF supports certificate-based authentication, \n                      then for each supported signature algorithm indicated in the ST, the evaluator shall perform the following sub-tests with certificates that represent the TOE. \n                      For each sub-test, the evaluator shall establish a certificate\n                      representing the TOE and using a public-private key pair suitable for the specific signature algorithm value, and signed by a certification authority\n                      that uses the same signature algorithm.\n                      <p>\n                        If the TSF also supports the signature_algorithms_cert extension, then for each value of the signature_algorithms_cert extension, \n                        the evaluator shall repeat the sub-tests \n                        \n                        using a certificate representing the TOE and using a key pair consistent with the signature algorithm, \n                        but signed by a certification authority using the signature algorithm specified in the signature_algorithms_cert extension. \n                      </p> <p><b>Note:</b> If DTLS 1.2 is supported, the TSF supports certificate-based server authentication if the DTLS 1.2 supported ciphersuites include ciphersuites other than \n                        TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, \n                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487. \n                        If these are the only supported ciphersuites, this test is omitted. If DTLS 1.3 is supported, certificate-based server authentication is required, and the DTLS 1.3 ClientHello for the test should not include the PSK extension.\n                      </p> <p>\n                        The evaluator shall follow operational guidance instructions to provision the TSF with one or more of these certificates as indicated in the following sub-tests:\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "c8ac3329-4519-4e6e-b9ab-4f0fddf0f4d3"
            ]
          },
          "773e3992-4865-4088-bc4a-0cb74253c7f3": {
            "testListUUID": "8d84c4a7-2a22-4f1e-9159-84de81329fea",
            "id": "",
            "objective": "(extended_master_secret) [conditional] If DTLS 1.2 is supported, the evaluator shall configure the TSF as necessary to enforce client support for extended master secret. The evaluator shall initiate a DTLS 1.2 session with the TSF from a test DTLS client for which the ClientHello does not include the extended_master_secret extension and observe that the TSF terminates the session.\n                      <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake error) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7ae86821-2e7c-4f5a-a01c-c683bb64c292": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": "(extensions)\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "8d84c4a7-2a22-4f1e-9159-84de81329fea"
            ]
          },
          "839a67c9-177d-4713-8b20-eb55699925d4": {
            "testListUUID": "2f6239b8-3fd0-4d26-a9d4-81f5931877b8",
            "id": "",
            "objective": "For each supported RSA key size, the evaluator shall provision the TSF with a valid certificate that has an RSA public key of that size. \n                          The evaluator shall initiate a valid DTLS 1.2 handshake from a compliant test DTLS 1.2 client and observe that the server certificate message matches the provisioned certificate.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f346f723-168e-4a8a-8a6e-7502ec1f19d9": {
            "testListUUID": "2f6239b8-3fd0-4d26-a9d4-81f5931877b8",
            "id": "",
            "objective": "For each supported RSA key size, the evaluator shall send the TSF a compliant DTLS 1.2 ClientHello, \n                          but in place of the client\u2019s key exchange message, the evaluator shall send the TSF a (non-compliant) key exchange message that is properly formatted but uses an invalid EncryptedPreMasterSecret \n                          field in the DTLS handshake (e.g., modify a byte of a properly computed value). \n                          The evaluator shall attempt to complete the handshake using compliant client change cipher spec and finished messages and verify that the TSF terminates the handshake in a manner that is indistinguishable \n                          from a finished message error and does not send application data.\n                          <p><b>Note:</b> Mitigations for oracle attacks described in RFC 5246 Appendix D require the TSF to exhibit the same behavior for key establishment failures as it does for finished message failures.\n                            While DTLS generally allows invalid messages to be silently dropped, this behavior may produce an oracle. Recommended approaches include generating a random key and continuing the handshake until after\n                            the finished message is received. If the TSF terminates the session and sends an error alert message, it is preferred that the TSF send a fatal decrypt failure error alert at the end of the handshake in both this case and for a finished message error,  \n                            but it is acceptable that the TSF terminate the session with another error alert, or without sending an error alert in either case. \n                            If the failure error alert is not for a decryption failure, the evaluator shall note that the TSF\u2019s response agrees with the response observed \n                            in the DTLS 1.2 iteration of &lt;xref to=\"dtls-server-rejects-bad-client-finished\"/&gt;. \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3ca2974e-abaf-43ef-b254-cc6f3ddd3202": {
            "testListUUID": "876cc4a8-0188-4147-9059-bb9aa9a7f4de",
            "id": "",
            "objective": "(DTLS 1.2 RSA key establishment) [conditional] If DTLS 1.2 is supported and if any of the supported TLS 1.2 ciphersuites in the ST includes RSA for the key establishment method, the evaluator shall perform the following sub-tests:\n                      ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "2f6239b8-3fd0-4d26-a9d4-81f5931877b8"
            ]
          },
          "1c2b0009-5eff-4ca4-8eb3-8526502272d8": {
            "testListUUID": "876cc4a8-0188-4147-9059-bb9aa9a7f4de",
            "id": "dtls-server-rejects-bad-client-finished",
            "objective": "For each supported version, the evaluator shall initiate a compliant handshake up through the (implied for DTLS 1.3) change cipher spec message. \n                      The evaluator shall then send a (non-compliant) client finished handshake message with an invalid \u2018verify data\u2019 value and \n                      verify that the server silently drops the message or terminates the session and does not send any application data.\n                      <p><b>Note:</b> DTLS 1.2 handshakes include explicit change cipher spec messages, \n                        but DTLS 1.3 omits the change cipher spec message. If DTLS 1.3 is supported, the modified finished message is sent as the final message from the client \n                        after receiving the server\u2019s second flight of handshake messages [encrypted extensions, (new ticket), (certificate, certificate verify), (certificate request)].\n                      </p> <p><b>Note:</b>\n                        If the TSF rejects the connection, and no application data is sent, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the client finished message until the TSF times out, noting that no application data is sent. It is preferred that the TSF logs a fatal decryption failure error alert, but it is acceptable that the TSF terminate the session using another error alert or without logging an error alert.\n                      </p> <p>\n                        The finished message is encrypted. The invalid \u2018verify data\u2019 can be constructed by modifying a byte of a compliant finished message payload.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "be4ed2ee-8f25-4705-9ca6-2d6c982144db": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.2, supports DHE ciphersuites, and supports DHE groups in the supported\n                          groups extension, then for each supported DHE group, the evaluator shall send the TSF a compliant DTLS 1.2 ClientHello indicating a single ciphersuite that is compatible with the group and indicating the group in the supported\n                          groups extension. The evaluator shall observe that the TSF negotiates DTLS 1.2 using the indicated ciphersuite and\n                          that the server key exchange message indicates the specific group. The evaluator shall send the TOE a client key exchange with a valid point in the group and observe that the TSF successfully completes the session.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c62216f3-a4bc-483c-b84f-c151ffbbe646": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous test with identical ciphersuite and supported\n                            group extension values. After the TSF responds with a valid key exchange message, the evaluator shall send the \n                            TSF a client key exchange with the public key value '0.' The evaluator shall observe that the TSF silently drops\n                            the message or terminates the session.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e373fffe-cf85-43c0-be49-2dbd95d98724": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous two tests including the same ciphersuite, but now instead indicating a group not supported by the TSF in the supported_groups extension. \n                            The evaluator shall observe that the TSF silently drops the message or terminates the session.\n                            <p><b>Note:</b> If the TSF terminates the sessions for the second and third handshake, the test is successful.\n                              If the TSF silently drops the key exchange message (second handshake) and ClientHello message (third \n                              handshake), the evaluator shall continue sending the respective messages until the TSF times out. It is \n                              preferred that the TSF logs a fatal error alert message (e.g., decryption failure, illegal parameter, \n                              handshake error) in response to this, but it is acceptable that the TSF terminates the connection silently\n                              (i.e., without logging a fatal error alert). \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "11d258a7-9303-46d3-81c5-e6cff430075b": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "[conditional] If the TSF supports ECDHE ciphersuites (and therefore supports ECDHE groups in the supported_groups extension), \n                          the evaluator shall send a ClientHello message indicating a single supported ECDHE ciphersuite and including the supported ECDHE group in the supported_groups extension. \n                          The evaluator shall observe that the TSF sends a key exchange message with a valid point of the specified group. \n                          The evaluator shall send the TSF a client key exchange message to the TSF consisting of a valid element in the supported group and observe that the TSF successfully completes the session.\n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f9a1eb3a-0dd7-4408-86ca-cdfc57d58530": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous test with identical ciphersuite and supported\n                            group extension values. After the TSF sends the valid key exchange message, the evaluator shall send a client key \n                            exchange message consisting of an invalid element of the supported group and observe that the TSF silently drops\n                            the key exchange message or terminates the handshake.\n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a7cf69e2-0f3b-477f-930d-97c685397b0a": {
            "testListUUID": "d192320b-4810-4ef8-adcf-2ba925cbb8eb",
            "id": "",
            "objective": "\n                            The evaluator shall send a third ClientHello to the TOE as in the previous two tests indicating the same supported ECDHE ciphersuite, but now instead including an ECDHE group that is not supported. The evaluator shall observe that the TSF silently drops the ClientHello message or terminates the session. \n                          <p><b>Note:</b> Note: If the TSF terminates the sessions for the second and third handshake, the test is successful. If the TSF silently drops the key exchange message (second handshake) and ClientHello message (third handshake), the evaluator shall continue sending the respective messages until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).  \n                          </p> <p>\n                            An invalid ECDSA point consists of properly formatted x and y components, but for which the equation of the curve is not satisfied. To obtain an invalid point, the evaluator shall modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve. \n                          </p> <p>\n                            The IANA TLS parameters website lists registered ECDHE groups for use in selecting a non-supported group. If the TSF supports all registered ECDHE groups, it is acceptable to send the ClientHello without a supported_groups extension. The TSF should reject such a ClientHello, but it is acceptable for the TSF to default to a supported group. In this case, the TSF passes the test.\n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "9d156382-7176-4f65-9cef-494360c93a19": {
            "testListUUID": "876cc4a8-0188-4147-9059-bb9aa9a7f4de",
            "id": "",
            "objective": "\n                          (DTLS 1.2 DHE or ECDHE key establishment) [conditional] If the TSF supports DTLS 1.2 and supports DHE or ECDHE ciphersuites for DTLS 1.2, then the evaluator shall perform\n                          the following sub-tests:\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "d192320b-4810-4ef8-adcf-2ba925cbb8eb"
            ]
          },
          "3eb8ccc5-cf56-47e5-99ec-f3d68015f8f1": {
            "testListUUID": "a0cdfcec-9a9f-4f2c-9d16-20289f36e3c9",
            "id": "",
            "objective": "The evaluator shall send the TSF a compliant DTLS 1.3 ClientHello indicating a single key share value from the supported group and shall observe that the ServerHello \n                          includes valid key exchange parameters of the supported group, as specified by RFC 8446 section 4.2.8",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3ac9718d-6548-4858-b5d4-6547f796cf92": {
            "testListUUID": "a0cdfcec-9a9f-4f2c-9d16-20289f36e3c9",
            "id": "",
            "objective": "The evaluator shall send the TSF a DTLS 1.3 ClientHello indicating a supported_groups value supported by the TSF \n                          but containing a key_share extension indicating an element claiming to be in the supported group that does not represent a \n                          valid element of the group. The evaluator shall observe that the TSF silently drops the message or terminates the session.\n                          <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., illegal parameter, handshake failure, decryption failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                          </p> <p>\n                            For DHE groups, the invalid element may be of the wrong length; \n                            for ECDHE groups, the invalid element has coordinates (x and y) that do not satisfy the equation of the elliptic curve. \n                            To obtain an invalid ECDHE point, the evaluator shall modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve.\n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "42401229-3a6a-46a4-a459-a6a8d6371140": {
            "testListUUID": "876cc4a8-0188-4147-9059-bb9aa9a7f4de",
            "id": "",
            "objective": "(DTLS 1.3 key establishment) [conditional] If the TSF supports DTLS 1.3, then for each supported group the evaluator shall perform the following sub-tests: \n                      ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "a0cdfcec-9a9f-4f2c-9d16-20289f36e3c9"
            ]
          },
          "d312395d-3bbb-4fc1-bf75-84941941a258": {
            "testListUUID": "876cc4a8-0188-4147-9059-bb9aa9a7f4de",
            "id": "tls-server-no-finished-msg",
            "objective": "For each supported version, the evaluator shall initiate a DTLS handshake from a test DTLS client \n                      with compliant handshake messages negotiating the version and supported parameters \n                      to include the change cipher spec message (implied for DTLS 1.3), but which omits the finished message and instead \n                      sends an application message containing random data. The evaluator shall observe that the TSF silently drops the message or \n                      terminates the connection.\n                      <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the application message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., decryption failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                      </p> <p>\n                        Application data is indicated by the TLSCipherText ContentType field having value 23 (application data). \n                        The legacy record version '03 03' and length fields should match a valid TLSCipherText message of the same size.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "afd6ef94-7dbe-46d6-bbfe-a6baa2c0ae31": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "dtls-server-key-exchange",
            "objective": "\n                  (key establishment) The evaluator shall perform the following tests to confirm compliant key establishment:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "876cc4a8-0188-4147-9059-bb9aa9a7f4de"
            ]
          },
          "ca296f84-dede-46ee-91cd-82d1fb59505b": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": "\n                  [conditional] If the TSF supports DTLS 1.2, the evaluator shall send a DTLS 1.2 ClientHello message from a test client and observe that the TSF sends a HelloVerifyRequest message. The evaluator shall modify at least one byte in the cookie from the server's HelloVerifyRequest message and include the modified value as a cookie in the test client\u2019s second ClientHello message. The evaluator shall verify that the server rejects the client's handshake message.\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "8635d827-0321-4d32-931a-016e76bd89b2": {
            "testListUUID": "7a5a1dca-bc0d-478e-9bae-8df9551a8ebd",
            "id": "",
            "objective": "\n                  [conditional] If the TSF supports DTLS 1.3, the evaluator shall send a DTLS 1.3 ClientHello message from a test client and observe that the TSF sends a HelloRetryRequest message. The evaluator shall modify at least one byte in the cookie from the server's HelloRetryRequest message and include the modified value as a cookie in the test client\u2019s second ClientHello message. The evaluator shall verify that the server rejects the client's handshake message.\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.2": {
    "title": "DTLS Server Support for Mutual Authentication",
    "cc_id": "FCS_DTLSS_EXT.2",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "eaebf1b6-75b6-49e3-ae81-f3f2d00a66ce"
      ],
      "selections": [
        "8b518eb7-85e5-4b4f-b96c-e3c910fff6ca"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support mutually-authenticated DTLS when acting as a DTLS server.\n    ",
      "dependencies": "FCS_DTLSS_EXT.1 DTLS Server Protocol\n    ",
      "managementFunction": "No specific management functions are identified.\n    ",
      "toggle": true
    },
    "auditEvents": {
      "868f3126-3966-40bd-a508-9f2b887562f3": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "7333997c-4f8f-4104-93d0-e847eca4f104": {
        "elementXMLID": "fel-dtlss-mut-auth",
        "selectableGroups": {
          "group-70": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "f7b53c34-8370-40e8-a5b8-f5f7292d385a",
              "9971ddce-aaa4-406a-a274-94c77bdae52e"
            ]
          },
          "group-71": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "24edcee3-b711-4e68-9809-a6cea503b709",
              "d39ea997-be59-4cda-bdc3-7faa40ed15e5"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support authentication of DTLS clients using X.509v3 certificates during the DTLS handshake and "
          },
          {
            "selections": "group-70"
          },
          {
            "text": " \n                using the certificate types indicated in the client\u2019s signature_algorithms and "
          },
          {
            "selections": "group-71"
          },
          {
            "text": " extension.\n            "
          }
        ],
        "selectables": {
          "f7b53c34-8370-40e8-a5b8-f5f7292d385a": {
            "type": "selectable",
            "uuid": "f7b53c34-8370-40e8-a5b8-f5f7292d385a",
            "id": "fcs_dtlss_ext.2.1_1",
            "description": "during post-handshake requests",
            "exclusive": false,
            "nestedGroups": []
          },
          "9971ddce-aaa4-406a-a274-94c77bdae52e": {
            "type": "selectable",
            "uuid": "9971ddce-aaa4-406a-a274-94c77bdae52e",
            "id": "fcs_dtlss_ext.2.1_2",
            "description": "at no other time",
            "exclusive": false,
            "nestedGroups": []
          },
          "24edcee3-b711-4e68-9809-a6cea503b709": {
            "type": "selectable",
            "uuid": "24edcee3-b711-4e68-9809-a6cea503b709",
            "id": "fcs_dtlss_ext.2.1_3",
            "description": "signature_algorithms_cert",
            "exclusive": false,
            "nestedGroups": []
          },
          "d39ea997-be59-4cda-bdc3-7faa40ed15e5": {
            "type": "selectable",
            "uuid": "d39ea997-be59-4cda-bdc3-7faa40ed15e5",
            "id": "fcs_dtlss_ext.2.1_4",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              This SFR is claimed if \"mutual authentication\" is selected in FCS_DTLSS_EXT.1.1.\n              </p> <p>\n              All application notes for FCS_TLSS_EXT.2.1 apply to this requirement, with references to TLS replaced by the equivalent reference to DTLS.\n              </p>"
      },
      "38671a5a-0e35-4d9a-a287-b01c5c44f8ce": {
        "elementXMLID": "fcs_dtlss_ext-2-2",
        "selectableGroups": {},
        "title": [
          {
            "text": "The TSF shall support authentication of DTLS clients using X.509v3 certificates in accordance with "
          },
          {
            "description": " &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt; ."
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "0357a3f3-a69e-4265-9ff9-28f8c33cd03f": {
        "elementXMLID": "fcs_dtlss_ext-2-3",
        "selectableGroups": {
          "group-72": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlss_ext.2.3_1",
              "fcs_dtlss_ext.2.3_5",
              "0614a03a-1819-4a92-97d5-5af23464d79e"
            ]
          },
          "fcs_dtlss_ext.2.3_1": {
            "description": [
              {
                "text": "continue establishment of a server-only authenticated DTLS channel in accordance with FCS_DTLSS_EXT.1 in support of"
              },
              {
                "groups": [
                  "group-74"
                ]
              },
              {
                "text": "when an empty certificate message is provided by the client"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-74": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "7a6558ba-2ed7-48e9-82c8-3ec1723670a9",
              "3c1e482e-b4dc-4530-a2c9-1825bec4c85d"
            ]
          },
          "fcs_dtlss_ext.2.3_5": {
            "description": [
              {
                "text": "continue establishment of a mutually authenticated DTLS channel when revocation status information for the"
              },
              {
                "groups": [
                  "group-76"
                ]
              },
              {
                "text": "is not available in support of"
              },
              {
                "groups": [
                  "group-78"
                ]
              },
              {
                "text": "as"
              },
              {
                "groups": [
                  "group-80"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-76": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "bcedbb37-cb8f-4acd-bf9d-e806951b7a38",
              "efd9133f-f015-4362-8658-dd629ea755ea",
              "9fee75e7-76f0-4c59-b65d-2f01de00f2e5"
            ]
          },
          "group-78": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "f97f6b77-93d3-4e86-ae92-ed3674f7a86e",
              "1eeb3808-4767-4e72-8c29-7f760ce60226"
            ]
          },
          "group-80": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "bbb0675d-2024-4b02-8b59-6ef45693bbd2",
              "0de1a892-4075-4d7f-839e-d340044bc707",
              "fcs_dtlss_ext.2.3_15"
            ]
          },
          "fcs_dtlss_ext.2.3_15": {
            "description": [
              {
                "text": "a DTLS-specific default for"
              },
              {
                "groups": [
                  "905f769f-3ca7-40a8-9295-45155467b06c"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "title": [
          {
            "text": "\n        The TSF shall be able to reject the establishment of a trusted channel if the requested client certificate is invalid and "
          },
          {
            "selections": "group-72"
          },
          {
            "text": ". \n      "
          }
        ],
        "selectables": {
          "7a6558ba-2ed7-48e9-82c8-3ec1723670a9": {
            "type": "selectable",
            "uuid": "7a6558ba-2ed7-48e9-82c8-3ec1723670a9",
            "id": "fcs_dtlss_ext.2.3_2",
            "description": "all applications",
            "exclusive": false,
            "nestedGroups": []
          },
          "3c1e482e-b4dc-4530-a2c9-1825bec4c85d": {
            "id": "fcs_dtlss_ext.2.3_4",
            "description": "list of calling applications that accept both authenticated and unauthenticated client sessions",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "bcedbb37-cb8f-4acd-bf9d-e806951b7a38": {
            "type": "selectable",
            "uuid": "bcedbb37-cb8f-4acd-bf9d-e806951b7a38",
            "id": "fcs_dtlss_ext.2.3_6",
            "description": "client's leaf certificate",
            "exclusive": false,
            "nestedGroups": []
          },
          "efd9133f-f015-4362-8658-dd629ea755ea": {
            "id": "fcs_dtlss_ext.2.3_8",
            "description": "specific intermediate CA certificates",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "9fee75e7-76f0-4c59-b65d-2f01de00f2e5": {
            "type": "selectable",
            "uuid": "9fee75e7-76f0-4c59-b65d-2f01de00f2e5",
            "id": "fcs_dtlss_ext.2.3_9",
            "description": "any non-trust store certificate in the certificate chain",
            "exclusive": false,
            "nestedGroups": []
          },
          "f97f6b77-93d3-4e86-ae92-ed3674f7a86e": {
            "type": "selectable",
            "uuid": "f97f6b77-93d3-4e86-ae92-ed3674f7a86e",
            "id": "fcs_dtlss_ext.2.3_10",
            "description": "all applications",
            "exclusive": false,
            "nestedGroups": []
          },
          "1eeb3808-4767-4e72-8c29-7f760ce60226": {
            "id": "fcs_dtlss_ext.2.3_12",
            "description": "list of calling applications configurable to perform certificate status information bypass processing",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "bbb0675d-2024-4b02-8b59-6ef45693bbd2": {
            "type": "selectable",
            "uuid": "bbb0675d-2024-4b02-8b59-6ef45693bbd2",
            "id": "fcs_dtlss_ext.2.3_13",
            "description": "configured by an administrator",
            "exclusive": false,
            "nestedGroups": []
          },
          "0de1a892-4075-4d7f-839e-d340044bc707": {
            "type": "selectable",
            "uuid": "0de1a892-4075-4d7f-839e-d340044bc707",
            "id": "fcs_dtlss_ext.2.3_14",
            "description": "confirmed by the supported function user",
            "exclusive": false,
            "nestedGroups": []
          },
          "905f769f-3ca7-40a8-9295-45155467b06c": {
            "id": "fcs_dtlss_ext.2.3_16",
            "description": "subset of supported function",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "0614a03a-1819-4a92-97d5-5af23464d79e": {
            "type": "selectable",
            "uuid": "0614a03a-1819-4a92-97d5-5af23464d79e",
            "id": "fcs_dtlss_ext.2.3_17",
            "description": "no other processing options for missing or invalid client certificates",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                  The ST author claims any certificate processing exceptions that are allowed for specific calling applications. The \n                  \"continue establishment of a server-only authenticated DTLS channel\u2026\" selection is claimed if the DTLS product supports\n                  applications that can provide services to unauthenticated users if the user does not possess an appropriate certificate.\n                  Within this selection, the ST author indicates which applications are able to support both authenticated and unauthenticated\n                  users.\n                </p> <p>\n                  The ST author claims \"continue establishment of a mutually authenticated DTLS channel\u2026\" if there is an administrator\n                  configuration or user confirmation that revocation status information is not available for one or more of the certificates\n                  in the client\u2019s certificate chain. If claimed, the ST author will describe in the assignment for intermediate values which\n                  CA certificates are included in the exception (for example, \u201call intermediates but the issuing CA\u201d or \u201cspecific end-entity\n                  certificates as configured\u201d). Within this selection, the ST author specifies which applications are impacted and which\n                  supported function or authorized user is allowed to approve continuing with the session when revocation information is not\n                  available. If an administrator configures that a user may accept a certificate without status information, both selections\n                  are claimed. The \"as a DTLS-specific default...\" should only be selected for applications that do not have access to revocation\n                  information. This is not claimed when alternate revocation methods are claimed in FIA_X509_EXT.1 that apply to TLS client\n                  certificates. Methods for obtaining revocation information are included in FIA_X509_EXT.1.\n                </p>"
      },
      "8941bf0d-c459-46ab-ae60-5e5e18e085f8": {
        "elementXMLID": "fcs_dtlss_ext-2-4",
        "selectableGroups": {
          "group-81": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_dtlss_ext.2.4_1",
              "fcs_dtlss_ext.2.4_11",
              "fcs_dtlss_ext.2.4_20"
            ]
          },
          "fcs_dtlss_ext.2.4_1": {
            "description": [
              {
                "text": "not establish a DTLS session if an entry of the Distinguished Name or a"
              },
              {
                "groups": [
                  "group-83"
                ]
              },
              {
                "text": "in the Subject Alternate Name extension contained in the client certificate does not match one of the expected identifiers for the client in accordance with"
              },
              {
                "groups": [
                  "group-85"
                ]
              },
              {
                "text": "matching rules"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-83": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "64cd854f-c383-459f-aa27-e441d7c47a4d",
              "48fa4c46-093b-49ab-8403-c5580c70e090",
              "a9c59fe8-bc3c-4ade-b6c4-cd42773db7bd"
            ]
          },
          "group-85": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "3710a03e-e0c9-4fd4-bc15-83f45ba44143",
              "75395095-d9ef-40de-99a3-ad77c72b7bca",
              "1e0410db-ad08-4e79-bdc3-8991d1f7e324",
              "b2bb4cbc-1cda-475f-afb3-fba5fb3a359b"
            ]
          },
          "fcs_dtlss_ext.2.4_11": {
            "description": [
              {
                "text": "pass the"
              },
              {
                "groups": [
                  "group-87"
                ]
              },
              {
                "text": "to"
              },
              {
                "groups": [
                  "e10103bd-45b5-4c87-96d4-42c09c21553f"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-87": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "d04a8807-9891-479a-a237-0d3a38b247e2",
              "9477ca30-dc5a-4ae6-9139-51754d4d607f",
              "26edb215-ad2a-414c-b143-417675fbbe41",
              "ad41ceef-5545-434f-b209-9ba2b6e5eb1a",
              "e032021e-5949-4003-bd4b-ae132f40c814"
            ]
          },
          "fcs_dtlss_ext.2.4_20": {
            "description": [
              {
                "text": "pass initial name constraints of type"
              },
              {
                "groups": [
                  "group-89"
                ]
              },
              {
                "text": "to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier matches an expected client identifier"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-89": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "fdccfd49-eace-4eea-ab2c-955b1fab1cfc",
              "c82d0b9f-6fbb-46a4-8fab-d5fdf04d9600",
              "31c08fbb-4093-4f8b-8691-845745be5cb2",
              "956a3651-6240-4ec4-a3e7-60f63c9d96ce"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall be able to "
          },
          {
            "selections": "group-81"
          },
          {
            "text": ".     \n      "
          }
        ],
        "selectables": {
          "64cd854f-c383-459f-aa27-e441d7c47a4d": {
            "type": "selectable",
            "uuid": "64cd854f-c383-459f-aa27-e441d7c47a4d",
            "id": "fcs_dtlss_ext.2.4_2",
            "description": "rfc822_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "48fa4c46-093b-49ab-8403-c5580c70e090": {
            "type": "selectable",
            "uuid": "48fa4c46-093b-49ab-8403-c5580c70e090",
            "id": "fcs_dtlss_ext.2.4_3",
            "description": "dns_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "a9c59fe8-bc3c-4ade-b6c4-cd42773db7bd": {
            "id": "fcs_dtlss_ext.2.4_5",
            "description": "supported name types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "3710a03e-e0c9-4fd4-bc15-83f45ba44143": {
            "type": "selectable",
            "uuid": "3710a03e-e0c9-4fd4-bc15-83f45ba44143",
            "id": "fcs_dtlss_ext.2.4_6",
            "description": "RFC 5322",
            "exclusive": false,
            "nestedGroups": []
          },
          "75395095-d9ef-40de-99a3-ad77c72b7bca": {
            "type": "selectable",
            "uuid": "75395095-d9ef-40de-99a3-ad77c72b7bca",
            "id": "fcs_dtlss_ext.2.4_7",
            "description": "RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "1e0410db-ad08-4e79-bdc3-8991d1f7e324": {
            "type": "selectable",
            "uuid": "1e0410db-ad08-4e79-bdc3-8991d1f7e324",
            "id": "fcs_dtlss_ext.2.4_8",
            "description": "RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "b2bb4cbc-1cda-475f-afb3-fba5fb3a359b": {
            "id": "fcs_dtlss_ext.2.4_10",
            "description": "RFC for the supported name type",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "d04a8807-9891-479a-a237-0d3a38b247e2": {
            "type": "selectable",
            "uuid": "d04a8807-9891-479a-a237-0d3a38b247e2",
            "id": "fcs_dtlss_ext.2.4_12",
            "description": "validated certificate",
            "exclusive": false,
            "nestedGroups": []
          },
          "9477ca30-dc5a-4ae6-9139-51754d4d607f": {
            "type": "selectable",
            "uuid": "9477ca30-dc5a-4ae6-9139-51754d4d607f",
            "id": "fcs_dtlss_ext.2.4_13",
            "description": "RFC 5322 name normalized according to RFC 5322",
            "exclusive": false,
            "nestedGroups": []
          },
          "26edb215-ad2a-414c-b143-417675fbbe41": {
            "type": "selectable",
            "uuid": "26edb215-ad2a-414c-b143-417675fbbe41",
            "id": "fcs_dtlss_ext.2.4_14",
            "description": "DNS name normalized according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "ad41ceef-5545-434f-b209-9ba2b6e5eb1a": {
            "id": "fcs_dtlss_ext.2.4_16",
            "description": "list of RFC 5280 name types and normalization rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "e032021e-5949-4003-bd4b-ae132f40c814": {
            "id": "fcs_dtlss_ext.2.4_18",
            "description": "list of 'other' name types and standard normalization rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "e10103bd-45b5-4c87-96d4-42c09c21553f": {
            "id": "fcs_dtlss_ext.2.4_19",
            "description": "list of calling applications capable of making access decisions",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "fdccfd49-eace-4eea-ab2c-955b1fab1cfc": {
            "type": "selectable",
            "uuid": "fdccfd49-eace-4eea-ab2c-955b1fab1cfc",
            "id": "fcs_dtlss_ext.2.4_21",
            "description": "directory name",
            "exclusive": false,
            "nestedGroups": []
          },
          "c82d0b9f-6fbb-46a4-8fab-d5fdf04d9600": {
            "type": "selectable",
            "uuid": "c82d0b9f-6fbb-46a4-8fab-d5fdf04d9600",
            "id": "fcs_dtlss_ext.2.4_22",
            "description": "rfc_822_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "31c08fbb-4093-4f8b-8691-845745be5cb2": {
            "type": "selectable",
            "uuid": "31c08fbb-4093-4f8b-8691-845745be5cb2",
            "id": "fcs_dtlss_ext.2.4_23",
            "description": "dns_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "956a3651-6240-4ec4-a3e7-60f63c9d96ce": {
            "id": "fcs_dtlss_ext.2.4_25",
            "description": "supported name types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n          Authorization for services provided by the applications that are protected by the DTLS session is determined by the supported\n          function establishing a set of reference identifiers, by passing the received identifiers to the supported function, or by passing\n          initial name constraints to the certification path validation function. The ST author indicates the methods supported, and for each\n          method supported, indicates all name types supported; if name types are processed by the TSF, at least one name type is required.\n          In the assignment of the first option, the ST author indicates all name types and the corresponding method for matching in the\n          sub-selections. In the second method option, the ST author indicates which name type normalizations the product supports. If the\n          product passes the entire validated certificate to the application, no normalization of the names contained in the certificate is\n          expected. If the third method is claimed, the ST author indicates which name types are supported for formulating initial name\n          constraints.\n        </p> <p>\n          If name normalization is claimed, care should be taken regarding wildcards and IP addresses. IP addresses embedded in DNS host names\n          and in Directory Name CN components have been observed to include non-standard wildcard designations including the asterisk (*). Any\n          embedded IP addresses should use standard CIDR notation and should not include nonstandard encoding.\n        </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "ea5ab3d7-90d4-49d9-94ae-e90355bad098": {
        "tss": "<p>\n            The evaluator shall ensure that the TSS description required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes the use of client-side certificates for DTLS mutual authentication, \n            and that the description includes any certificate validation exception rules and the name types supported for matching to reference identifiers for all applications that use DTLS. \n            The evaluator shall examine the TSS to ensure that any CN-embedded name types that are used include a description of the encoding and matching rules.</p> <p>\n              The evaluator shall ensure that the TSS includes a description of each response option claimed in FCS_DTLSS_EXT.2.3, to include the supporting functions using the option, and the behavior of functions exercising a non-authenticated option or exception processing (if claimed).\n            </p>",
        "introduction": "",
        "guidance": "<p>\n            The evaluator shall verify that the operational guidance includes instructions for configuring trust stores for client-side certificates used in DTLS mutual authentication. \n            The evaluator shall ensure that the operational guidance includes instructions for configuring the server to require mutual authentication of clients using these certificates and for configuring any certificate validation exception rules. \n            The evaluator shall ensure that the operational guidance includes instructions for configuring reference identifiers normalized or matched by the TSF and matching rules for the supported name types.\n          </p>",
        "testIntroduction": "The evaluator shall use DTLS as a function to verify that the validation rules in &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  are adhered to and shall perform the tests listed below in conjunction with testing for &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  . The evaluator shall apply the operational guidance to configure the server to require DTLS mutual authentication of clients for these tests unless overridden by instructions in the test activity. <p><b>Note:</b> DTLS 1.3 is a fundamentally different protocol than DTLS 1.2, so even though the certificate validation and name checking tests are identical for both versions, it is likely that early deployments of DTLS 1.3 may use a different code-base that warrants independent testing. If both DTLS 1.2 and DTLS 1.3 are supported and the evaluator can verify that the TSF uses the same code-base for certificate validation and name checking for both DTLS 1.3 and DTLS 1.2, it is acceptable that testing be performed for only one version for these tests.\n          </p>",
        "testClosing": "",
        "testLists": {
          "cc5b79a7-338b-451c-b21a-f5aa228b77f8": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "cf4f866b-d407-480b-b325-a4e1208bc67b",
              "4bcbfc8e-f723-41b9-815a-e6bc984e150a",
              "b0729a94-e365-4998-afa9-f2846ab3ef11"
            ],
            "conclusion": ""
          },
          "a4821085-aa44-408f-b16a-7f439cc7fbd9": {
            "parentTestUUID": "4bcbfc8e-f723-41b9-815a-e6bc984e150a",
            "description": "",
            "testUUIDs": [
              "9744c04d-db23-48d2-8b3e-fe4bda3e5ddc",
              "de49078e-ccd4-43c8-b056-16e60edf7ee2"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "cf4f866b-d407-480b-b325-a4e1208bc67b": {
            "testListUUID": "cc5b79a7-338b-451c-b21a-f5aa228b77f8",
            "id": "",
            "objective": "\n              For each supported version, the evaluator shall follow the operational guidance to configure the TOE to require valid client authentication with no exceptions in support of a function (configured, as necessary) that does not allow unauthenticated sessions, and initiate a DTLS session from a compliant DTLS test client \n              supporting that version. The evaluator shall ensure that the test client sends a certificate_list structure which has a length of zero. The evaluator shall verify the TSF silently drops the message or terminates the session, and that no application data flows. \n              <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the client certificate message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure, bad certificate, unknown certificate, unknown CA) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n              </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "9744c04d-db23-48d2-8b3e-fe4bda3e5ddc": {
            "testListUUID": "a4821085-aa44-408f-b16a-7f439cc7fbd9",
            "id": "",
            "objective": "[conditional]: If the TSF supports non-authenticated session establishment when receiving an empty certificate message, \n                  the evaluator shall initiate a DTLS handshake from a compliant test DTLS client supporting the version and providing a certificate message \n                  containing a certificate_list structure of length zero. The evaluator shall confirm that the TSF notifies the calling application that the user is unauthenticated.\n                  <p><b>Note:</b> Specific procedures for determining that the calling application is notified will vary based on the application. \n                    If an API to the calling application is not available, the evaluator may attempt to configure the calling application to provide a different response \n                    (e.g., require authentication for flagged data) for authenticated and non-authenticated users and make a request at the test client that results in a response \n                    indicating the application is treating the client as non-authenticated.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "de49078e-ccd4-43c8-b056-16e60edf7ee2": {
            "testListUUID": "a4821085-aa44-408f-b16a-7f439cc7fbd9",
            "id": "",
            "objective": "[conditional] If the TSF supports exceptions for when revocation status information is unavailable, \n                  then the evaluator shall follow the operational guidance to attempt to establish a narrowly defined exception for which both exempt and non-exempt certificates can be established. \n                  The evaluator shall establish a primary certificate chain for the test client that only exhibits the allowed exception \n                  and one or more alternate certificate chains for the test client that do not pass the exception rule, as necessary to test the boundaries of the exception rules. \n                  <p>\n                    The evaluator shall follow the operational guidance to remove any cached revocation status information for the test client\u2019s primary certificate chain. \n                    The evaluator shall initiate a valid TLS session from the test client that presents the primary certificate for the test client, \n                    provide any feedback requested by the TSF to confirm the exception, and observe that the TSF allows the certificate and completes the DTLS handshake successfully. \n                  </p> <p>\n                    For each alternate certificate chain, the evaluator shall repeat the session initiation from the test client but present the alternate certificate chain and observe that the TSF silently drops the message or terminates the session.\n                  </p> <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the client certificate and certificate verify messages until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., bad certificate, unknown certificate, access denied, handshake error) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                  </p> <p>\n                    The alternate certificate chains are intended to test the boundaries of the exception rules. \n                    For example, if the exception rule indicates that only leaf certificates are exempt, the evaluator shall include an alternate certificate chain for which a CA certificate\u2019s revocation information is advertised but is not available; \n                    if the exception can be configured for an explicit leaf certificate, or particular subjects, an alternate chain will be included that does not include an excepted certificate or subject. \n                    If the exception rules can be configured for all certificates having advertised revocation information, an alternate certificate chain can include an expired certificate \u2013 only one additional validity failure \n                    (e.g., expired certificate) is required in this case. More comprehensive validity failure handling is addressed by testing for &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt; .\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4bcbfc8e-f723-41b9-815a-e6bc984e150a": {
            "testListUUID": "cc5b79a7-338b-451c-b21a-f5aa228b77f8",
            "id": "",
            "objective": "[conditional] If the ST indicates that the TSF supports establishment of a DTLS session for missing or invalid certificates, then for each supported version, \n              and for each supported response option for a missing or invalid certificate indicated in FCS_DTLSS_EXT.2.3, the evaluator shall configure the TSF according to the operational guidance \n              to respond as indicated for the calling application. The evaluator shall send client handshake messages from a test DTLS client as indicated for each sub-test. The evaluator shall perform the following sub-tests:\n              ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "a4821085-aa44-408f-b16a-7f439cc7fbd9"
            ]
          },
          "b0729a94-e365-4998-afa9-f2846ab3ef11": {
            "testListUUID": "cc5b79a7-338b-451c-b21a-f5aa228b77f8",
            "id": "",
            "objective": "For each supported version, the evaluator shall configure the TSF to negotiate the version and require client authentication and perform the following steps: <ul><li>For each supported name matching method indicated in FCS_DTLSS_EXT.2.4, and for each name type supported by the matching method,\n                the evaluator shall establish a valid primary certificate chain with a leaf certificate containing a single name of the supported type matching a reference ID and a valid alternate certificate chain with a leaf certificate containing a single name indicating a different name of the same type not matching a reference ID.</li> <li>[conditional] If any of the supported name types include CN encoding of a name type also supported as a SAN entry, the evaluator shall                 \n                establish additional certificate chains:\n                <ul><li>The evaluator shall establish a primary certificate chain with multiple names, to include a leaf certificate with: \n                    <ul><li>a SAN entry that matches the name in the primary certificate chain with single names, of the same SAN name type; and </li> <li>a CN entry encoding the same SAN type which matches the name in the alternate certificate chain with single names of the CN encoding of the same SAN name type;</li></ul></li> <li>The evaluator shall establish an alternate certificate chain with multiple names, to include a leaf certificate with:\n                    <ul><li>a SAN entry that matches the name in the alternate certificate chain with single names, of the same SAN name type; and</li> <li>a CN entry encoding the same SAN type which matches the name in the primary certificate chain with single names, of the CN encoding of the same SAN name type.</li></ul></li></ul></li> <li>[conditional] If any of the supported name types include CN encoding, the evaluator shall follow the operational guidance to configure the TSF, \n                establishing trust in the root CA for all primary and alternate certificate chains. \n                The evaluator shall configure the TSF and any relevant TOE applications that use DTLS for client authentication as necessary to establish reference identifiers that match the names in the client\u2019s primary certificate chains \n                with single names, but not matching any of the names in the alternate certificate chains with single names.</li> <li>For each primary certificate chain (with single or multiple names), the evaluator shall initiate a DTLS session from the test DTLS client that is configured to present the primary certificate chain \n                in a certificate message and a valid certificate verify message in response to the server\u2019s certificate request message. \n                The evaluator shall confirm that the TSF accepts the certificate and completes the authenticated TLS session successfully.</li> <li>For each alternate certificate chain (with single or multiple names), the evaluator shall initiate a DTLS session from the test DTLS client that is configured \n                to present the alternate certificate chain in a certificate message and a valid certificate verify message in response to the server\u2019s certificate request message. \n                The evaluator shall confirm that the TSF silently drops the message or terminates the session.</li></ul> <p><b>Note:</b> If the TSF terminates the connection, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the client certificate and certificate verify messages until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., access denied) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n              </p> <p>\n                The intent of this test is to confirm that for each method that the TSF uses to match name types presented in validated certificates, \n                it is able to recognize both matching and non-matching names. \n                Names of special types implicitly encoded in the CN entry of the certificate subject name are especially prone to error since they may only be validated \n                by the issuing CA as a directory name (RDN) type, especially if the issuing CA is unaware of the intended encoding as a different name type. \n                It is a best practice that when the CN is interpreted as an embedded name type other than RDN, an explicitly encoded SAN entry should take precedence.\n              </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.3": {
    "title": "DTLS Server Downgrade Protection",
    "cc_id": "FCS_DTLSS_EXT.3",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "eaebf1b6-75b6-49e3-ae81-f3f2d00a66ce"
      ],
      "selections": [
        "beecd10b-9be1-4374-89a7-5531a08a1158"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to implement version downgrade protection when acting as a DTLS server.\n          ",
      "dependencies": "FCS_DTLSS_EXT.1 DTLS Server Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "5518feb6-feae-4202-85aa-a419dc71470e": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "c61711fb-7c3e-4bbb-a797-919f65b5b5fc": {
        "elementXMLID": "fcs_dtlss_ext-3-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall set the ServerHello extension to a random value concatenated with the TLS 1.2 downgrade indicator when\n              negotiating DTLS 1.2 as indicated in RFC 8446, Section 4.1.3.\n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"supplemental downgrade protection\" is selected in FCS_DTLSS_EXT.1.1. \n              </p> <p>\n                RFC 8446 requires both the TLS 1.2 downgrade indicator as well as an indicator for TLS 1.1 and below. This FP requires the\n                server to reject attempts to establish TLS 1.1 and below, making this mechanism redundant. However, products may still\n                implement both indicators to be compliant with the RFC.              \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "7ea4ccbf-2275-46d0-b9a1-4cf86c115bb6": {
        "tss": "<p>\n                  The evaluator shall examine the TSS and confirm that the DTLS description includes details on the session downgrade protections that are supported.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall examine the operational guidance to confirm that instructions are included to configure the TSF to support only DTLS 1.3 and to provide the associated downgrade indications.\n                </p>",
        "testIntroduction": "The evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate only DTLS 1.3 and to provide the associated downgrade indications. The evaluator shall send a DTLS ClientHello to the TOE that indicates support for only DTLS 1.2. The evaluator shall observe that the TSF sends a ServerHello with the last eight bytes of the server random value equal to 44 4F 57 4E 47 52 44 01.",
        "testClosing": "",
        "testLists": {},
        "tests": {},
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.4": {
    "title": "DTLS Server Support for Renegotiation",
    "cc_id": "FCS_DTLSS_EXT.4",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "e9ee3ce6-6dff-47de-805d-73a48a63c2ea"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session renegotiation when acting as a DTLS server.\n          ",
      "dependencies": "FCS_DTLSS_EXT.1 DTLS Server Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "9017db5c-8aeb-4492-9060-d9e41aa622c7": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "fa025e06-63c1-489c-a306-d96eeceb07f7": {
        "elementXMLID": "fcs_dtlss_ext-4-1",
        "selectableGroups": {
          "group-90": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "8d3f19a6-2393-474d-af9a-6a4f705bd082",
              "30176071-ec13-49fc-8a1d-b859e10dee77"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support secure DTLS renegotiation through the use of "
          },
          {
            "selections": "group-90"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "8d3f19a6-2393-474d-af9a-6a4f705bd082": {
            "type": "selectable",
            "uuid": "8d3f19a6-2393-474d-af9a-6a4f705bd082",
            "id": "fcs_dtlss_ext.4.1_1",
            "description": "the \"renegotiation_info\" TLS extension in accordance with RFC 5746",
            "exclusive": false,
            "nestedGroups": []
          },
          "30176071-ec13-49fc-8a1d-b859e10dee77": {
            "type": "selectable",
            "uuid": "30176071-ec13-49fc-8a1d-b859e10dee77",
            "id": "fcs_dtlss_ext.4.1_2",
            "description": "not allowing session renegotiation",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "f85d158c-6455-42f8-9263-952c9689725c": {
        "elementXMLID": "fcs_dtlss_ext-4-2",
        "selectableGroups": {
          "group-91": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "0ab1f70e-e791-4de9-a40d-af6fe37b5369",
              "92e4dac5-89ca-4ed5-a071-33216f51b029"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall\n              "
          },
          {
            "selections": "group-91"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "0ab1f70e-e791-4de9-a40d-af6fe37b5369": {
            "type": "selectable",
            "uuid": "0ab1f70e-e791-4de9-a40d-af6fe37b5369",
            "id": "fcs_dtlss_ext.4.2_1",
            "description": "indicate support for renegotiating a DTLS 1.2 session by including the renegotiation_info extension in the ServerHello message and shall terminate a DTLS 1.2 session if neither of the renegotiation_info or TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuites are indicated in the ClientHello",
            "exclusive": false,
            "nestedGroups": []
          },
          "92e4dac5-89ca-4ed5-a071-33216f51b029": {
            "type": "selectable",
            "uuid": "92e4dac5-89ca-4ed5-a071-33216f51b029",
            "id": "fcs_dtlss_ext.4.2_2",
            "description": "not allow renegotiation",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "84801b7f-eeb7-4c4e-a45b-14e8dea8dabd": {
        "elementXMLID": "fcs_dtlss_ext-4-3",
        "selectableGroups": {
          "group-92": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "03194868-ad43-48d4-a9f0-7be335d921ff",
              "c9cab3d3-4634-41d6-a892-5a6eb4eb040d"
            ]
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall "
          },
          {
            "selections": "group-92"
          },
          {
            "text": " if an unexpected ClientHello is received during an active DTLS session.\n            "
          }
        ],
        "selectables": {
          "03194868-ad43-48d4-a9f0-7be335d921ff": {
            "type": "selectable",
            "uuid": "03194868-ad43-48d4-a9f0-7be335d921ff",
            "id": "fcs_dtlss_ext.4.3_1",
            "description": "terminate the session",
            "exclusive": false,
            "nestedGroups": []
          },
          "c9cab3d3-4634-41d6-a892-5a6eb4eb040d": {
            "type": "selectable",
            "uuid": "c9cab3d3-4634-41d6-a892-5a6eb4eb040d",
            "id": "fcs_dtlss_ext.4.3_2",
            "description": "silently ignore the message",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"DTLS as a server\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n                If the TSF supports DTLS 1.2, the ST author claims either method of protecting against insecure renegotiation attempts. The\n                first selection refines RFC 5746, which defines an extension to (D)TLS 1.2 that binds renegotiation handshakes to the\n                cryptography in the original handshake, but allows interoperability with clients that do not follow RFC 5746. As a\n                refinement of the RFC, servers that support DTLS 1.2 renegotiation will terminate a session if neither of the methods\n                described in RFC 5746 are offered by the client. Alternatively, a DTLS  server supporting DTLS 1.2 may negotiate DTLS 1.2\n                without any RFC 5746 client renegotiation indicators, if it always terminates an existing session when a new ClientHello is\n                received or silently ignores unexpected ClientHello messages, similar to the implementation of DTLS 1.3.\n              </p> <p>\n                If the TSF supports DTLS 1.3, the ST author must claim \u201cdoes not allow renegotiation.\u201d DTLS 1.3 does not allow renegotiation. \n              </p> <p>\n                Termination of the session or silently ignoring the unexpected message, as indicated in FCS_DTLSS_EXT.4.3, covers DTLS 1.3\n                sessions as well as DTLS 1.2 sessions where the ClientHello received does not comply with RFC 5746 or when configured to\n                reject renegotiation (if the product is configurable).\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "db19db0a-b0c1-4e8a-99c5-58800a9819da": {
        "tss": "<p>\n                  The evaluator shall examine the TSS to confirm that the DTLS description includes details on session renegotiation protection methods supported, \n                  to include when renegotiation is prohibited.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall examine the operational guidance to confirm that any instructions that are needed to meet the requirements are included. \n                  If DTLS 1.2 is supported, and the TSF is configurable to use RFC 5746 methods or to deny renegotiation, \n                  the evaluator shall ensure that the operational guidance includes instructions for configuring the TSF in this manner.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests, as indicated based on supported secure renegotiation methods. The conditions: \u2018support for renegotiation\u2019, \u2018allowing renegotiation,\u2019 or \u2018supporting RFC 5746 methods\u2019 imply that the TSF supports DTLS 1.2. DTLS 1.3 does not allow renegotiation. For each test, the evaluator shall use a test DTLS client able to construct the indicated messages and expose messages received from the TSF.",
        "testClosing": "",
        "testLists": {
          "4a0f9a83-d656-4da0-ab64-e4be6e56e0d4": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "77a712da-57f4-4891-b731-35363d3a6f48",
              "45f6f279-c9b8-4951-81da-04041615ffdb"
            ],
            "conclusion": ""
          },
          "4515abcd-98cb-48bb-b310-43c83233fa6c": {
            "parentTestUUID": "77a712da-57f4-4891-b731-35363d3a6f48",
            "description": "",
            "testUUIDs": [
              "b6775ef6-af87-445a-abc3-0a3e66e509a2",
              "805886e0-99eb-4951-b817-5dc73a58903c"
            ],
            "conclusion": ""
          },
          "e47fce42-1a55-4a82-944f-1198d3472b8d": {
            "parentTestUUID": "45f6f279-c9b8-4951-81da-04041615ffdb",
            "description": "",
            "testUUIDs": [
              "3564be60-3993-40a3-ad2a-a525ebcb3959",
              "802bc373-46ed-4411-bc92-e4473e07f072",
              "85a95060-0516-4621-ac32-2bddaf90c2a0",
              "abf2aa8d-4efa-4da4-a003-e23a0638fefa",
              "1f11a564-b24f-49b2-a1e5-e922320455be"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "b6775ef6-af87-445a-abc3-0a3e66e509a2": {
            "testListUUID": "4515abcd-98cb-48bb-b310-43c83233fa6c",
            "id": "",
            "objective": "The evaluator shall send an initial ClientHello without the renegotiation_info extension and without including the signaling ciphersuite value, TLS_EMPTY_RENEGOTIATION_INFO_SCSV. \n                        The evaluator shall observe that the TSF silently drops the message or terminates the session.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "805886e0-99eb-4951-b817-5dc73a58903c": {
            "testListUUID": "4515abcd-98cb-48bb-b310-43c83233fa6c",
            "id": "",
            "objective": "\n                        The evaluator shall send an initial ClientHello with the renegotiation_info extension indicating a renegotiated_connection length greater than zero. The evaluator shall observe that the TSF silently drops the message or terminates the session. \n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "77a712da-57f4-4891-b731-35363d3a6f48": {
            "testListUUID": "4a0f9a83-d656-4da0-ab64-e4be6e56e0d4",
            "id": "",
            "objective": "(RFC 5746 compliant DTLS 1.2 initial handshake) [conditional] \n                    If the TSF supports RFC 5746 compliant DTLS 1.2 renegotiation, the evaluator shall follow the operational guidance as\n                    necessary to configure the TSF to enforce RFC 5746 methods. \n                    The evaluator shall initiate a DTLS 1.2 session from a test DTLS client for each of the following sub-tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "4515abcd-98cb-48bb-b310-43c83233fa6c"
            ]
          },
          "3564be60-3993-40a3-ad2a-a525ebcb3959": {
            "testListUUID": "e47fce42-1a55-4a82-944f-1198d3472b8d",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, the evaluator shall configure the TSF to support RFC 5746 methods, \n                        send an initial handshake with a valid renegotiation extension, \n                        send a new DTLS 1.2 ClientHello on the DTLS 1.2 channel containing the renegotiation_info extension indicating valid client_verify_data, and observe the TSF successfully completes the handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "802bc373-46ed-4411-bc92-e4473e07f072": {
            "testListUUID": "e47fce42-1a55-4a82-944f-1198d3472b8d",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, the evaluator shall send an initial ClientHello containing a valid renegotiation extension, \n                        send a new DTLS 1.2 ClientHello on the DTLS 1.2 channel with the signaling ciphersuite value, TLS_ EMPTY_RENEGOTIATION_INFO_SCSV, and observe that the TSF silently drops the message or terminates the session.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., handshake failure) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "85a95060-0516-4621-ac32-2bddaf90c2a0": {
            "testListUUID": "e47fce42-1a55-4a82-944f-1198d3472b8d",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, for each DTLS 1.2 renegotiation method claimed in accordance with RFC 5746, \n                        the evaluator shall send an initial ClientHello indicating the method, send a new DTLS 1.2 ClientHello on the DTLS 1.2 channel\n                        without a renegotiation_info extension, and observe that the TSF silently drops the message or terminates the session.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., unexpected message) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "abf2aa8d-4efa-4da4-a003-e23a0638fefa": {
            "testListUUID": "e47fce42-1a55-4a82-944f-1198d3472b8d",
            "id": "",
            "objective": "[conditional]: If the TSF allows renegotiation, for each DTLS 1.2 renegotiation method claimed in accordance with RFC 5746, \n                        the evaluator shall send an initial ClientHello indicating the method, \n                        send a new DTLS 1.2 ClientHello on the DTLS 1.2 channel with a renegotiation_info extension indicating an invalid \n                        client_verify_data value (modify a byte of a valid value), and observe that the TSF silently drops the message or \n                        terminates the session.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., unexpected message) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1f11a564-b24f-49b2-a1e5-e922320455be": {
            "testListUUID": "e47fce42-1a55-4a82-944f-1198d3472b8d",
            "id": "",
            "objective": "[conditional] If the TSF supports DTLS 1.3, or if the TSF rejects renegotiation for DTLS 1.2, then for each such version, \n                        the evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate the version and reject renegotiation. \n                        The evaluator shall initiate a valid initial session for the specified version, send a valid ClientHello on the non-renegotiable DTLS channel, and observe that the TSF silently drops the message or terminates the session.\n                        <p><b>Note:</b> If the TSF terminates the session, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., unexpected message) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "45f6f279-c9b8-4951-81da-04041615ffdb": {
            "testListUUID": "4a0f9a83-d656-4da0-ab64-e4be6e56e0d4",
            "id": "",
            "objective": "\n                    (renegotiation attempt) For each of the following sub-tests, the evaluator shall establish a compliant DTLS channel with an initial handshake that uses the indicated secure renegotiation method for the version indicated. \n                    Without closing the session, the evaluator shall send a second ClientHello within the channel specific to the version as indicated:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "e47fce42-1a55-4a82-944f-1198d3472b8d"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.5": {
    "title": "DTLS Server Support for Session Resumption",
    "cc_id": "FCS_DTLSS_EXT.5",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "eaebf1b6-75b6-49e3-ae81-f3f2d00a66ce"
      ],
      "selections": [
        "8c275a1d-9902-4d5f-a404-6afb0b997e8b"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption when acting as a DTLS server.\n          ",
      "dependencies": "FCS_DTLSS_EXT.1 DTLS Server Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "252a265b-0661-4050-87bd-272d535bde77": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "38d8b01a-fef4-4f28-b31a-cede442d762b": {
        "elementXMLID": "fcs_dtlss_ext-5-1",
        "selectableGroups": {
          "group-93": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "9469c214-cde4-436e-9029-dd0f38644702",
              "a037746c-ef9a-4d1c-8638-77bc6bdda612",
              "98829756-a865-4a56-a5d5-88ee65ca1239"
            ]
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall support session resumption as a DTLS server via the use of "
          },
          {
            "selections": "group-93"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "9469c214-cde4-436e-9029-dd0f38644702": {
            "type": "selectable",
            "uuid": "9469c214-cde4-436e-9029-dd0f38644702",
            "id": "fcs_dtlss_ext.5.1_1",
            "description": "session ID in accordance with RFC 5246",
            "exclusive": false,
            "nestedGroups": []
          },
          "a037746c-ef9a-4d1c-8638-77bc6bdda612": {
            "type": "selectable",
            "uuid": "a037746c-ef9a-4d1c-8638-77bc6bdda612",
            "id": "fcs_dtlss_ext.5.1_2",
            "description": "tickets in accordance with RFC 5077",
            "exclusive": false,
            "nestedGroups": []
          },
          "98829756-a865-4a56-a5d5-88ee65ca1239": {
            "type": "selectable",
            "uuid": "98829756-a865-4a56-a5d5-88ee65ca1239",
            "id": "dtlss_v13_resumption",
            "description": "PSK and tickets in accordance with RFC 8446",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"session resumption\" is selected in FCS_DTLSS_EXT.1.1.\n              </p> <p>\n                The ST author indicates which session resumption mechanisms are supported. If DTLS 1.2 is supported, one or both of the first\n                two options, \"session ID in accordance with RFC 5246\" and \"tickets in accordance with RFC 5077\" are claimed. If DTLS 1.3 is\n                supported, \"PSK and tickets in accordance with RFC 8446\" is selected, and the selection-based SFR FCS_DTLSS_EXT.6 must also\n                be claimed.\n              </p> <p>\n                While it is possible to perform session resumption using PSK ciphersuites in DTLS 1.2, this is uncommon. Validation of key establishment and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered\n                in FCS_DTLSS_EXT.1.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "af44593e-4b52-4d19-8dd6-fc00c6416f5e": {
        "tss": "<p>\n                  The evaluator shall examine the TSS and confirm that the DTLS server protocol description includes a description of the supported resumption mechanisms.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "db3aabf8-871e-424f-832d-a7590ebf4b3c": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "8e03fd0a-a02a-4b75-8103-6df3a47672ee",
              "bd31cb83-bfa8-43ae-b115-ba22cf876fb2"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "8e03fd0a-a02a-4b75-8103-6df3a47672ee": {
            "testListUUID": "db3aabf8-871e-424f-832d-a7590ebf4b3c",
            "id": "dtls-server-successful-resumption",
            "objective": "For each supported version, and for each supported resumption method for that version, \n                    the evaluator shall establish a compliant initial DTLS session with the TOE for the version using the specified method. \n                    The evaluator shall close the successful session and initiate resumption using the specified mechanism. \n                    The evaluator shall observe that the TSF successfully establishes the resumed session in accordance with the requirements. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bd31cb83-bfa8-43ae-b115-ba22cf876fb2": {
            "testListUUID": "db3aabf8-871e-424f-832d-a7590ebf4b3c",
            "id": "",
            "objective": "For each supported version and each supported resumption method for that version, \n                    the evaluator shall send a compliant ClientHello message supporting only the specific version and indicating support for the resumption method. \n                    The evaluator shall allow the TOE and test client to continue with the compliant handshake until resumption information is established but then cause a fatal error to terminate the session. \n                    The evaluator shall then send a new ClientHello in an attempt to resume the session with the resumption information provided \n                    and verify that the TSF does not resume the session, but instead silently drops the message, terminates the session, or completes a full handshake, ignoring the resumption information.\n                    <p><b>Note:</b> For DTLS 1.2, resumption information should be established at the point the TSF sends a ServerHello, either acknowledging the session-based resumption \n                      or acknowledging support for ticket-based resumption and sending a NewSessionTicket handshake message. \n                      A DTLS 1.2 session can then be terminated by sending a modified finished message. \n                      For DTLS 1.3, the NewSessionTicket message is sent after the finished message; once received by the client, the session can be terminated by modifying a byte of the encrypted application data. \n                    </p> <p>\n                      To terminate the DTLS session, it might be necessary to continue sending the invalid finished or application message until the TSF times out. If the TSF terminates the session or responds with a full handshake ignoring the resumption information, the test is successful. If the TSF silently drops the ClientHello containing the resumption information of the failed session, the evaluator shall continue sending the message until the TSF times out.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_DTLSS_EXT.6": {
    "title": "DTLS Server DTLS 1.3 Resumption Refinements",
    "cc_id": "FCS_DTLSS_EXT.6",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [],
      "selections": [
        "98829756-a865-4a56-a5d5-88ee65ca1239"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption behavior specific to DTLS 1.3 when acting as a DTLS server.\n          ",
      "dependencies": "FCS_DTLSS_EXT.1 DTLS Server Protocol<br/>\n            FCS_DTLSS_EXT.5 DTLS Server Support for Session Resumption\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "7edca406-5f07-4309-aa5c-c8e368684b42": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "5b2ab55f-ccc4-4ff8-87d7-3514fc860a59": {
        "elementXMLID": "fcs_dtlss_ext-6-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall support DTLS 1.3 resumption using PSK with psk_key_exchange_modes extension with the value psk_dhe_ke.  \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "74855138-7f93-4bf2-b634-a3dc7881142c": {
        "elementXMLID": "fcs_dtlss_ext-6-2",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall ignore early data received in DTLS 1.3 sessions.\n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if DTLS 1.3 is supported and \"PSK and tickets in accordance with RFC 8446\" is selected in FCS_DTLSS_EXT.5.1.\n              </p> <p>\n                RFC 8446 allows pre-shared keys to be used directly and also allows early data to be protected using only the pre-shared key.\n                This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key establishment to ensure perfect forward secrecy for\n                all sessions.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "9e5c543b-6f8e-454d-b1ae-d2d1f1ed4e49": {
        "tss": "<p>\n                  The evaluator shall examine the TSS to confirm that the DTLS description includes details on session resumption for DTLS 1.3, \n                  describes each application capable of using DTLS 1.3 with PSK, and describes how the TSF and application respond to client attempts to use early data (including via logging or observable responses). \n                  The evaluator shall confirm that the DTLS description shows that only the psk_dhe_ke psk_key_exchange_modes is supported and that early information is ignored. \n                </p>",
        "introduction": "",
        "guidance": "<p>\n                  The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. \n                </p>",
        "testIntroduction": "The evaluator shall follow the operational guidance to configure the TSF to negotiate DTLS 1.3 and shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "67d74704-55e9-4c78-9e41-78f02757891f": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "d5a9da42-926f-4886-87ef-2815e6568ffc",
              "516f777f-3e2d-412c-9295-e504aebbf4d5"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "d5a9da42-926f-4886-87ef-2815e6568ffc": {
            "testListUUID": "67d74704-55e9-4c78-9e41-78f02757891f",
            "id": "",
            "objective": "The evaluator shall attempt a resumed session (see FCS_DTLSS_EXT.5 &lt;xref to=\"dtls-server-successful-resumption\"/&gt;) but using psk_ke mode as the value for the psk_key_exchange_modes extension in the resumption ClientHello. \n                    The evaluator shall observe that the TSF refuses to resume the session, by silently dropping the message, by completing a full DTLS 1.3 handshake, or by terminating the session.\n                    <p><b>Note:</b> If the TSF terminates the session or completes a full DTLS 1.3 handshake, the test is successful. If the TSF silently drops the message, the evaluator shall continue sending the ClientHello message until the TSF times out. It is preferred that the TSF logs a fatal error alert message (e.g., illegal parameter) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without logging a fatal error alert). \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "516f777f-3e2d-412c-9295-e504aebbf4d5": {
            "testListUUID": "67d74704-55e9-4c78-9e41-78f02757891f",
            "id": "",
            "objective": "\n                    \n                    The evaluator shall establish a valid DTLS 1.3 session with the TOE and send the data as application data after the finished messages have been verified, \n                    and observe the response. The evaluator shall then configure the TOE to clear the response and initiate a resumed session\n                    (see FCS_DTLSS_EXT.5 &lt;xref to=\"dtls-server-successful-resumption\"/&gt;) with a test DTLS 1.3 client attempting to provide\n                    the same data in early data. \n                    The evaluator shall observe that the TSF does not react to the early data as it did when presented as application data \n                    after the finished messages, indicating that the data was ignored.\n                    <p><b>Note:</b> The specific early data used may depend on the applications calling the DTLS session and should be selected to initiate an observable response in the TSF or calling application as described in the ST. \n                      For HTTPS, for example, the early data can be an HTTP POST that updates data at the TOE, which can then be observed via a user interface for the application if the data was \n                      posted or via application logging indicating that the operation failed.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.1": {
    "title": "TLS Client Protocol",
    "cc_id": "FCS_TLSC_EXT.1",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "6f4ccf3d-f268-4462-a602-02bfb4823d60"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "The following actions should be auditable if FAU_GEN Security Audit Data Generation is included in the PP, PP-Module, functional package, or ST: <ul><li>Establishment and termination of a TLS session </li> <li>Failure to establish a TLS session </li> <li>Failure to verify presented identifier </li> </ul> ",
      "componentLeveling": " requires the TSF to implement TLS as a client in the specified manner.\n          ",
      "dependencies": "\n            FCS_CKM.1 Cryptographic Key Generation<br/>\n            FCS_CKM.2 Cryptographic Key Distribution<br/>\n            FCS_COP.1 Cryptographic Operation<br/>\n            FCS_RBG.1 Random Bit Generation (RBG)<br/>\n            FIA_X509_EXT.1 X.509 Certificate Validation<br/>\n            FIA_X509_EXT.2 X.509 Certificate Authentication\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "de6758b3-bc52-41f6-b13b-89263e918502": {
        "description": "Failure to establish a TLS session",
        "items": [
          {
            "info": "Reason for failure",
            "optional": false
          }
        ],
        "optional": false
      },
      "f05d4e99-4889-4665-be1b-5848d1420722": {
        "description": "Failure to verify presented identifier",
        "items": [
          {
            "info": "Presented identifier and reference identifier",
            "optional": false
          }
        ],
        "optional": false
      },
      "4edc73dc-acdd-4b84-8017-9c8cca4d58c6": {
        "description": "Establishment and termination of a TLS session",
        "items": [
          {
            "info": "Non-TOE endpoint of connection",
            "optional": false
          }
        ],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "99f5b51a-1ff5-4e94-93b5-d9881dd2bc35": {
        "elementXMLID": "fel-client",
        "selectableGroups": {
          "group-94": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "e0b31b2b-5c56-4ce7-bef2-6d5c9d970a00",
              "4f3ecaa8-b055-41ec-9931-dfba56a80aef"
            ]
          },
          "group-95": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "922e94db-8619-47cc-8c30-befcc1011f00",
              "5c36d97c-27e5-4b65-bd33-381033966ea5",
              "faa33367-7fd1-43d8-9aad-a36ece92aa18",
              "7f702f40-6356-4b3a-b8b2-57475be7a097"
            ]
          }
        },
        "title": [
          {
            "text": " The TSF shall implement\n              "
          },
          {
            "selections": "group-94"
          },
          {
            "text": " as a client that supports additional functionality for session renegotiation protection and\n              "
          },
          {
            "selections": "group-95"
          },
          {
            "text": "\n              and shall abort attempts by a server to negotiate any TLS or SSL version prior to TLS 1.2 (RFC 5246).\n            "
          }
        ],
        "selectables": {
          "e0b31b2b-5c56-4ce7-bef2-6d5c9d970a00": {
            "type": "selectable",
            "uuid": "e0b31b2b-5c56-4ce7-bef2-6d5c9d970a00",
            "id": "fcs_tlsc_ext.1.1_1",
            "description": "TLS 1.2 (RFC 5246)",
            "exclusive": false,
            "nestedGroups": []
          },
          "4f3ecaa8-b055-41ec-9931-dfba56a80aef": {
            "type": "selectable",
            "uuid": "4f3ecaa8-b055-41ec-9931-dfba56a80aef",
            "id": "fcs_tlsc_ext.1.1_2",
            "description": "TLS 1.3 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "922e94db-8619-47cc-8c30-befcc1011f00": {
            "type": "selectable",
            "uuid": "922e94db-8619-47cc-8c30-befcc1011f00",
            "id": "tlsc_mutual_auth",
            "description": "mutual authentication",
            "exclusive": false,
            "nestedGroups": []
          },
          "5c36d97c-27e5-4b65-bd33-381033966ea5": {
            "type": "selectable",
            "uuid": "5c36d97c-27e5-4b65-bd33-381033966ea5",
            "id": "tlsc_downgrade_protection",
            "description": "supplemental downgrade protection",
            "exclusive": false,
            "nestedGroups": []
          },
          "faa33367-7fd1-43d8-9aad-a36ece92aa18": {
            "type": "selectable",
            "uuid": "faa33367-7fd1-43d8-9aad-a36ece92aa18",
            "id": "tlsc_resumption",
            "description": "session resumption",
            "exclusive": false,
            "nestedGroups": []
          },
          "7f702f40-6356-4b3a-b8b2-57475be7a097": {
            "type": "selectable",
            "uuid": "7f702f40-6356-4b3a-b8b2-57475be7a097",
            "id": "fcs_tlsc_ext.1.1_3",
            "description": "no optional functionality",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"TLS as a client\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n              Session renegotiation protection is required for both TLS 1.2 and TLS 1.3, and the ST must include the requirements from\n              FCS_TLSC_EXT.4. Within FCS_TLSC_EXT.4, options for implementation of secure session renegotiation for TLS 1.2, or rejecting\n              renegotiation requests are claimed.  \n              </p> <p>\n              The ST author will claim supported TLS versions and optional functionality as appropriate for the claimed versions. \n              </p> <p>\n                If \"mutual authentication\" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.2. \n                If the TOE implements TLS with mutual authentication, this selection must be made.\n              </p> <p>\n                If \"supplemental downgrade protection\" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.3.\n                This is claimed when both TLS 1.2 and TLS 1.3 are supported. Note that TLS 1.1 or below downgrade protection in TLS is used\n                to notify a client that the server is capable of supporting DTLS 1.2 or DTLS 1.3, when it negotiates a TLS 1.1 session\n                because it received a ClientHello indicating maximum support for TLS 1.1. Since this FP does not allow negotiation of TLS\n                1.1 or below, it is not necessary to claim such support.\n              </p> <p>\n                If \"session resumption\" is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.5. \n              </p>"
      },
      "28176b0f-9b3a-4c28-b338-a14bc8c18a6e": {
        "elementXMLID": "fel-tlsc-ciphers",
        "selectableGroups": {
          "group-96": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlsc_ext.1.2_1",
              "f01728a0-7c62-4f5a-8492-6209ee3f5cb8"
            ]
          },
          "fcs_tlsc_ext.1.2_1": {
            "description": [
              {
                "text": "TLS 1.2 ciphersuites:"
              },
              {
                "groups": [
                  "group-98"
                ]
              },
              {
                "text": "and shall not offer other TLS 1.2 ciphersuites,"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-98": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fd922427-89ee-4cbe-b211-dffabe8eed1a",
              "0dd70370-d4dd-49a1-98fc-62ebd749f9ac",
              "c8ac5586-da58-4a27-8294-7a6807d3c4bd",
              "fe6daa59-09a0-4630-976d-1d0228c852d2",
              "377c0898-ea6e-4c4d-bf4a-b7145cfa8e88",
              "bfb34fb0-ce1f-4b96-a3a3-7649db564e72",
              "fcs_tlsc_ext.1.2_8"
            ]
          },
          "fcs_tlsc_ext.1.2_8": {
            "description": [
              {
                "text": "ciphersuites using pre-shared secrets:"
              },
              {
                "groups": [
                  "group-100"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-100": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "a667e8b3-2fec-4c60-98ff-0bd1fdf49cad",
              "f9ea1680-11eb-414d-99a7-db41e39a1c18",
              "d03689fe-73a0-4417-9904-522dece5b961"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following &lt;assignable&gt;list of supported TLS ciphersuites &lt;/assignable&gt; , offering the supported ciphersuites in a ClientHello message in preference order: &lt;assignable&gt;list of supported ciphersuites &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n              The TSF shall be able to support the following\n          "
          },
          {
            "selections": "group-96"
          },
          {
            "text": "\n              offering the supported ciphersuites in a ClientHello message in preference order: \n              "
          },
          {
            "assignment": "03110ea3-ba9a-4be6-8163-7b26f3ba38fc"
          },
          {
            "text": ".\n          "
          }
        ],
        "selectables": {
          "fd922427-89ee-4cbe-b211-dffabe8eed1a": {
            "type": "selectable",
            "uuid": "fd922427-89ee-4cbe-b211-dffabe8eed1a",
            "id": "fcs_tlsc_ext.1.2_2",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "0dd70370-d4dd-49a1-98fc-62ebd749f9ac": {
            "type": "selectable",
            "uuid": "0dd70370-d4dd-49a1-98fc-62ebd749f9ac",
            "id": "fcs_tlsc_ext.1.2_3",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "c8ac5586-da58-4a27-8294-7a6807d3c4bd": {
            "type": "selectable",
            "uuid": "c8ac5586-da58-4a27-8294-7a6807d3c4bd",
            "id": "fcs_tlsc_ext.1.2_4",
            "description": "TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "fe6daa59-09a0-4630-976d-1d0228c852d2": {
            "type": "selectable",
            "uuid": "fe6daa59-09a0-4630-976d-1d0228c852d2",
            "id": "fcs_tlsc_ext.1.2_5",
            "description": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "377c0898-ea6e-4c4d-bf4a-b7145cfa8e88": {
            "type": "selectable",
            "uuid": "377c0898-ea6e-4c4d-bf4a-b7145cfa8e88",
            "id": "fcs_tlsc_ext.1.2_6",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "bfb34fb0-ce1f-4b96-a3a3-7649db564e72": {
            "type": "selectable",
            "uuid": "bfb34fb0-ce1f-4b96-a3a3-7649db564e72",
            "id": "fcs_tlsc_ext.1.2_7",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "a667e8b3-2fec-4c60-98ff-0bd1fdf49cad": {
            "type": "selectable",
            "uuid": "a667e8b3-2fec-4c60-98ff-0bd1fdf49cad",
            "id": "fcs_tlsc_ext.1.2_9",
            "description": "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442",
            "exclusive": false,
            "nestedGroups": []
          },
          "f9ea1680-11eb-414d-99a7-db41e39a1c18": {
            "type": "selectable",
            "uuid": "f9ea1680-11eb-414d-99a7-db41e39a1c18",
            "id": "fcs_tlsc_ext.1.2_10",
            "description": "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "d03689fe-73a0-4417-9904-522dece5b961": {
            "type": "selectable",
            "uuid": "d03689fe-73a0-4417-9904-522dece5b961",
            "id": "fcs_tlsc_ext.1.2_11",
            "description": "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "f01728a0-7c62-4f5a-8492-6209ee3f5cb8": {
            "type": "selectable",
            "uuid": "f01728a0-7c62-4f5a-8492-6209ee3f5cb8",
            "id": "fcs_tlsc_ext.1.2_12",
            "description": "TLS 1.3 ciphersuite TLS_AES_256_GCM_SHA384 as defined in RFC 8446, and shall not offer other TLS 1.3 ciphersuites",
            "exclusive": false,
            "nestedGroups": []
          },
          "03110ea3-ba9a-4be6-8163-7b26f3ba38fc": {
            "id": "fcs_tlsc_ext.1.2_13",
            "leadingText": "",
            "description": "list of supported ciphersuites",
            "trailingText": "",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              The ST author should select the ciphersuites that are supported, and must select at least one ciphersuite for each TLS version\n              supported. Pre-shared secret ciphersuites for TLS 1.2 are only claimed as required by a specific PP. The ciphersuites to be\n              tested in the evaluated configuration are limited by this requirement. However, this requirement does not restrict the TOE's\n              ability to propose additional ciphersuites beyond the ones listed in this requirement in its ClientHello\n              message as indicated in the ST. That is, the TOE may propose any ciphersuite not excluded by this element, but the evaluation\n              will only test ciphersuites from the above list. It is necessary to limit the ciphersuites that can be used administratively in\n              an evaluated configuration on the server in the test environment. \n              </p> <p>\n              TLS 1.3 ciphersuites are claimed if support for TLS 1.3 is claimed in FCS_TLSC_EXT.1.1. \n              The assignment of preference order provides an ordered list of all supported ciphersuites with the most preferred ciphersuites\n              listed first. \n              </p> <p>\n              While mandatory for RFC 8446, TLS_AES_128_GCM_SHA256 is disallowed by this SFR.\n              </p> <p>\n              In addition to the supported ciphersuites, the ST author indicates the order of ciphersuites included in the ClientHello,\n              indicating the preferred ciphersuites for server negotiation.  To eliminate the need to produce duplicate lists, it is recommended to complete the selected list of ciphersuites in the order that they are presented and then complete the following assignment by saying that the presentation order is the same as in the previous list. If more than one ordering is possible (e.g., the order is constructed dynamically based on some property of the system on which the TOE is running) the ST uses the assignment to specify a dynamic ordering and the describes in the TSS the conditions for presenting the ordering. It is recommended, but not required, that the TLS 1.3 ciphersuites\n              claimed are listed before TLS 1.2 ciphersuites, and that any other ciphersuites are listed last among the TLS 1.3 ciphersuites.\n              </p>"
      },
      "a5139af7-6325-4242-9c70-71c7010f4e64": {
        "elementXMLID": "fcs_tlsc_ext-1-3",
        "selectableGroups": {},
        "title": [
          {
            "description": "\n            The TSF shall not offer ClientHello messages indicating the following: \n            <ul><li>null encryption</li> <li>support for anonymous servers</li> <li>use of cryptography that is deprecated, export-grade, or otherwise disallowed for encryption, including DES, 3DES, RC2, RC4, or IDEA</li> <li>use of MD5 or SHA-1 for key derivation</li></ul> and shall abort sessions where a server attempts to negotiate ciphersuites not enumerated in the ClientHello message.\n          "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This element explicitly excludes ciphersuites defined for TLS 1.2 and previous TLS or SSL versions that might be included in the \n                ClientHello from a TSF that supports TLS 1.2 (as the only supported version, or as a fallback version for TLS 1.3 clients \n                negotiating with potential DTLS 1.2 servers). The requirement also constrains the choice of TLS 1.3 ciphersuites to the single TLS_AES_GCM_SHA384 ciphersuite specified in RFC 8446. In addition, this requirement prohibits Using Raw Public Keys in Transport Layer Security and Datagram\n                Transport Layer Security (RFC 7250) for server certificates.\n              </p> <p>\n                Ciphersuites for TLS 1.2 are of the form TLS_(key establishment algorithm)_WITH_(encryption algorithm)_(message digest algorithm), and\n                are listed in the TLS parameters section of the internet assignments at iana.org. This requirement constrains the value of \n                (encryption algorithm) and (message digest algorithm).\n              </p> <p>\n                Ciphersuites for TLS 1.3 are of the form TLS_(AEAD)_(HASH), where (AEAD) is of the form (encryption algorithm)_(symmetric key \n                length)_(mode) for an authenticated encryption with associated data specification (RFC 5116). This requirement constrains the \n                value of the (encryption algorithm) component of (AEAD) and the value of (HASH). \n              </p>"
      },
      "0c8ccf27-66ea-4cc3-a13c-b61b3a1bc7a8": {
        "elementXMLID": "fcs_tlsc_ext-1-4",
        "selectableGroups": {
          "group-101": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fb1cf65b-3600-4008-849a-26fea065b5d9",
              "cb5aaa77-ef70-4ecf-8f0f-98bc028767ae"
            ]
          },
          "group-102": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "2ba68243-13cc-424c-8586-2400c7b531f8",
              "ac1c5a7d-754b-479a-b988-cf46232d8465",
              "98305e02-6602-4ded-bf3e-9f1ec5d5096b"
            ]
          },
          "group-103": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlsc_ext.1.4_6",
              "fcs_tlsc_ext.1.4_12",
              "fcs_tlsc_ext.1.4_15",
              "f2e4792d-aad2-4d3b-b247-86c790261772",
              "86d48b2d-78b0-4235-aab7-66f6184ef662",
              "fcs_tlsc_ext.1.4_25",
              "9801e1a9-e7db-42a4-8fb4-1a665d44a2b8"
            ]
          },
          "fcs_tlsc_ext.1.4_6": {
            "description": [
              {
                "text": "signature_algorithms_cert extension (RFC 8446) indicating support for"
              },
              {
                "groups": [
                  "group-105"
                ]
              },
              {
                "text": ", and"
              },
              {
                "groups": [
                  "group-107"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-105": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "8f0615f8-783d-48eb-b8ee-b9b300f4aa73",
              "11acc2e7-a3c6-45a7-b7c8-81e78e058e9c"
            ]
          },
          "group-107": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "93a315f7-c70d-4dc6-8f16-1960fe81b7e0",
              "3f174372-4f89-4bb4-83ba-d57673cb0c36",
              "4688c297-7432-4bd0-a710-a8a88abc81a9"
            ]
          },
          "fcs_tlsc_ext.1.4_12": {
            "description": [
              {
                "text": "supported_versions extension (RFC 8446) indicating support for TLS 1.3 and"
              },
              {
                "groups": [
                  "group-109"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-109": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "6f487148-a111-428e-ad12-6be73d353233",
              "94768f5f-83e6-4c85-98d1-f92ac77c1dc3"
            ]
          },
          "fcs_tlsc_ext.1.4_15": {
            "description": [
              {
                "text": "supported_groups extension indicating support for"
              },
              {
                "groups": [
                  "group-111"
                ]
              },
              {
                "text": "and"
              },
              {
                "groups": [
                  "group-113"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-111": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "b3b09002-d4c5-45be-a12d-fb41d9704f86",
              "c4513386-1c32-4d70-abdb-7baeefc79a55",
              "78d590ba-a118-49bf-b8a1-9b4fa7cbb807"
            ]
          },
          "group-113": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "6c8591a5-45fe-4039-bc05-bbb824244324",
              "80edf734-a209-46e8-97e6-0bf88118634f",
              "444e9abc-c4bf-4a71-8e86-635e4b9ded90",
              "418c71de-ff15-4750-9faf-e5e885bfff42"
            ]
          },
          "fcs_tlsc_ext.1.4_25": {
            "description": [
              {
                "text": "extended_master_secret extension (RFC 7627) enforcing server support, and"
              },
              {
                "groups": [
                  "group-115"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-115": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "582ef00a-5e0b-4634-a36e-caa7e2be371b",
              "0d982449-3fab-4ebf-8ee3-02199a3d114b"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following TLS ClientHello message extensions: &lt;ul&gt;&lt;li&gt;signature_algorithms extension (RFC 8446) indicating support for &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;ecdsa_secp384r1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pkcs1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;/selectables&gt; , and &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;rsa_pss_pss_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pss_rsae_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;no other signature algorithms &lt;/selectable&gt; &lt;/selectables&gt; and &lt;/li&gt; &lt;assignable&gt;other supported TLS extensions &lt;/assignable&gt; &lt;br/&gt;and shall not send the following extensions: &lt;ul&gt;&lt;li&gt;early_data &lt;/li&gt; &lt;li&gt;psk_key_exchange_modes indicating PSK only mode. &lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt; &lt;/title&gt; ",
        "title": [
          {
            "description": "\n           The TSF shall be able to support the following TLS ClientHello message extensions: \n            signature_algorithms extension (RFC 8446) indicating support for"
          },
          {
            "selections": "group-101"
          },
          {
            "description": ", and"
          },
          {
            "selections": "group-102"
          },
          {
            "description": "<ul><li>\n               and\n             </li></ul>"
          },
          {
            "selections": "group-103"
          },
          {
            "description": "\n               and shall not send the following extensions: <ul><li>early_data</li> <li>psk_key_exchange_modes indicating PSK only mode.</li></ul>"
          }
        ],
        "selectables": {
          "fb1cf65b-3600-4008-849a-26fea065b5d9": {
            "type": "selectable",
            "uuid": "fb1cf65b-3600-4008-849a-26fea065b5d9",
            "id": "fcs_tlsc_ext.1.4_1",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "cb5aaa77-ef70-4ecf-8f0f-98bc028767ae": {
            "type": "selectable",
            "uuid": "cb5aaa77-ef70-4ecf-8f0f-98bc028767ae",
            "id": "fcs_tlsc_ext.1.4_2",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "2ba68243-13cc-424c-8586-2400c7b531f8": {
            "type": "selectable",
            "uuid": "2ba68243-13cc-424c-8586-2400c7b531f8",
            "id": "fcs_tlsc_ext.1.4_3",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "ac1c5a7d-754b-479a-b988-cf46232d8465": {
            "type": "selectable",
            "uuid": "ac1c5a7d-754b-479a-b988-cf46232d8465",
            "id": "fcs_tlsc_ext.1.4_4",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "98305e02-6602-4ded-bf3e-9f1ec5d5096b": {
            "type": "selectable",
            "uuid": "98305e02-6602-4ded-bf3e-9f1ec5d5096b",
            "id": "fcs_tlsc_ext.1.4_5",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "8f0615f8-783d-48eb-b8ee-b9b300f4aa73": {
            "type": "selectable",
            "uuid": "8f0615f8-783d-48eb-b8ee-b9b300f4aa73",
            "id": "fcs_tlsc_ext.1.4_7",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "11acc2e7-a3c6-45a7-b7c8-81e78e058e9c": {
            "type": "selectable",
            "uuid": "11acc2e7-a3c6-45a7-b7c8-81e78e058e9c",
            "id": "fcs_tlsc_ext.1.4_8",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "93a315f7-c70d-4dc6-8f16-1960fe81b7e0": {
            "type": "selectable",
            "uuid": "93a315f7-c70d-4dc6-8f16-1960fe81b7e0",
            "id": "fcs_tlsc_ext.1.4_9",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "3f174372-4f89-4bb4-83ba-d57673cb0c36": {
            "type": "selectable",
            "uuid": "3f174372-4f89-4bb4-83ba-d57673cb0c36",
            "id": "fcs_tlsc_ext.1.4_10",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "4688c297-7432-4bd0-a710-a8a88abc81a9": {
            "type": "selectable",
            "uuid": "4688c297-7432-4bd0-a710-a8a88abc81a9",
            "id": "fcs_tlsc_ext.1.4_11",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "6f487148-a111-428e-ad12-6be73d353233": {
            "type": "selectable",
            "uuid": "6f487148-a111-428e-ad12-6be73d353233",
            "id": "fcs_tlsc_ext.1.4_13",
            "description": "TLS 1.2",
            "exclusive": false,
            "nestedGroups": []
          },
          "94768f5f-83e6-4c85-98d1-f92ac77c1dc3": {
            "type": "selectable",
            "uuid": "94768f5f-83e6-4c85-98d1-f92ac77c1dc3",
            "id": "fcs_tlsc_ext.1.4_14",
            "description": "no other versions",
            "exclusive": false,
            "nestedGroups": []
          },
          "b3b09002-d4c5-45be-a12d-fb41d9704f86": {
            "type": "selectable",
            "uuid": "b3b09002-d4c5-45be-a12d-fb41d9704f86",
            "id": "fcs_tlsc_ext.1.4_16",
            "description": "secp384r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "c4513386-1c32-4d70-abdb-7baeefc79a55": {
            "type": "selectable",
            "uuid": "c4513386-1c32-4d70-abdb-7baeefc79a55",
            "id": "fcs_tlsc_ext.1.4_17",
            "description": "ffdhe3072 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "78d590ba-a118-49bf-b8a1-9b4fa7cbb807": {
            "type": "selectable",
            "uuid": "78d590ba-a118-49bf-b8a1-9b4fa7cbb807",
            "id": "fcs_tlsc_ext.1.4_18",
            "description": "ffdhe4096 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "6c8591a5-45fe-4039-bc05-bbb824244324": {
            "type": "selectable",
            "uuid": "6c8591a5-45fe-4039-bc05-bbb824244324",
            "id": "fcs_tlsc_ext.1.4_19",
            "description": "secp521r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "80edf734-a209-46e8-97e6-0bf88118634f": {
            "type": "selectable",
            "uuid": "80edf734-a209-46e8-97e6-0bf88118634f",
            "id": "fcs_tlsc_ext.1.4_20",
            "description": "ffdhe6144 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "444e9abc-c4bf-4a71-8e86-635e4b9ded90": {
            "type": "selectable",
            "uuid": "444e9abc-c4bf-4a71-8e86-635e4b9ded90",
            "id": "fcs_tlsc_ext.1.4_21",
            "description": "ffdhe8192 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "418c71de-ff15-4750-9faf-e5e885bfff42": {
            "type": "selectable",
            "uuid": "418c71de-ff15-4750-9faf-e5e885bfff42",
            "id": "fcs_tlsc_ext.1.4_22",
            "description": "no other supported groups",
            "exclusive": false,
            "nestedGroups": []
          },
          "f2e4792d-aad2-4d3b-b247-86c790261772": {
            "type": "selectable",
            "uuid": "f2e4792d-aad2-4d3b-b247-86c790261772",
            "id": "fcs_tlsc_ext.1.4_23",
            "description": "key_share extension (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "86d48b2d-78b0-4235-aab7-66f6184ef662": {
            "type": "selectable",
            "uuid": "86d48b2d-78b0-4235-aab7-66f6184ef662",
            "id": "fcs_tlsc_ext.1.4_24",
            "description": "post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446), tls_cert_with_extern_psk (RFC 8773), and psk_key_exchange_modes (RFC 8446) indicating psk_dhe_ke (DHE or ECDHE) mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "582ef00a-5e0b-4634-a36e-caa7e2be371b": {
            "type": "selectable",
            "uuid": "582ef00a-5e0b-4634-a36e-caa7e2be371b",
            "id": "fcs_tlsc_ext.1.4_26",
            "description": "allowing legacy servers",
            "exclusive": false,
            "nestedGroups": []
          },
          "0d982449-3fab-4ebf-8ee3-02199a3d114b": {
            "type": "selectable",
            "uuid": "0d982449-3fab-4ebf-8ee3-02199a3d114b",
            "id": "fcs_tlsc_ext.1.4_27",
            "description": "no other enforcement mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "9801e1a9-e7db-42a4-8fb4-1a665d44a2b8": {
            "type": "selectable",
            "uuid": "9801e1a9-e7db-42a4-8fb4-1a665d44a2b8",
            "id": "fcs_tlsc_ext.1.4_28",
            "description": "no other extensions",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n             Support for the signature_algorithms extension is optional in RFC 5246 but is mandated for this functional package in accordance with RFC 9151. Support for the signature_algorithms extension is mandatory in RFC 8446 and remains so in this functional package. Whether the TOE's implementation conforms to RFC 5246, RFC 8446, or both is dependent on whether the TOE supports TLS 1.2, TLS 1.3, or both.\n           </p> <p>\n           If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, supported_versions, supported_groups, and key_share extensions are claimed in\n           accordance with RFC 8446 and the tls_cert_with_extern_psk extension is claimed in accordance with RFC 8773. \n           If TLS 1.3 is claimed, psk_key_exchange_modes indicating psk_dhe_ke mode is claimed in accordance with RFC 9151.\n           If TLS 1.3 is not claimed, supported_versions and key_share extensions are not claimed. \n           </p> <p>\n           If TLS 1.2 is\n           claimed, extended_master_secret extension must be claimed, with the ability to enforce server support, and optionally, the ability to\n           support legacy servers. The extended_master_secret extension (RFC 7627) selection cannot be claimed when TLS 1.3 is claimed.\n           </p> <p>\n             If TLS 1.2 is claimed and if DHE or ECDHE ciphersuites are claimed in FCS_TLSC_EXT.1.2, the supported_groups extension is claimed here with appropriate secp or ffdhe groups claimed.\n           </p> <p>\n             Other extensions may be supported; certain extensions and values may need to be claimed for SFRs defined outside of this package related to the calling applications.\n           </p>"
      },
      "6b80dd66-87db-4cf8-ada0-98b2c1f9bc3d": {
        "elementXMLID": "fel-present-identifier",
        "selectableGroups": {
          "group-116": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlsc_ext.1.5_1",
              "fcs_tlsc_ext.1.5_12",
              "c7f9edf4-e497-4497-a66b-178607ce58a1",
              "9652afa0-51b8-43d5-9f4f-99581c840e67"
            ]
          },
          "fcs_tlsc_ext.1.5_1": {
            "description": [
              {
                "text": "verify that a presented identifier of name type:"
              },
              {
                "groups": [
                  "group-118"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-118": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "4f20a148-e112-4fb5-9199-946715e3f388",
              "218204e3-0b0c-420f-80a8-a6e16bfb6841",
              "9bfb25b7-8a3b-4bbc-89f9-469075f04d92",
              "4cbe3c73-0972-458c-9370-7b840a4db82b",
              "b13dd7d1-267b-4d50-ba54-87960b873c1c",
              "6ae8b6ef-59d2-48fb-aad1-22c281b423f4",
              "7d48f096-d504-4f98-9eaf-49f589832192",
              "fcs_tlsc_ext.1.5_9"
            ]
          },
          "fcs_tlsc_ext.1.5_9": {
            "description": [
              {
                "groups": [
                  "021d3f14-c3ad-415b-a19f-c6f6f156c720"
                ]
              },
              {
                "text": "according to"
              },
              {
                "groups": [
                  "f8d92379-d578-4ace-a5be-2ef1f9264674"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "fcs_tlsc_ext.1.5_12": {
            "description": [
              {
                "text": "interface with a supported function requesting the TLS channel to pass"
              },
              {
                "groups": [
                  "group-120"
                ]
              },
              {
                "text": "for verification that a presented identifier"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-120": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "9b4f9204-003a-488d-a556-ecb4bc28b97e",
              "fcs_tlsc_ext.1.5_14",
              "fcs_tlsc_ext.1.5_16"
            ]
          },
          "fcs_tlsc_ext.1.5_14": {
            "description": [
              {
                "text": "names of"
              },
              {
                "groups": [
                  "0e0546c8-34da-49ef-ac01-c5458d2d07a8"
                ]
              },
              {
                "text": "extracted from the leaf certificate of a validated certification path"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "fcs_tlsc_ext.1.5_16": {
            "description": [
              {
                "text": "normalized representations of names of"
              },
              {
                "groups": [
                  "b82bfbfb-c98b-4de0-abb5-b7f21ac7a3bd"
                ]
              },
              {
                "text": "extracted from the leaf certificate of a validated certification path"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;verify that a presented identifier of name type: &lt;assignable&gt;supported name types &lt;/assignable&gt; &lt;/selectable&gt; &lt;selectable&gt;interface with a supported function requesting the TLS channel to pass &lt;selectables&gt;&lt;selectable&gt;the validated certification path &lt;/selectable&gt; &lt;selectable&gt;names of &lt;assignable&gt;specified types &lt;/assignable&gt; extracted from the leaf certificate of a validated certification path &lt;/selectable&gt; &lt;selectable&gt;normalized representations of names of &lt;assignable&gt;specified types &lt;/assignable&gt; extracted from the leaf certificate of a validated certification path &lt;/selectable&gt; &lt;/selectables&gt; for verification that a presented identifier &lt;/selectable&gt; &lt;selectable&gt;pass initial name constraints to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier &lt;/selectable&gt; &lt;selectable&gt;associate a PSK with a valid server with an identifier that &lt;/selectable&gt; &lt;/selectables&gt; matches a reference identifier for the requested TLS server and shall abort the session if no match is found. &lt;/title&gt; ",
        "title": [
          {
            "text": "\n              The TSF shall be able to "
          },
          {
            "selections": "group-116"
          },
          {
            "text": " \n              matches a reference identifier for the requested TLS server and shall abort the session if no match is found.\n            "
          }
        ],
        "selectables": {
          "4f20a148-e112-4fb5-9199-946715e3f388": {
            "type": "selectable",
            "uuid": "4f20a148-e112-4fb5-9199-946715e3f388",
            "id": "fcs_tlsc_ext.1.5_2",
            "description": "dNSName according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "218204e3-0b0c-420f-80a8-a6e16bfb6841": {
            "type": "selectable",
            "uuid": "218204e3-0b0c-420f-80a8-a6e16bfb6841",
            "id": "fcs_tlsc_ext.1.5_3",
            "description": "uniformResourceIdentifier according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "9bfb25b7-8a3b-4bbc-89f9-469075f04d92": {
            "type": "selectable",
            "uuid": "9bfb25b7-8a3b-4bbc-89f9-469075f04d92",
            "id": "fcs_tlsc_ext.1.5_4",
            "description": "SRVname according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "4cbe3c73-0972-458c-9370-7b840a4db82b": {
            "type": "selectable",
            "uuid": "4cbe3c73-0972-458c-9370-7b840a4db82b",
            "id": "fcs_tlsc_ext.1.5_5",
            "description": "Common Name conversion to dNSName according to RFC 5280 and RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "b13dd7d1-267b-4d50-ba54-87960b873c1c": {
            "type": "selectable",
            "uuid": "b13dd7d1-267b-4d50-ba54-87960b873c1c",
            "id": "fcs_tlsc_ext.1.5_6",
            "description": "directoryName according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "6ae8b6ef-59d2-48fb-aad1-22c281b423f4": {
            "type": "selectable",
            "uuid": "6ae8b6ef-59d2-48fb-aad1-22c281b423f4",
            "id": "fcs_tlsc_ext.1.5_7",
            "description": "iPAddress according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "7d48f096-d504-4f98-9eaf-49f589832192": {
            "type": "selectable",
            "uuid": "7d48f096-d504-4f98-9eaf-49f589832192",
            "id": "fcs_tlsc_ext.1.5_8",
            "description": "rfc822Name according to RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "021d3f14-c3ad-415b-a19f-c6f6f156c720": {
            "id": "fcs_tlsc_ext.1.5_10",
            "description": "other name type",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "f8d92379-d578-4ace-a5be-2ef1f9264674": {
            "id": "fcs_tlsc_ext.1.5_11",
            "description": "RFC number",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "9b4f9204-003a-488d-a556-ecb4bc28b97e": {
            "type": "selectable",
            "uuid": "9b4f9204-003a-488d-a556-ecb4bc28b97e",
            "id": "fcs_tlsc_ext.1.5_13",
            "description": "the validated certification path",
            "exclusive": false,
            "nestedGroups": []
          },
          "0e0546c8-34da-49ef-ac01-c5458d2d07a8": {
            "id": "fcs_tlsc_ext.1.5_15",
            "description": "specified types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "b82bfbfb-c98b-4de0-abb5-b7f21ac7a3bd": {
            "id": "fcs_tlsc_ext.1.5_17",
            "description": "specified types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "c7f9edf4-e497-4497-a66b-178607ce58a1": {
            "type": "selectable",
            "uuid": "c7f9edf4-e497-4497-a66b-178607ce58a1",
            "id": "fcs_tlsc_ext.1.5_18",
            "description": "pass initial name constraints to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier",
            "exclusive": false,
            "nestedGroups": []
          },
          "9652afa0-51b8-43d5-9f4f-99581c840e67": {
            "type": "selectable",
            "uuid": "9652afa0-51b8-43d5-9f4f-99581c840e67",
            "id": "fcs_tlsc_ext.1.5_19",
            "description": "associate a PSK with a valid server with an identifier that",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                The ST author claims the supported options for verifying that the server is associated with an expected reference identifier. The first option is claimed if the TSF implements name matching. The option \u201cinterface with a supported function\u2026\u201d is claimed if the validated certification path, names extracted from the subject field and/or subject alternate name extension of a leaf certificate of a validated certification path, or normalized representations of names extracted from the leaf certificate are passed to a supported function for matching. The option \u201cpass initial name constraints\u2026\u201d is claimed if the TSF formulates initial name constraints from the reference identifiers used by the certification path processing function. The final option is claimed if TLS 1.2 is supported and PSK ciphersuites are supported, and is used to associate the shared PSK with a known identifier.\n              </p><br/><br/><p>\n                If the TSF matches names, the rules for verification of identity are described in RFC 6125, Section 6 and RFC 5280, Section 7. If \"Common name conversion...\"\n              is claimed, both the subject field and the converted common name are matched.\n              The reference identifier is established by the user (e.g., entering a URL into a web browser or clicking a link), \n              by configuration (e.g., configuring the name of a mail or authentication server), \n              or by an application (e.g., a parameter of an API) depending on the supported function. \n              The client establishes all acceptable reference identifiers for matching against the presented identifiers as validated in the\n              server\u2019s certificate. \n              If the TSF performs matching of the reference identifiers to the identifiers provided in the server\u2019s certificate, \n              the first option is claimed and all supported name types are claimed. If the TSF presents the certificate \n              or the presented identifiers from the certificate to the supported function, the second option is claimed.\n              If the TSF constructs initial name constraints derived from the reference identifiers for validation during certification path\n              validation, the third option is claimed.\n              </p> <p>\n              In most cases where TLS servers are represented by DNS-type names, \n              the preferred method for verification is the Subject Alternative Name using DNS, URI, or Service Names. \n              Verification using a conversion of the Common Name relative distinguished name from a DNS name type in the subject field is allowed for the purposes of backward compatibility. \n              </p> <p>\n              The client should avoid constructing reference identifiers using wildcards. However, if the presented identifiers include wildcards, \n              the client must follow the best practices regarding matching; these best practices are captured in the evaluation activity. \n              If the TSF supports wildcards, and allows names with DNS portions containing internationalized names, \n              the internationalized name should not match any wildcard, in accordance with RFC 6125 section 7.2.\n              </p> <p>  \n              Support for other name types is rare, but may be claimed for specific applications. \n              If specified, the assignment includes both the RFC describing normalization and matching rules, \n              and any refinements necessary to resolve options available in the RFC.\n              </p>"
      },
      "d71b49a8-8b43-4cba-94d2-250475604a66": {
        "elementXMLID": "fel-tlsc-bad-cert",
        "selectableGroups": {
          "group-121": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "fcs_tlsc_ext.1.6_1",
              "682683fa-3308-4b6d-83f7-80b7bb57bace"
            ]
          },
          "fcs_tlsc_ext.1.6_1": {
            "description": [
              {
                "text": "the server certificate is invalid"
              },
              {
                "groups": [
                  "group-123"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-123": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "f7dc3fd2-09ee-467f-826a-fc78a73882b4",
              "fcs_tlsc_ext.1.6_2"
            ]
          },
          "fcs_tlsc_ext.1.6_2": {
            "description": [
              {
                "text": "except when override is authorized in accordance with"
              },
              {
                "groups": [
                  "a5e79e69-a6df-462d-86dc-32b0dab84eea"
                ]
              },
              {
                "text": "in the case where valid revocation information is not available"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall not establish a trusted channel if \n              "
          },
          {
            "selections": "group-121"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "f7dc3fd2-09ee-467f-826a-fc78a73882b4": {
            "type": "selectable",
            "uuid": "f7dc3fd2-09ee-467f-826a-fc78a73882b4",
            "id": "s-tlsc-no-excep",
            "description": "with no TLS-specific exceptions",
            "exclusive": false,
            "nestedGroups": []
          },
          "a5e79e69-a6df-462d-86dc-32b0dab84eea": {
            "id": "fcs_tlsc_ext.1.6_3",
            "description": "override rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "682683fa-3308-4b6d-83f7-80b7bb57bace": {
            "type": "selectable",
            "uuid": "682683fa-3308-4b6d-83f7-80b7bb57bace",
            "id": "fcs_tlsc_ext.1.6_4",
            "description": "a PSK associated with the server is invalid",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                The option \u201cthe server certificate\u2026\u201d is claimed if certificate-based server authentication is performed (if non-PSK ciphersuites are supported in TLS 1.2, or if TLS 1.3 is claimed). Within this selection, the option \u201cexcept when\u2026\u201d is claimed if TLS specific exception rules are implemented to allow server certificates with no\n                valid revocation status information to be accepted. This is claimed only when FIA_X509_EXT.2.2 includes the option\n                \u201csupported function determines acceptance via\u2026\u201d. The assignment for when override is authorized describes the TLS-specific processing to include the privileged users authorized to configure an override, and the duration of an override. It is preferred that overrides are minimized in scope and time.\n                Otherwise, \u201cwith no TLS-specific exceptions\u201d is claimed.\n              </p> <p>\n                The option \u201ca PSK associated with the server is invalid\u201d is claimed if TLS 1.2 is supported and PSK ciphersuites are supported, or TLS 1.3 is supported and if PSK handshakes are supported.\n              </p> <p>\n              Note that FIA_X509_EXT.1 may allow methods other than CRL or OCSP to validate the revocation status of a certificate. A\n              certificate that exclusively uses these alternate methods may not advertise revocation status information locations. \n              Thus, a certificate that is valid according to FIA_X509_EXT.1 and does not advertise revocation status information in a CRL_DP\n              or AIA extension is considered to be not revoked. TLS-specific override mechanisms are for use with certificates with published\n              revocation status information that is not accessible, whether temporarily or because the information cannot be accessed during\n              the state of the TOE (e.g., for verifying signatures on boot code). The circumstances should be described by the ST author, who\n              should indicate the override mechanism and conditions that apply to the override, including system state, user or admin actions, etc. \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "44b0b403-fb5b-40fb-a11e-003e8ae12313": {
        "tss": "<p>\n                The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions \n                are specified in accordance with RFC 5246 (TLS 1.2) and RFC 8446 (TLS 1.3 and updates to TLS 1.2) and as refined in FCS_TLSC_EXT.1 as appropriate. \n                </p> <p>\n                The evaluator shall verify that ciphersuites indicated in FCS_TLSC_EXT.1.2 are included in the description, and that none of the following ciphersuites are supported: ciphersuites indicating \n                NULL, RC2, RC4, DES, IDEA, TDES, or AES-128 in the encryption algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.\n                </p> <p>\n                The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_TLSC_EXT.1.4.\n                </p> <p>\n                The evaluator shall verify that the TSS describes applications that use the TLS functions and how they establish reference identifiers.\n                </p> <p>\n                If name matching is supported, the evaluator shall verify that the TSS includes a description of matching methods used for each supported name type to \n                the supported application defined reference identifiers. \n                The evaluator shall verify that the TSS includes a description \n                of wildcards recognized for each name type claimed in FCS_TLSC_EXT.1.5, if any, and shall verify that the matching rules meet or exceed best practices. \n                In particular, the evaluator shall ensure that the matching rules are as restrictive as, or more restrictive than the following: \n                <ul><li>DNS names: The \u2018*\u2019 character used in the complete leftmost label of a DNS name represents any valid name that has the same number of labels, \n                  and that matches all remaining labels. The \u2018*\u2019 character must only be used in the leftmost complete label of a properly formatted DNS name. \n                  The \u2018*\u2019 must not be used to represent a public suffix, or in the leftmost label immediately following a public suffix. </li> <li>URI or SRV names: The \u2018*\u2019 character can only occur in the domain name portion of the name represented as a DNS name. \n                  All restrictions for wildcards in DNS names apply to the DNS portion of the name.\n                URI host names presented as an IP address are matched according to IP address matching rules \u2013 see best practices for IP addresses below. \n                In accordance with RFC 6125, it is preferred that such URIs are presented a matching name of type IP address in the SAN. </li> <li>IP addresses: RFC 5280 does not support IP address ranges as presented names, \n                  but indicates that presented names may be compared to IP address ranges present in name constraints. \n                  If the TSF supports IP address ranges as reference identifiers, the reference identifier matches if the presented name is in the range. \n                  IP ranges in name constraints (including reference identifiers) should be presented in CIDR format. </li> <li>RFC 5322 names: RFC 5280 and updates RFC 8398 and RFC 8399 do not support special indicators representing \n                  more than a single mailbox as a presented name, but indicates that presented names may be compared to a single mailbox, \n                  \u2018any\u2019 email address at a host, or \u2018any\u2019 email address on a domain \n                  (e.g., \u201cexample.com\u201d matches any email address on the host example.com and \u201c.example.com\u201d matches any email address in the domain example.com, \n                  but does not match email addresses at the host \u201cexample.com\u201d). Such matching is prohibited for internationalized RFC 5322 names.</li> <li>Embedded CN name types: The CN relative distinguished name of a DNS name type included in the subject field is not strongly typed. Attempts to match both the name type and wildcard specifications can result in matches not intended, and therefore, not authoritatively asserted by a certification authority. It is preferred that no matching of CN embedded names be supported, but if necessary for backward compatibility, the description should clearly indicate how different name types are interpreted in the matching algorithm. If an embedded CN is present, the DN structure containing the CN as an RDN is matched, and the CN component is further matched according to the specific rules for the implied name type. In particular, the \u2018*\u2019 character in a CN is not to be interpreted as representing more than a single entity unless the entirety of the RDN is properly formatted as a DNS, URI, or SVR name, and represents a wildcard meeting best practices as described above.</li></ul></p> <p>\n                  If name types are passed to the supported functions, the evaluator shall verify that for each claimed supported function, the TSS includes a description of the information used to validate the identifier that is passed to that function.\n                </p> <p>\n                  If override rules are claimed in &lt;xref to=\"fel-tlsc-bad-cert\"/&gt;, the evaluator shall confirm that the TSS identifies the subjects authorized to configure the override as well as the scope or duration of any overrides.\n                </p> <p>\n                  If name constraints are passed to the certificate verification function, the evaluator shall verify that the TSS describes\n                  the initial allow and deny tables for each reference identity reference name supported.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that TLS conforms to the description in the TSS and that \n                it includes any instructions on configuring the version, ciphersuites, or optional extensions that are supported.\n                </p> <p>\n                The evaluator shall verify that all configurable features for matching identifiers in certificates presented in the TLS handshake to application specific reference identifiers are described.\n                </p> <p>\n                  If override rules are claimed in &lt;xref to=\"fel-tlsc-bad-cert\"/&gt;, the evaluator shall verify the operational guidance has instructions for applying them.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "478d3431-32d2-4493-b4eb-a3f875c0c9ac": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "52f190d4-a3a4-45cb-a5cb-cc91ba6dd71a",
              "352a1403-4ed2-433b-a33f-d5dc6a220eab",
              "dc4bccab-3c25-41c0-865f-37b55f795128",
              "a12d677e-0a38-4fde-870b-e203c8603bd0",
              "c92bd39b-0510-45ca-9910-cc7d43e1c6b0",
              "bbe6ed1a-5cd2-424a-9e26-1ca1e8615932",
              "03da6d0b-dcd0-4048-87e6-49375115ba2d",
              "85902ec3-7e1a-48f6-b55f-52d9ce18ee58",
              "20aae0fd-46d0-4aec-bcb9-32bcab42a8a8"
            ],
            "conclusion": ""
          },
          "e8092323-3491-4ce7-8d25-fb159cffd25a": {
            "parentTestUUID": "352a1403-4ed2-433b-a33f-d5dc6a220eab",
            "description": "",
            "testUUIDs": [
              "5b0ea334-9c5c-41c8-9e2c-e7da5b56229f",
              "e77471fa-ec07-45bb-9a0f-8256f1127b0d"
            ],
            "conclusion": ""
          },
          "f46473dc-7bd0-4dd4-9f3f-bed767244d20": {
            "parentTestUUID": "dc4bccab-3c25-41c0-865f-37b55f795128",
            "description": "",
            "testUUIDs": [
              "19f390bf-b3ed-4ce8-8262-655e268c86b2",
              "3cfab848-51e9-4c15-8808-22147aaaea06",
              "0a1cd013-bce2-4753-805e-d686923e2757",
              "bc70de13-7f88-4292-b16c-13913ca9ad23",
              "847e297a-cb80-40a1-bf9a-678b5747b1f5"
            ],
            "conclusion": ""
          },
          "6720d98f-81a1-485b-990b-17189200f25e": {
            "parentTestUUID": "a12d677e-0a38-4fde-870b-e203c8603bd0",
            "description": "",
            "testUUIDs": [
              "2d001084-e3e5-4b5f-a474-ac5538efac4c",
              "adfed23b-ccff-4f28-8652-fa1301cdd005",
              "6e05e218-1273-4d69-a48a-45c34561871c",
              "6b1cd0bd-ff2f-41dd-b00f-6bcb2429944a"
            ],
            "conclusion": ""
          },
          "b5fb7707-ae72-4389-b900-f4d518130029": {
            "parentTestUUID": "2d001084-e3e5-4b5f-a474-ac5538efac4c",
            "description": "",
            "testUUIDs": [
              "749cd99d-13bd-4e43-8e33-d912f7d50cf1",
              "c782e8b0-3802-4581-a685-72d99d9a3e38",
              "f3a54541-28b3-491d-af05-5aee381d1f7a",
              "b583ce25-981f-456d-ac6e-0183f6353c9b"
            ],
            "conclusion": ""
          },
          "29920e17-5e86-4460-b631-3a2055030248": {
            "parentTestUUID": "6e05e218-1273-4d69-a48a-45c34561871c",
            "description": "",
            "testUUIDs": [
              "b0296338-89c6-4fb1-9f92-25114ac574cd",
              "b54a8f4f-6160-4f7f-a301-59a6f5b879e8",
              "11adfade-f4ad-4ce3-8fe6-4cd2bc71c7ef",
              "e425bc25-0c48-43df-9f5f-d0105685422c",
              "49f2a064-33b7-4f23-b923-5a2049b7db01",
              "caf1ded5-3e8d-4922-9485-545052df24a0",
              "8115b3cb-d5e7-4942-b970-d6aaf65f96ff"
            ],
            "conclusion": ""
          },
          "18361cee-59b5-4589-948d-70f92ca4180f": {
            "parentTestUUID": "6b1cd0bd-ff2f-41dd-b00f-6bcb2429944a",
            "description": "",
            "testUUIDs": [
              "04f661fb-4733-49ff-b03f-223640f72828",
              "6340d82f-933f-4551-8099-730c5beb847e"
            ],
            "conclusion": ""
          },
          "53585dc2-5d96-43d2-b231-a4930e02b00e": {
            "parentTestUUID": "c92bd39b-0510-45ca-9910-cc7d43e1c6b0",
            "description": "",
            "testUUIDs": [
              "2c07ffce-c245-4726-952c-a23cd9f1a36c",
              "eda25b1a-db7e-4d1a-9c42-12477b768686",
              "7b724aff-7b9c-4298-8f82-0adac83bea34"
            ],
            "conclusion": ""
          },
          "0a1b0406-d751-4e12-8896-aa0ec24a94e8": {
            "parentTestUUID": "2c07ffce-c245-4726-952c-a23cd9f1a36c",
            "description": "",
            "testUUIDs": [
              "765a8f33-8a97-451d-878d-90ba2c07500f",
              "bc3d1ebf-2ed8-452e-8738-6cdd1c0ed918",
              "bcabf9e6-1623-4bf4-a582-5c1e6656ba57"
            ],
            "conclusion": ""
          },
          "68c96b82-35e2-4d78-9a3d-28d19b4c2501": {
            "parentTestUUID": "eda25b1a-db7e-4d1a-9c42-12477b768686",
            "description": "",
            "testUUIDs": [
              "0d3e4af2-ee42-477f-ae5d-89d7966d34d9",
              "8b5959a3-1b18-4c1d-ae12-32b8766dd6c5"
            ],
            "conclusion": ""
          },
          "a280f423-7d5a-449e-bde0-e4edfa8e32d0": {
            "parentTestUUID": "7b724aff-7b9c-4298-8f82-0adac83bea34",
            "description": "",
            "testUUIDs": [
              "d645ace3-8976-4d38-9f15-12d714a07efd"
            ],
            "conclusion": ""
          },
          "de374a64-60a6-4966-afa4-02c664a761c9": {
            "parentTestUUID": "85902ec3-7e1a-48f6-b55f-52d9ce18ee58",
            "description": "",
            "testUUIDs": [
              "b8566614-20f0-46ec-9491-9e733a4a68d9",
              "97de5cd9-0d7b-4156-be0b-166d60561a2c",
              "e9066ad7-898b-477c-93fe-3aa3036ff700"
            ],
            "conclusion": ""
          },
          "59a505eb-4a5b-4476-a7eb-f4de34c388c3": {
            "parentTestUUID": "20aae0fd-46d0-4aec-bcb9-32bcab42a8a8",
            "description": "",
            "testUUIDs": [
              "1143d19f-263c-4500-bbdf-cc26050d0bbc",
              "4657f597-c685-44bc-acf5-c1d256bcc022",
              "1a1265c1-c632-4ed5-8532-2499f31df55d",
              "8bfb9e53-ad1d-491b-82a4-a3a0344bf39b",
              "7cbafa1c-f9af-41f6-b2fb-ff74ad7859e3"
            ],
            "conclusion": ""
          },
          "df1ae1a6-52a4-403b-b412-5a9537c1f8f7": {
            "parentTestUUID": "4657f597-c685-44bc-acf5-c1d256bcc022",
            "description": "",
            "testUUIDs": [
              "c91e0cfd-7747-4c16-aa7f-1822b39d4703",
              "a05506dc-1287-46c4-a5d9-745d488ee26e",
              "205839e8-4d04-44fd-83fd-c0d0c9d21920",
              "91b3502c-d23f-40be-95a8-8bf513483ab0",
              "5ab2a619-3eed-4570-abbe-97ce98b6f6b1",
              "8b372eae-e056-4489-a9d9-85bcd0f2dc19",
              "37d980f1-f258-4893-8fa4-a23340d64a83",
              "b9cca855-3bd7-4507-ad7b-def41504daea"
            ],
            "conclusion": ""
          },
          "506c4626-eb4c-42bc-a2f2-ccc83392f5fd": {
            "parentTestUUID": "5ab2a619-3eed-4570-abbe-97ce98b6f6b1",
            "description": "",
            "testUUIDs": [
              "5c8d56e8-891f-458f-be1f-d5f70c7b68ed",
              "6e218c9a-00b7-4d97-97c6-27cae3aa2915",
              "25d5233e-21a9-4c8c-a08b-fd3198d33d6a"
            ],
            "conclusion": ""
          },
          "e448b764-859e-466a-917e-70d5517a942f": {
            "parentTestUUID": "1a1265c1-c632-4ed5-8532-2499f31df55d",
            "description": "",
            "testUUIDs": [
              "362ca2b1-1202-4a4f-b382-d22de6ef8515",
              "a2f6f406-a11a-41f9-97fc-6f5f28d49d3b"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "52f190d4-a3a4-45cb-a5cb-cc91ba6dd71a": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "tls-client-supported-configurations",
            "objective": "(supported configurations) For each supported version, and for each supported ciphersuite associated with the version:\n                  <p>\n                  The evaluator shall establish a TLS connection between the TOE and a test TLS server that is configured to negotiate the tested version and ciphersuite in accordance with the RFC for the version.\n                  </p> <p>\n                  The evaluator shall observe that the TSF presents a ClientHello indicating TLS 1.2 (value '03 03') in the highest or legacy version field and, if TLS 1.3 is supported, the supported versions extension is present and contains the value '03 04' for TLS 1.3.\n                  </p> <p>\n                  The evaluator shall observe that the ClientHello indicates the supported ciphersuites in the order indicated, \n                  and that it includes only the extensions supported, with appropriate values, for that version in accordance with the requirement.\n                  </p> <p>\n                  The evaluator shall observe that the TOE successfully completes the TLS handshake.\n                  </p> <p><b>Note:</b> The highest version field is renamed to the legacy version field for TLS 1.3. Regardless of the versions supported, this field is required to indicate TLS 1.2. If the TOE supports both TLS 1.2 and TLS 1.3, the ClientHello should indicate all ciphersuites and all extensions as required for either version. In particular, the supported versions extension is required and must include the TLS 1.3 value ('03 04') and may also include the TLS 1.2 indicator ('03 03').\n                  </p> <p>\n                    If the TOE is configurable to support only TLS 1.2, only TLS 1.3, or both TLS 1.2 and TLS 1.3, &lt;xref to=\"tls-client-supported-configurations\"/&gt; should be performed in each configuration, with ciphersuites and extensions appropriate for the configured version.\n                  </p> <p>\n                  The connection in &lt;xref to=\"tls-client-supported-configurations\"/&gt; may be established as part of the establishment of a higher-level protocol, \n                  e.g., as part of an EAP session. \n                  </p> <p>\n                  It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; \n                  it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used \n                  (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5b0ea334-9c5c-41c8-9e2c-e7da5b56229f": {
            "testListUUID": "e8092323-3491-4ce7-8d25-fb159cffd25a",
            "id": "tls-client-obsolete-versions",
            "objective": "For each of SSL version 2, SSL version 3, TLS 1.0, TLS 1.1, and TLS\n                      1.2 if it is not supported, the evaluator shall initiate a TLS connection from the TOE \n                    to a test TLS server that is configured to negotiate the obsolete version and observe that the TSF terminates the connection.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version, insufficient security) in response to this, \n                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e77471fa-ec07-45bb-9a0f-8256f1127b0d": {
            "testListUUID": "e8092323-3491-4ce7-8d25-fb159cffd25a",
            "id": "tls-client-nonstandard-versions",
            "objective": "\n                    The evaluator shall follow the operational guidance to configure the TSF to\n                  ensure any supported beta TLS 1.3 versions are disabled, as necessary. The evaluator\n                    shall send the TSF a ClientHello message indicating the supported version (referred to\n                    as the legacy version in RFC 8446) with the value '03 04' but without including the\n                    supported_versions extension and observe that the TSF either\n                    responds with a ServerHello indicating TLS 1.2 or terminates the connection.\n                    <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version) in response to this, \n                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                    </p> <p>&lt;xref to=\"tls-client-nonstandard-versions\"/&gt; is intended to test the TSF response to non-standard versions, higher than indicated in the ClientHello's \"highest version/legacy version\" supported, including early proposals for 'beta TLS 1.3' versions. If the TSF supports such beta versions, the\n                      evaluator shall follow the operational guidance instructions to disable them prior to\n                      conducting &lt;xref to=\"tls-client-nonstandard-versions\"/&gt;.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "352a1403-4ed2-433b-a33f-d5dc6a220eab": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "(obsolete versions) The evaluator shall perform the following tests:\n                \n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "e8092323-3491-4ce7-8d25-fb159cffd25a"
            ]
          },
          "19f390bf-b3ed-4ce8-8262-655e268c86b2": {
            "testListUUID": "f46473dc-7bd0-4dd4-9f3f-bed767244d20",
            "id": "",
            "objective": "(supported ciphersuite not offered) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server configured to negotiate the supported version and a ciphersuite \n                      not included in the ClientHello and observe that the TOE rejects the connection.\n                    <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                    </p> <p>\n                      This test is intended to test the TSF\u2019s generic ability to recognize non-offered ciphersuites. \n                      If the ciphersuites in the ClientHello are configurable, \n                      the evaluator shall configure the TSF not to offer a supported ciphersuite and then use that ciphersuite in the test. \n                      If the TSF ciphersuite list is not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. \n                      Additional special cases of this test for special ciphersuites are performed separately.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3cfab848-51e9-4c15-8808-22147aaaea06": {
            "testListUUID": "f46473dc-7bd0-4dd4-9f3f-bed767244d20",
            "id": "tls-client-version-confusion",
            "objective": "(version confusion) For each supported version, \n                      the evaluator shall attempt to establish a connection with a test TLS server that is configured to negotiate the supported version \n                      and a ciphersuite that is not associated with that version and observe that the TOE rejects the connection.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p> <p>\n                      If the TSF supports TLS 1.2, the evaluator shall use TLS 1.3 ciphersuites for a server negotiating TLS 1.2. If TLS 1.3 is supported, the test server negotiating TLS 1.3 should select a TLS 1.2 ciphersuite consistent with the client's supported groups and signature algorithm indicated by extensions in the TLS 1.3 ClientHello. \n                      </p> <p>\n                      If the TOE is configurable to allow both TLS 1.2 and TLS 1.3 servers, the evaluator should use this configuration for the test, and configure the test server to use ciphersuites offered by the TSF in its ClientHello message.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "0a1cd013-bce2-4753-805e-d686923e2757": {
            "testListUUID": "f46473dc-7bd0-4dd4-9f3f-bed767244d20",
            "id": "",
            "objective": "(null ciphersuite) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server \n                      configured to negotiate the null ciphersuite (TLS_NULL_WITH_NULL_NULL) and observe that the TOE rejects the connection. \n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bc70de13-7f88-4292-b16c-13913ca9ad23": {
            "testListUUID": "f46473dc-7bd0-4dd4-9f3f-bed767244d20",
            "id": "",
            "objective": "The evaluator shall perform one or more of the following tests to demonstrate the TOE does not connect with anonymous servers:\n                      <p>\n                        [conditional] (anon ciphersuite) If the TSF supports TLS 1.2, the evaluator shall attempt to establish a TLS 1.2 connection with a test TLS server configured to negotiate a ciphersuite using the anonymous server authentication method \n                      and observe that the TOE rejects the connection.\n                      </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                      </p> <p>\n                    See IANA TLS parameters for available ciphersuites to be selected by the test TLS server. \n                    The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. \n                    For example, if the TSF only supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.\n                    </p> <p>\n                      [conditional] (anon ciphersuite) If the TSF supports TLS 1.3, the evaluator shall attempt to establish a TLS 1.3 connection with a test TLS server\n                      configured to assert a \u2018raw public key\u2019 in the server_certificate_type as defined in RFC 7250, and to send its certificate message including the raw public key indicator\n                      for the public key information field (regardless of the client's support for this extension). The evaluator shall observe that the TSF does not send the server_certificate_type\n                      extension indicating support for raw public keys in its ClientHello message and terminates the session when receiving the\n                      server\u2019s certificate message.\n                    </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., bad_certificate, unsupported_certificate) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                    </p> <p>\n                      It is acceptable for the TSF to support the extensions defined in RFC 7250. If so, it must not include the value indicating support for raw public keys in the server_certificate_type extension.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "847e297a-cb80-40a1-bf9a-678b5747b1f5": {
            "testListUUID": "f46473dc-7bd0-4dd4-9f3f-bed767244d20",
            "id": "tls-client-deprecated-encryption",
            "objective": "<p>\n                        The evaluator shall perform one or more of the following tests to demonstrate that the TOE does not accept connections using disallowed ciphersuites:\n                      </p> <p>\n                        [conditional] (disallowed encryption algorithm) If the TSF supports TLS 1.2, send the TSF a TLS 1.2 ClientHello that is compliant with RFC 9151, except that for each \n                        disallowed encryption algorithm (NULL, RC2, RC4, DES, IDEA, TDES, and AES-128), the evaluator shall attempt to establish a TLS 1.2 connection with a test TLS\n                        server configured to negotiate a ciphersuite using the disallowed encryption algorithm and observe that the TOE rejects the connection.\n                      </p> <p>\n                        [conditional] (disallowed encryption algorithm) If the TSF supports TLS 1.3, for each TLS 1.3 ciphersuite registered in IANA TLS parameters using AES-128 as the encryption algorithm, the evaluator shall attempt to establish a TLS 1.3 connection with a test TLS server configured to negotiate a ciphersuite using the disallowed encryption algorithm and observe that the TOE rejects the connection.   \n                      </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p> <p>\n                      See IANA TLS parameters for available ciphersuites to be tested. The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. \n                      For example, if the TSF only supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select\n                      TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5, TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.  \n                      </p> <p>\n                        [conditional] If TLS 1.3 is supported, the evaluator shall send the TSF a TLS 1.3 ClientHello that is compliant with RFC 9151, except that the ciphersuites field contains the single ciphersuite TLS_AES_128_GCM_SHA256. The evaluator shall observe that the TOE rejects the connection.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "dc4bccab-3c25-41c0-865f-37b55f795128": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "\n                  (ciphersuites)  The evaluator shall perform the following tests on handling unexpected ciphersuites using a test TLS server \n                  sending handshake messages compliant with the negotiated version except as indicated in the test: \n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "f46473dc-7bd0-4dd4-9f3f-bed767244d20"
            ]
          },
          "749cd99d-13bd-4e43-8e33-d912f7d50cf1": {
            "testListUUID": "b5fb7707-ae72-4389-b900-f4d518130029",
            "id": "",
            "objective": "For each supported version, the evaluator shall initiate a TLS session with a TLS test server and observe that the TSF\u2019s \n                        ClientHello includes the signature_algorithms extension with values in conformance with the ST.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c782e8b0-3802-4581-a685-72d99d9a3e38": {
            "testListUUID": "b5fb7707-ae72-4389-b900-f4d518130029",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.2 and supports an ECDHE or DHE ciphersuite, the evaluator shall ensure the test TLS server sends \n                        a compliant ServerHello message selecting TLS 1.2 and one of the supported ECDHE or DHE ciphersuites, \n                        a compliant server certificate message, and a key exchange message signed using a signature algorithm and hash combination not included in the ClientHello message \n                        (e.g., RSA with SHA-1). The evaluator shall observe that the TSF terminates the handshake.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter, decryption error) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f3a54541-28b3-491d-af05-5aee381d1f7a": {
            "testListUUID": "b5fb7707-ae72-4389-b900-f4d518130029",
            "id": "",
            "objective": "[conditional] If TLS 1.3 is supported, the evaluator shall configure the test TLS server to respond to the TOE with a compliant ServerHello message selecting TLS 1.3 \n                        and a server certificate message, \n                        but then also send a certificate verification message that uses a signature algorithm method not included in the signature_algorithms extension. The evaluator shall observe that the TSF only includes supported signature algorithms in the signature_algorithms extension in its ClientHello and terminates the TLS handshake after receiving the server certificate message.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter, bad certificate, decryption error) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b583ce25-981f-456d-ac6e-0183f6353c9b": {
            "testListUUID": "b5fb7707-ae72-4389-b900-f4d518130029",
            "id": "",
            "objective": "\n                        [conditional] If certificate-based authentication is supported, and for all supported versions for which signature_algorithms_cert is not supported, the evaluator shall ensure the test TLS server sends \n                        a compliant ServerHello message for the tested version and a server certificate message containing a valid certificate that represents the test TLS server, \n                        but which is signed using a signature and hash combination not included in the TSF\u2019s signature_algorithms extension \n                        (e.g., a certificate signed using RSA and SHA-1). The evaluator shall observe that the TSF terminates the TLS session.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                        </p> <p>\n                          Certificate-based server authentication is required unless the TSF only supports TLS with PSK authentication. TLS 1.3 always requires certificate-based server authentication (even if a PSK is also supported for key exchange), so the only circumstance where this would apply is if TLS 1.2 is claimed and the only supported ciphersuites are the TLS_*_PSK ciphersuites defined in RFCs 5487 and 8442.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2d001084-e3e5-4b5f-a474-ac5538efac4c": {
            "testListUUID": "6720d98f-81a1-485b-990b-17189200f25e",
            "id": "",
            "objective": "\n                    (signature_algorithms) [conditional] If the TSF supports certificate-based server authentication, the evaluator shall perform the following tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "b5fb7707-ae72-4389-b900-f4d518130029"
            ]
          },
          "adfed23b-ccff-4f28-8652-fa1301cdd005": {
            "testListUUID": "6720d98f-81a1-485b-990b-17189200f25e",
            "id": "tls-client-signature-algs-cert",
            "objective": "(signature_algorithms_cert) [conditional]  \n                    If signature_algorithms_cert is supported, then for each version that uses the signature_algorithms_cert extension, \n                    the evaluator shall ensure that the test TLS server sends a compliant ServerHello message selecting the tested version and indicating certificate-based server authentication.\n                    <p>\n                    The evaluator shall ensure that the test TLS server forwards a certificate message containing a valid certificate that represents the test TLS server, \n                    but which is signed by a valid Certification Authority using a signature and hash combination not included in the TSF\u2019s signature_algorithms_cert extension \n                    (e.g., a certificate signed using RSA and SHA-1). The evaluator shall confirm the TSF terminates the session.\n                    </p> <p><b>Note:</b> Certificate-based server authentication is required unless the TSF only supports TLS with PSK authentication. TLS 1.3 always requires certificate-based server authentication (even if a PSK is also supported for key exchange), so the only circumstance where this would apply is if TLS 1.2 is claimed and the only supported ciphersuites are the TLS_*_PSK ciphersuites defined in RFCs 5487 and 8442. If the TSF only supports PSK authentication, &lt;xref to=\"tls-client-signature-algs-cert\"/&gt; is not performed.\n                    </p> <p>\n                    For TLS 1.3, the server certificate message is encrypted. \n                    The evaluator shall configure the test TLS server with the indicated certificate and ensure that the certificate is \n                    indeed sent by observing the buffer of messages to be encrypted, or by inspecting one or both sets of logs from the TSF and test TLS server.\n                    </p> <p>\n                    It is preferred that the TSF sends a fatal error alert message (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, \n                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b0296338-89c6-4fb1-9f92-25114ac574cd": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>The evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) and initiate \n                        a TLS 1.2 session with a test TLS server configured to use the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627, and ensures that the test TLS server \n                          includes the extended_master_secret extension in its ServerHello. The evaluator shall observe that the TLS session between the TOE and TLS Server is established successfully.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b54a8f4f-6160-4f7f-a301-59a6f5b879e8": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>The evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) and initiate a TLS 1.2 \n                          session with a test TLS server configured to omit the extended_master_secret extension/compute a master secret according to RFC 5246, section 8.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensure that the test TLS server does not \n                          include the extended_master_secret extension in its ServerHello.  The evaluator shall observe that the TSF terminates the connection in accordance with the behavior documented \n                          in the ST and the TLS session between the TOE and TLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "11adfade-f4ad-4ce3-8fe6-4cd2bc71c7ef": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers the evaluator shall configure the TSF (if so configurable) to allow legacy servers and initiate a TLS 1.2 session \n                          with a test TLS server configured to omit the extended_master_secret extension/compute a master secret according to RFC 5246, section 8.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test TLS server does \n                          not include the extended_master_secret extension in its ServerHello.  The evaluator shall observe that the TLS session between the TOE and TLS Server is established successfully.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e425bc25-0c48-43df-9f5f-d0105685422c": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers, and the TOE supports TLS session resumption, the evaluator shall configure the TSF (if so configurable) to allow legacy \n                          servers and resume a TLS 1.2 session that previously computed the master secret in accordance with RFC 5246, section 8 (did not use the extended_master_secret extension in accordance \n                          with RFC 7627) with a test TLS server configured to include the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>\n                          The evaluator shall observe that the TSF\u2019s ClientHello omits the extended_master_secret extension and ensures that the test TLS server includes the extended_master_secret extension in \n                          its ServerHello.  The evaluator shall observe that the TSF terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the TLS session \n                          between the TOE and TLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "49f2a064-33b7-4f23-b923-5a2049b7db01": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports allowing legacy servers, and the TOE supports TLS session resumption, the evaluator shall configure the TSF (if so configurable) to allow legacy \n                          servers and resume a TLS 1.2 session that previously used the extended_master_secret extension in accordance with RFC 7627 with a test TLS server configured to omit the extended_master_secret extension.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test TLS server does not include the extended_master_secret \n                          extension in its ServerHello.  The evaluator shall observe that the TSF terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the TLS session \n                          between the TOE and TLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "caf1ded5-3e8d-4922-9485-545052df24a0": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports TLS session resumption, the evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) \n                          and resume a TLS 1.2 session that previously computed the master secret in accordance with RFC 5246, section 8 (did not use the extended_master_secret extension in accordance with RFC 7627) with a test TLS server \n                          configured to include the extended_master_secret extension/compute a master secret according to RFC 7627, section 4.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello omits the extended_master_secret extension and ensures that the test TLS server includes the extended_master_secret extension in its ServerHello. \n                          The evaluator shall observe that the TSF terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the TLS session between the TOE and TLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "8115b3cb-d5e7-4942-b970-d6aaf65f96ff": {
            "testListUUID": "29920e17-5e86-4460-b631-3a2055030248",
            "id": "",
            "objective": "<p>[conditional] If the TOE supports TLS session resumption, the evaluator shall configure the TSF (if so configurable) to enforce server support of extended master secret computation (no other enforcement mode) \n                          and resume a TLS 1.2 session that previously used the extended_master_secret extension in accordance with RFC 7627 with a test TLS server configured to omit the extended_master_secret extension.</p> <p>The evaluator shall observe that the TSF\u2019s ClientHello includes the extended_master_secret extension in accordance with RFC 7627 and ensures that the test TLS server does not include the extended_master_secret \n                          extension in its ServerHello.  The evaluator shall observe that the TSF terminates the connection (Section 5.3 of RFC 7627) in accordance with the behavior documented in the ST and the TLS session between the TOE and TLS Server fails.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6e05e218-1273-4d69-a48a-45c34561871c": {
            "testListUUID": "6720d98f-81a1-485b-990b-17189200f25e",
            "id": "",
            "objective": "(extended_master_secret for TLS 1.2) [conditional] If the TSF supports TLS 1.2, the evaluator shall establish a connection \n                    from the TOE with a test TLS server configured as described in the following test and observe the behavior.\n                    <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to terminating a session, but it is acceptable that \n                      the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                    </p> <p>In addition to mandatory tests 1-2:</p> <p>if the TOE supports Legacy Servers, also perform test 3;</p> <p>if the TOE supports session resumption, also perform tests 6-7;</p> <p>if the TOE supports both, also perform tests 4-5.</p>",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "29920e17-5e86-4460-b631-3a2055030248"
            ]
          },
          "04f661fb-4733-49ff-b03f-223640f72828": {
            "testListUUID": "18361cee-59b5-4589-948d-70f92ca4180f",
            "id": "",
            "objective": "For each supported group, the evaluator shall initiate a TLS session with a compliant test TLS 1.2 server supporting RFC 7919. \n                      The evaluator shall ensure that the test TLS server is configured to select TLS 1.2 and a ciphersuite using the supported group. \n                      The evaluator shall observe that the TSF\u2019s ClientHello lists the supported groups as indicated in the ST, and that the TSF successfully establishes the TLS session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6340d82f-933f-4551-8099-730c5beb847e": {
            "testListUUID": "18361cee-59b5-4589-948d-70f92ca4180f",
            "id": "",
            "objective": "[conditional on TLS 1.2 support for ECDHE ciphersuites]  The evaluator shall initiate a TLS session with a test TLS server that is configured to use an explicit version of a named EC group supported by the client. \n                      The evaluator shall ensure that the test TLS server key exchange message includes the explicit formulation of the group in its key exchange message \n                      as indicated in RFC 4492, Section 5.4. The evaluator shall confirm that the TSF terminates the session.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6b1cd0bd-ff2f-41dd-b00f-6bcb2429944a": {
            "testListUUID": "6720d98f-81a1-485b-990b-17189200f25e",
            "id": "",
            "objective": "(supported_groups for TLS 1.2) [conditional] If the TSF supports TLS 1.2, and supports ECDHE or DHE ciphersuites, the evaluator shall perform the following tests.\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "18361cee-59b5-4589-948d-70f92ca4180f"
            ]
          },
          "a12d677e-0a38-4fde-870b-e203c8603bd0": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "(extensions) For each supported version indicated in the following tests, \n                  the evaluator shall establish a connection from the TOE with a test server negotiating the tested version and providing \n                  server handshake messages as indicated when performing the following tests for validating proper extension handling:\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "6720d98f-81a1-485b-990b-17189200f25e"
            ]
          },
          "765a8f33-8a97-451d-878d-90ba2c07500f": {
            "testListUUID": "0a1b0406-d751-4e12-8896-aa0ec24a94e8",
            "id": "",
            "objective": "The evaluator shall configure the test TLS server to include the supported versions extension in the ServerHello only containing the value '03 03.' The evaluator shall observe that the TSF terminates the TLS session.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake failure, protocol version) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).   \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bc3d1ebf-2ed8-452e-8738-6cdd1c0ed918": {
            "testListUUID": "0a1b0406-d751-4e12-8896-aa0ec24a94e8",
            "id": "",
            "objective": "The evaluator shall configure the test TLS server to include the supported versions extension in the ServerHello containing the value '03 04' and complete a compliant TLS 1.3 handshake. \n                      The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "bcabf9e6-1623-4bf4-a582-5c1e6656ba57": {
            "testListUUID": "0a1b0406-d751-4e12-8896-aa0ec24a94e8",
            "id": "",
            "objective": "[conditional] If the TSF is configurable to support both TLS 1.2 and TLS 1.3, \n                      the evaluator shall follow operational guidance to configure this behavior. The evaluator shall ensure that the test TLS server sends a TLS 1.2 compliant server handshake and \n                      observe that the server random does not incidentally include any downgrade messaging. \n                      The evaluator shall observe that the TSF completes the TLS 1.2 handshake successfully.\n                      <p><b>Note:</b> Enhanced downgrade protection defined in RFC 8446 is optional, and if supported, is tested separately. \n                      The evaluator may configure the test server\u2019s random, or may repeat the test until the server\u2019s random does not match a downgrade indicator.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2c07ffce-c245-4726-952c-a23cd9f1a36c": {
            "testListUUID": "53585dc2-5d96-43d2-b231-a4930e02b00e",
            "id": "",
            "objective": "(supported versions) The evaluator shall initiate TLS 1.3 sessions in turn from the TOE to a test TLS server configured as indicated in the sub-tests below: \n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "0a1b0406-d751-4e12-8896-aa0ec24a94e8"
            ]
          },
          "0d3e4af2-ee42-477f-ae5d-89d7966d34d9": {
            "testListUUID": "68c96b82-35e2-4d78-9a3d-28d19b4c2501",
            "id": "",
            "objective": "For each supported group, the evaluator shall configure the compliant test TLS 1.3 server to select a ciphersuite using the group. \n                      The evaluator shall observe that the TSF sends an element of the group in its ClientHello key shares extension \n                      (after a HelloRetryRequest message from the test server, if the key share for the group is not included in the initial ClientHello). \n                      The evaluator shall ensure the test TLS server sends an element of the group in its ServerHello and observes that the TSF completes the TLS handshake successfully.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "8b5959a3-1b18-4c1d-ae12-32b8766dd6c5": {
            "testListUUID": "68c96b82-35e2-4d78-9a3d-28d19b4c2501",
            "id": "",
            "objective": "For each supported group, the evaluator shall modify the ServerHello sent by the test TLS server to include an invalid key share value claiming \n                      to be an element the group indicated in the supported_groups extension. \n                      The evaluator shall observe that the TSF terminates the TLS session.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p> <p>\n                      For DHE ciphersuites, a zero value, or a value greater or equal to the modulus is not a valid element. \n                      For ECDHE groups, an invalid point contains x and y coordinates of the correct size, \n                      but represents a point not on the curve. The evaluator shall construct such an invalid point by modifying a byte in the y coordinate of a valid point and verify that the coordinates do not satisfy the curve equation.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "eda25b1a-db7e-4d1a-9c42-12477b768686": {
            "testListUUID": "53585dc2-5d96-43d2-b231-a4930e02b00e",
            "id": "",
            "objective": "(supported groups, key shares) The evaluator shall initiate TLS 1.3 sessions in turn with a test TLS server configured as indicated in the following sub-tests:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "68c96b82-35e2-4d78-9a3d-28d19b4c2501"
            ]
          },
          "d645ace3-8976-4d38-9f15-12d714a07efd": {
            "testListUUID": "a280f423-7d5a-449e-bde0-e4edfa8e32d0",
            "id": "",
            "objective": "The evaluator shall attempt to configure the TSF to send early data. \n                        If there is no indication from the TSF that this is blocked, the evaluator shall repeat test \n                        5.3.1 with the TSF so configured and observe that the TSF does not send application data prior to receiving the ServerHello. \n                        <p><b>Note:</b> Early data will be encrypted under the PSK and received by the test TLS server prior to it sending a ServerHello message. \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7b724aff-7b9c-4298-8f82-0adac83bea34": {
            "testListUUID": "53585dc2-5d96-43d2-b231-a4930e02b00e",
            "id": "",
            "objective": "\n                    (PSK support) [conditional] If the TSF supports pre-shared keys, the evaluator shall follow the operational guidance to use pre-shared keys, \n                    shall establish a pre-shared key between the TSF and the test TLS server, and initiate TLS 1.3 sessions in turn \n                    between the TSF and the test TLS server configured as indicated in the following sub-test:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "a280f423-7d5a-449e-bde0-e4edfa8e32d0"
            ]
          },
          "c92bd39b-0510-45ca-9910-cc7d43e1c6b0": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "(TLS 1.3 extensions) [conditional] If the TSF supports TLS 1.3, the evaluator shall perform the following tests. \n                  For each test, the evaluator shall observe that the TSF\u2019s ClientHello includes the supported versions extension with the value '03 04' indicating TLS 1.3:\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "53585dc2-5d96-43d2-b231-a4930e02b00e"
            ]
          },
          "bbe6ed1a-5cd2-424a-9e26-1ca1e8615932": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "(corrupt finished message) For each supported version, the evaluator shall initiate a TLS session from the TOE to a test TLS server that sends a compliant set of server handshake messages, \n                  except for sending a modified finished message \n                  (modify a byte of the finished message that would have been sent by a compliant server). \n                  The evaluator shall observe that the TSF terminates the session and does not complete the handshake by \n                  observing that the TSF does not send application data provided to the TLS channel.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "03da6d0b-dcd0-4048-87e6-49375115ba2d": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "tls-client-missing-finished",
            "objective": "(missing finished message) For each supported version, the evaluator shall initiate a session from the TOE to a test TLS server providing a compliant handshake, \n                  except for sending a random TLS message (the five byte header indicates a correct TLS message for the negotiated version, but not indicating a finished message) as the final message. \n                  The evaluator shall observe that the TSF terminates the session and does not send application data.\n                  <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption error) in response to this, \n                  but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                  </p> <p>\n                  For TLS 1.2, the modified message is sent after the change_cipher_spec message. For TLS 1.3, the modified message is sent as the last message of the server\u2019s second flight of messages.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b8566614-20f0-46ec-9491-9e733a4a68d9": {
            "testListUUID": "de374a64-60a6-4966-afa4-02c664a761c9",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.2 and if the ST indicates support for ECDSA or DSA ciphersuites, \n                    the evaluator shall initiate a TLS session with a compliant test TLS server and modify the signature in the server key exchange. \n                    The evaluator shall observe that the TSF silently drops the key exchange message or terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "97de5cd9-0d7b-4156-be0b-166d60561a2c": {
            "testListUUID": "de374a64-60a6-4966-afa4-02c664a761c9",
            "id": "",
            "objective": "[conditional] If the ST indicates support for TLS 1.3, the evaluator shall initiate a TLS session between the TOE \n                    and a test TLS server that is configured to send a compliant ServerHello message, encrypted extension message, and certificate message, \n                    but will send a certificate verify message with an invalid signature (e.g., by modifying a byte from a valid signature). \n                    The evaluator shall confirm that the TSF terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e9066ad7-898b-477c-93fe-3aa3036ff700": {
            "testListUUID": "de374a64-60a6-4966-afa4-02c664a761c9",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.2 and if the ST indicates support for both RSA and ECDSA methods in the signature_algorithm \n                    (or, if supported, the signature_algorithms_cert) extension, \n                    and if the ST indicates one or more TLS 1.2 ciphersuites indicating each of the RSA and ECDSA methods in its signature components, \n                    the evaluator shall choose two ciphersuites: one indicating an RSA signature (cipher 1) and one indicating an ECDSA signature (cipher 2).\n                    The evaluator shall then establish two certificates that are trusted by the TOE: one representing the test TLS 1.2 server using an RSA signature (cert 1) and one \n                    representing the test TLS 1.2 server using an ECDSA signature (cert 2).\n                    \n                    The evaluator shall initiate a TLS session between the TOE and the test TLS 1.2 server that is configured to select cipher 1 and to send cert 2. The evaluator shall verify that the TSF terminates this TLS session.\n                    The evaluator shall then initiate a TLS session between the TOE and the test TLS 1.2 server that is configured to select cipher 2 and to send cert 1. The evaluator shall verify that the TSF also terminates this TLS session. \n                    <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in response to these tests, \n                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "85902ec3-7e1a-48f6-b55f-52d9ce18ee58": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "(unexpected/corrupt signatures within handshake) The evaluator shall perform the following tests, according to the versions supported.\n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "de374a64-60a6-4966-afa4-02c664a761c9"
            ]
          },
          "1143d19f-263c-4500-bbdf-cc26050d0bbc": {
            "testListUUID": "59a505eb-4a5b-4476-a7eb-f4de34c388c3",
            "id": "",
            "objective": "<p>(certificate extended key usage purpose) The evaluator shall send a server certificate that contains the Server Authentication purpose in the ExtendedKeyUsage extension \n                      and verify that a connection is established. \n                      The evaluator shall repeat this test using a different certificate that is otherwise valid and trusted but lacks the \n                      Server Authentication purpose in the ExtendedKeyUsage extension and observe the TSF terminates the session.\n                    </p> <p><b>Note:</b>This test is not performed if only TLS 1.2 with PSK ciphersuites are supported; it is required if TLS 1.2 is supported and ciphersuites other than PSK ciphersuites are supported, or if TLS 1.3 is supported.\n                    </p> <p>\n                      Depending on the selections in FCS_TLSC_EXT.1.5 and FCS_TLSC_EXT.1.6, this test is performed in conjunction with testing of FIA_X509_EXT.1 or SFRs specific to the supported functions using TLS.\n                      </p> <p>\n                      It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, decryption error, handshake failure) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p> <p>\n                      Ideally, the two certificates should be similar in regards to structure, the types of identifiers used, and the chain of trust.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c91e0cfd-7747-4c16-aa7f-1822b39d4703": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "",
            "objective": "The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers\n                          for the test server for the tested name type. The evaluator shall ensure the test TLS server sends a certificate with a matching name of the tested name type \n                          and observe that the TSF completes the connection.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a05506dc-1287-46c4-a5d9-745d488ee26e": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "",
            "objective": "The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifiers that do not match the name representing the test server. \n                          The evaluator shall ensure the test TLS server sends a certificate with a name of the type tested, and observe the TSF terminates the session.\n                          <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, \n                          but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "205839e8-4d04-44fd-83fd-c0d0c9d21920": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "tls-client-valid-wildcard",
            "objective": "[conditional] If the TSF supports wildcards for a DNS, URI, or SVR name type, the evaluator shall prepare the TSF as necessary \n                          to use the matching method for the name type, and establish a reference identifier. \n                          The evaluator shall establish a certificate for the test server that includes a wildcard name for the DNS portion of \n                          the appropriate name type which matches the reference identifier. \n                          The evaluator shall ensure the TLS server sends the certificate containing the wildcard name of the type tested, \n                          and observe that the TSF completes the connection. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "91b3502c-d23f-40be-95a8-8bf513483ab0": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "tls-client-no-wildcard",
            "objective": "[conditional] If the TSF supports a DNS, URI, or SVR name type, but does not support wildcards (in general, \n                          or specifically for internationalized names of the specified type), the evaluator shall prepare the TSF as necessary \n                          to use the matching method and establish a reference identifier that matches a wildcard name for the DNS portion of the appropriate name type, \n                          in accordance with the appropriate RFC, in a certificate representing the server. \n                          The evaluator shall ensure the TLS server sends the certificate containing the wildcard name of the type tested, \n                          and observe that the TSF terminates the connection. \n                        <p><b>Note:</b> If the TSF's ability to support wildcard certificates is configurable, \n                          both &lt;xref to=\"tls-client-valid-wildcard\"/&gt; and &lt;xref to=\"tls-client-no-wildcard\"/&gt; are performed under the appropriate configuration. \n                          This test is required if the TSF supports internationalized names of the specified type \u2013 in this case, the reference identifier only includes \n                          an internationalized encoding in the leftmost label. \n                          The certificate used is intended to match the certificate as if wildcards were supported and if the wildcard extended to internationalized names.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5c8d56e8-891f-458f-be1f-d5f70c7b68ed": {
            "testListUUID": "506c4626-eb4c-42bc-a2f2-ccc83392f5fd",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with two labels, and the certificate includes a name whose DNS portion includes \n                              a matching rightmost label and a wildcard in the leftmost label (e.g., *.com).",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6e218c9a-00b7-4d97-97c6-27cae3aa2915": {
            "testListUUID": "506c4626-eb4c-42bc-a2f2-ccc83392f5fd",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with two labels, \n                              and the certificate includes a name whose DNS portion includes two rightmost labels matching the reference identifier, \n                              and a wildcard in a third (leftmost) label (e.g., *.example.com, which does not match \"example.com\").",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "25d5233e-21a9-4c8c-a08b-fd3198d33d6a": {
            "testListUUID": "506c4626-eb4c-42bc-a2f2-ccc83392f5fd",
            "id": "",
            "objective": "The reference identifier contains a DNS portion with four labels, \n                              and the certificate includes a name whose DNS portion includes two rightmost labels matching the reference identifier, \n                              and a wildcard in the third label, and a matching identifier in the fourth (leftmost) label (e.g., foo.*.example.com).",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5ab2a619-3eed-4570-abbe-97ce98b6f6b1": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "tls-client-invalid-wildcard",
            "objective": "\n                          [conditional] If the TSF supports wildcards for a DNS, URI, or SVR name type, the evaluator shall prepare the TSF as necessary to use the matching method. \n                          The evaluator shall establish a reference identifier and a certificate for the server as indicated in each of the sub-tests described below. \n                          The evaluator shall in turn, ensure the TLS server sends the certificate associated with the reference identifier \n                          and observe that the TSF terminates the session. \n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "506c4626-eb4c-42bc-a2f2-ccc83392f5fd"
            ]
          },
          "8b372eae-e056-4489-a9d9-85bcd0f2dc19": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "",
            "objective": "[conditional] If the TSF supports wildcards and supports embedded DNS, URI, or SVR name types in the CN, \n                          then for each supported name type, the evaluator shall repeat \n                          &lt;xref to=\"tls-client-valid-wildcard\"/&gt;, &lt;xref to=\"tls-client-no-wildcard\"/&gt;, and &lt;xref to=\"tls-client-invalid-wildcard\"/&gt;\n                          using certificates with the prescribed name embedded in the CN. \n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "37d980f1-f258-4893-8fa4-a23340d64a83": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "tls-client-ip-wildcard",
            "objective": "[conditional] If the TSF supports IP addresses as an embedded name type in the CN, \n                          the evaluator shall establish an IP address as a reference identifier and establish a certificate with a valid DNS name in the subject field, \n                          including a CN whose value is the digital formatting of the octets of the reference identifier. \n                          The evaluator shall ensure the server sends the certificate and observe that the TSF successfully completes the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b9cca855-3bd7-4507-ad7b-def41504daea": {
            "testListUUID": "df1ae1a6-52a4-403b-b412-5a9537c1f8f7",
            "id": "",
            "objective": "[conditional] If the TSF supports IP addresses and any embedded name type in the CN, \n                          the evaluator shall establish an IP address as a reference identifier and establish a certificate with a valid DNS name in the subject field, \n                          including a CN whose value is the digital formatting of the octets of the reference identifier (as in &lt;xref to=\"tls-client-ip-wildcard\"/&gt;) \n                          except that one of the octets is replaced by the \u2018*\u2019 character. \n                          The evaluator shall ensure the server sends the certificate and observe that the TSF terminates the session.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4657f597-c685-44bc-acf5-c1d256bcc022": {
            "testListUUID": "59a505eb-4a5b-4476-a7eb-f4de34c388c3",
            "id": "",
            "objective": "\n                      (certificate identifiers) For each supported method of matching presented identifiers, \n                      and for each name type for which the TSF parses the presented identifiers from the server certificate for the method, \n                      the evaluator shall establish a valid certificate trusted by the TSF to represent the test server using only the tested name type. The evaluator shall perform the following sub-tests: \n                      ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "df1ae1a6-52a4-403b-b412-5a9537c1f8f7"
            ]
          },
          "362ca2b1-1202-4a4f-b382-d22de6ef8515": {
            "testListUUID": "e448b764-859e-466a-917e-70d5517a942f",
            "id": "",
            "objective": "The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the SAN. \n                        The evaluator shall ensure that the test server sends the certificate with the matching SAN and non-matching CN-encoded name, and observe that the TSF completes the connection.\n                        <p><b>Note:</b> Configuration of the TSF may depend on the application using TLS.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a2f6f406-a11a-41f9-97fc-6f5f28d49d3b": {
            "testListUUID": "e448b764-859e-466a-917e-70d5517a942f",
            "id": "",
            "objective": "The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the CN-encoded name. \n                        The evaluator shall ensure that the test server sends the certificate with the matching CN-encoded name and non-matching SAN, and observe that the TSF terminates the session.\n                        <p>\n                        It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1a1265c1-c632-4ed5-8532-2499f31df55d": {
            "testListUUID": "59a505eb-4a5b-4476-a7eb-f4de34c388c3",
            "id": "",
            "objective": "(mixed identifiers)[conditional] If the TSF supports a name matching method where the TSF performs matching of both CN-encoded name types and SAN names of the same type, \n                      then for each such method, and for each such name type, the evaluator shall establish a valid certificate trusted by the TSF \n                      to represent the test server using one name for the CN-encoded name type and a different name for the SAN name type The evaluator shall perform the following tests: \n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "e448b764-859e-466a-917e-70d5517a942f"
            ]
          },
          "8bfb9e53-ad1d-491b-82a4-a3a0344bf39b": {
            "testListUUID": "59a505eb-4a5b-4476-a7eb-f4de34c388c3",
            "id": "",
            "objective": "(empty certificate) The evaluator shall configure the test TLS server to supply an empty certificate message and verify that the TSF terminates the session.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7cbafa1c-f9af-41f6-b2fb-ff74ad7859e3": {
            "testListUUID": "59a505eb-4a5b-4476-a7eb-f4de34c388c3",
            "id": "",
            "objective": "(invalid certificate) [conditional] If validity exceptions are supported, \n                      then  for each exception for certificate validity supported, \n                      the evaluator shall configure the TSF to allow the exception and ensure the test TLS server sends a certificate that is valid and trusted, \n                      except for the allowed exception. The evaluator shall observe that the TSF completes the session. \n                      <p>\n                      Without modifying the TSF configuration, the evaluator shall initiate a new session with the test TLS server that includes an additional validation error, and observe that the TSF terminates the session.\n                      </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., decode error, bad certificate) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                      </p> <p>\n                      The intent of this test is to verify the scope of the exception processing. \n                      If verifying certificate status information is claimed as an exception, then this test will verify that a TLS session succeeds when all supported methods for obtaining certificate status information is blocked from the TSF, \n                      to include removing any status information that might be cached by the TSF. \n                      If the exception is limited to specific certificates \n                      (e.g., only leaf certificates are exempt, or only certain leaf certificates are exempt) \n                      the additional validation error could be unavailable revocation information for a non-exempt certificate \n                      (e.g., revocation status information from an intermediate CA is blocked for the issuing CA of an exempt leaf certificate, \n                      or revocation information from the issuing CA is blocked for a non-exempt leaf certificate). \n                      If the only option for the exception is for all revocation information for all certificates, another validation error from &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  (e.g., certificate expiration, extended key usage, etc.) may be used. \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "20aae0fd-46d0-4aec-bcb9-32bcab42a8a8": {
            "testListUUID": "478d3431-32d2-4493-b4eb-a3f875c0c9ac",
            "id": "",
            "objective": "\n                  [conditional] If the TSF supports certificate-based server authentication, \n                  then for each supported version, the evaluator shall initiate a TLS session from the TOE to the compliant test TLS server \n                  configured to negotiate the tested version, and to authenticate using a certificate trusted by the TSF as specified in the following:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "59a505eb-4a5b-4476-a7eb-f4de34c388c3"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.2": {
    "title": "TLS Client Support for Mutual Authentication",
    "cc_id": "FCS_TLSC_EXT.2",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "99f5b51a-1ff5-4e94-93b5-d9881dd2bc35"
      ],
      "selections": [
        "922e94db-8619-47cc-8c30-befcc1011f00"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support mutually-authenticated DTLS when acting as a TLS client.\n          ",
      "dependencies": "FCS_TLSC_EXT.1 TLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "246a32c1-de99-4ef9-9b38-d9d661124ff2": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "2b18863a-3c04-4527-a601-cf2cd00e2893": {
        "elementXMLID": "fel-mut-auth-certs",
        "selectableGroups": {
          "group-124": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "a6dbc56d-4eef-4498-bef5-2bf633b2a74b",
              "2bedae9e-76d3-40f4-9794-b1998ec376be"
            ]
          },
          "group-125": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "c09970fd-eb23-424e-a64e-f1040c85cd27",
              "4b7cfc45-8788-419a-8ebc-931e2520ddb4"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support mutual TLS authentication using X.509v3 certificates during the handshake and "
          },
          {
            "selections": "group-124"
          },
          {
            "text": ", in accordance with "
          },
          {
            "selections": "group-125"
          },
          {
            "text": "."
          }
        ],
        "selectables": {
          "a6dbc56d-4eef-4498-bef5-2bf633b2a74b": {
            "type": "selectable",
            "uuid": "a6dbc56d-4eef-4498-bef5-2bf633b2a74b",
            "id": "fcs_tlsc_ext.2.1_1",
            "description": "in support of post-handshake authentication requests",
            "exclusive": false,
            "nestedGroups": []
          },
          "2bedae9e-76d3-40f4-9794-b1998ec376be": {
            "type": "selectable",
            "uuid": "2bedae9e-76d3-40f4-9794-b1998ec376be",
            "id": "fcs_tlsc_ext.2.1_2",
            "description": "at no other time",
            "exclusive": false,
            "nestedGroups": []
          },
          "c09970fd-eb23-424e-a64e-f1040c85cd27": {
            "type": "selectable",
            "uuid": "c09970fd-eb23-424e-a64e-f1040c85cd27",
            "id": "fcs_tlsc_ext.2.1_3",
            "description": "RFC 5246, Section 7.4.4",
            "exclusive": false,
            "nestedGroups": []
          },
          "4b7cfc45-8788-419a-8ebc-931e2520ddb4": {
            "type": "selectable",
            "uuid": "4b7cfc45-8788-419a-8ebc-931e2520ddb4",
            "id": "fcs_tlsc_ext.2.1_4",
            "description": "RFC 8446, Section 4.3.2",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"mutual authentication\" is selected in FCS_TLSC_EXT.1.1.\n              </p> <p>\n              Clients that support TLS 1.3 and post-handshake authentication should claim \"in support of post-handshake authentication requests\"\n              in the first selection.  \n              The \"at no other time\" selection is claimed for clients only supporting TLS 1.2 or for TLS 1.3 clients that do not support post-handshake authentication.  \n              </p> <p>\n              The certificate request message sent by the server specifies the signature algorithms and certification authorities supported by the server. \n              If the client does not possess a matching certificate, it sends an empty certificate message. \n              The structure of the certificate request message is changed in TLS 1.3 to use the signature_algorithm, signature_algorithms_cert (optional), and certificate_authorities extensions, \n              and RFC 8446 allows for TLS 1.2 implementations to use the new message structure. \n              The \"RFC 8446, Section 4.3.2\" option is claimed in the second selection if TLS 1.3 is supported or if TLS 1.2 is supported and the RFC 8446 method is supported for TLS 1.2 servers. \n              The \"RFC 5246, Section 7.4.4\" option is claimed if TLS 1.2 is supported and the RFC 5246 method is supported for interoperability with TLS 1.2 servers that do not adopt the RFC 8446 method. \n              When mutual authentication is supported, at least one of these methods must be claimed, per the selection.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "070aa465-ca68-4e5a-98f7-adef660169df": {
        "tss": "<p>\n                The evaluator shall ensure that the TSS description required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes the use of client-side certificates for TLS mutual authentication. \n                The evaluator shall also ensure that the TSS describes any factors beyond configuration that are necessary in order for the client to engage in mutual authentication using X.509v3 certificates.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall ensure that the operational guidance includes any instructions necessary to configure the TOE to perform mutual authentication. \n                The evaluator shall also verify that the operational guidance required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes instructions for configuring the client-side certificates for TLS mutual authentication.\n                </p>",
        "testIntroduction": "For each supported TLS version, the evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "4ad5f37b-178c-4ae2-95d7-abac4d703996": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "d44ae9dd-a9a4-43de-8226-e52c691ed591",
              "05d70575-11c8-4719-a797-a26d01ace332",
              "92671c57-45cb-426c-b4d3-e49deb631834"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "d44ae9dd-a9a4-43de-8226-e52c691ed591": {
            "testListUUID": "4ad5f37b-178c-4ae2-95d7-abac4d703996",
            "id": "",
            "objective": "The evaluator shall establish a TLS connection from the TSF to a test TLS server that negotiates the tested version \n           and which is not configured for mutual authentication (i.e., does not send a Server\u2019s Certificate Request (type 13) message). \n           The evaluator shall observe negotiation of a TLS channel and confirm that the TOE did not send a Client\u2019s Certificate message (type 11) during handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "05d70575-11c8-4719-a797-a26d01ace332": {
            "testListUUID": "4ad5f37b-178c-4ae2-95d7-abac4d703996",
            "id": "",
            "objective": "The evaluator shall establish a connection to a test TLS server with a shared trusted root that is configured for mutual authentication \n           (i.e., it sends a Server\u2019s Certificate Request (type 13) message). \n           The evaluator shall observe negotiation of a TLS channel and confirm that the TOE responds with a non-empty Client\u2019s Certificate message (type 11) and Certificate Verify (type 15) message.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "92671c57-45cb-426c-b4d3-e49deb631834": {
            "testListUUID": "4ad5f37b-178c-4ae2-95d7-abac4d703996",
            "id": "",
            "objective": "[conditional] If the TSF supports post-handshake authentication, \n           the evaluator shall establish a pre-shared key between the TSF and a test TLS 1.3 server. \n           The evaluator shall initiate a TLS session using the pre-shared key and confirm the TSF and test TLS 1.3 server successfully complete the TLS handshake and both support post-handshake authentication. \n           After the session is successfully established, the evaluator shall initiate a certificate request message from the test TLS 1.3 server. \n           The evaluator shall observe that the TSF receives that authentication request \n           and shall take necessary actions, in accordance with the operational guidance, to complete the authentication request. \n           The evaluator shall confirm that the test TLS 1.3 server receives certificate and certificate verification messages from the TSF over the channel that authenticates the client.\n           <p><b>Note:</b> TLS 1.3 certificate requests from the test server and client certificate and certificate verify messages are encrypted. \n           The evaluator shall confirm that the TSF sends the appropriate messages by examining the messages received at the test TLS 1.3 server and by inspecting any relevant server logs. \n           The evaluator may also take advantage of the calling application to demonstrate that the TOE receives data configured at the test TLS server. \n           </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.3": {
    "title": "TLS Client Downgrade Protection",
    "cc_id": "FCS_TLSC_EXT.3",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "99f5b51a-1ff5-4e94-93b5-d9881dd2bc35"
      ],
      "selections": [
        "5c36d97c-27e5-4b65-bd33-381033966ea5"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to implement version downgrade protection when acting as a TLS client.\n          ",
      "dependencies": "FCS_TLSC_EXT.1 TLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "7f15511e-36de-47d4-8342-0ee22f4081b8": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "533759b7-f7b8-41a9-8706-12f88af3d477": {
        "elementXMLID": "fcs_tlsc_ext-3-1",
        "selectableGroups": {
          "group-126": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "ecfde4bb-a115-4e2b-8512-6024dc0cef88",
              "48e816f9-26cd-4f53-84d5-eb6d74d55b30"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall not establish a TLS channel if the ServerHello message includes \n              "
          },
          {
            "selections": "group-126"
          },
          {
            "text": "\n              in the server random field. "
          }
        ],
        "selectables": {
          "ecfde4bb-a115-4e2b-8512-6024dc0cef88": {
            "type": "selectable",
            "uuid": "ecfde4bb-a115-4e2b-8512-6024dc0cef88",
            "id": "fcs_tlsc_ext.3.1_1",
            "description": "TLS 1.2 downgrade indicator",
            "exclusive": false,
            "nestedGroups": []
          },
          "48e816f9-26cd-4f53-84d5-eb6d74d55b30": {
            "type": "selectable",
            "uuid": "48e816f9-26cd-4f53-84d5-eb6d74d55b30",
            "id": "fcs_tlsc_ext.3.1_2",
            "description": "TLS 1.1 or below downgrade indicator",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"supplemental downgrade protection\" is selected in FCS_TLSC_EXT.1.1.\n              </p> <p>\n              The ST author claims the \u201cTLS 1.2 downgrade indicator\u201d when FCS_TLSC_EXT.1 indicates support for both TLS 1.2 and TLS 1.3 and \n              implements supplemental downgrade protection. \n              This option is not claimed if TLS 1.3 is not supported. \n              The \u201cTLS 1.1 or below downgrade indicator\u201d option may also be claimed if supported, \n              but should only be claimed if the TSF is capable of detecting the indicator. \n              This package requires the TSF to always terminate TLS 1.1 sessions based on the ServerHello negotiated version field; it is \n              acceptable to ignore any downgrade indicator. \n              However, a TSF that is capable of detecting the TLS 1.1 or below downgrade indicator may claim this option if it takes\n              different actions depending on whether the TLS 1.1 or below downgrade indicator is set. \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "8eaaa0ce-5736-4f1e-95aa-24b2704eecc0": {
        "tss": "<p>\n                The evaluator shall review the TSS and confirm that the description of the TLS client protocol includes the downgrade protection mechanism in accordance with RFC 8446 \n                and identifies any configurable features of the TSF needed to meet the requirements. \n                If the ST claims that the TLS 1.1 and below indicator is processed, \n                the evaluator shall confirm that the TSS indicates which configurations allow processing of the downgrade indicator \n                and the specific response of the TSF when it receives the downgrade indicator as opposed to simply terminating the session for the unsupported version.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall review the operational guidance and confirm that any instructions to configure the TSF to meet the requirements are included.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests to confirm the response to downgrade indicators from a test TLS 1.3 server:",
        "testClosing": "",
        "testLists": {
          "a6cad43e-70d2-4e49-9687-562a7ab12006": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "0f09921b-bbe6-4228-86cf-e41e84671279",
              "75f2b66e-8611-4be5-8aea-b9565d8ec314"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "0f09921b-bbe6-4228-86cf-e41e84671279": {
            "testListUUID": "a6cad43e-70d2-4e49-9687-562a7ab12006",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS 1.3 session with a test TLS 1.3 server \n                  configured to send a compliant TLS 1.2 ServerHello (not including any TLS 1.3 extensions) \n                  but including the TLS 1.2 downgrade indicator \u201844 4F 57 4E 47 52 44 01\u2019 in the last eight bytes of the server random field. \n                  The evaluator shall confirm that the TSF terminates the session.\n                  <p><b>Note:</b> It is preferred that the TSF send a fatal error alert message (e.g., illegal parameter), but it is acceptable that the TSF terminate the session without sending an error alert.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "75f2b66e-8611-4be5-8aea-b9565d8ec314": {
            "testListUUID": "a6cad43e-70d2-4e49-9687-562a7ab12006",
            "id": "",
            "objective": "[conditional] If the TSF supports the TLS 1.1 or below downgrade indicator and if the ST indicates a configuration where the indicator is processed, \n                  the evaluator shall follow operational guidance instructions to configure the TSF so it parses a TLS 1.1 handshake to detect and process the TLS downgrade indicator. \n                  The evaluator shall initiate a TLS session between the TOE and a test TLS server that is configured to send a TLS 1.1 ServerHello message \n                  with the downgrade indicator \u201844 4F 57 4E 47 52 44 00\u2019 in the last eight bytes of the server random field, \n                  but which is otherwise compliant with RFC 4346. The evaluator shall observe that the TSF terminates the session as described in the ST.\n                  <p><b>Note:</b> It is preferred that the TSF send a fatal error alert message (illegal parameter or unsupported version), but it is acceptable that the TSF terminate the session without sending an error alert. \n                  </p> <p>\n                  Use of the TLS 1.1 and below indicator as a redundant mechanism \n                  where there is no configuration that actually processes the value does not require additional testing, \n                  since this would be addressed by &lt;xref to=\"tls-client-obsolete-versions\"/&gt; for FCS_TLSC_EXT.1.1. \n                  This test is only required if the TSF responds differently (e.g., a different error alert) when the downgrade indicator is present than when TLS 1.1 or below is negotiated and the downgrade indicator is not present.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.4": {
    "title": "TLS Client Support for Renegotiation",
    "cc_id": "FCS_TLSC_EXT.4",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "6f4ccf3d-f268-4462-a602-02bfb4823d60"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session renegotiation when acting as a TLS client.\n          ",
      "dependencies": "FCS_TLSC_EXT.1 TLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "d57723d4-fdb4-48df-9e86-0272ed1b99ee": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "b56b6d8d-34b3-420c-a1ff-63b6b4412d12": {
        "elementXMLID": "fel-tlsc-renego",
        "selectableGroups": {
          "group-127": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "8b859fe3-ec7f-4057-9251-0ba823949f50",
              "18c7773e-e778-4143-850f-25d48688d755",
              "6a3c5a4f-1436-466d-82c1-520c1853f03c"
            ]
          },
          "group-128": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "563f468d-5109-43a1-8978-97a69457bb28",
              "1a0889ee-a46c-41ee-ae35-dd43534ac9d0"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support secure TLS renegotiation through use of\n              "
          },
          {
            "selections": "group-127"
          },
          {
            "text": "\n              and shall terminate the session if an unexpected ServerHello is received or "
          },
          {
            "selections": "group-128"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "8b859fe3-ec7f-4057-9251-0ba823949f50": {
            "type": "selectable",
            "uuid": "8b859fe3-ec7f-4057-9251-0ba823949f50",
            "id": "fcs_tlsc_ext.4.1_1",
            "description": "the \u201crenegotiation_info\u201d TLS extension",
            "exclusive": false,
            "nestedGroups": []
          },
          "18c7773e-e778-4143-850f-25d48688d755": {
            "type": "selectable",
            "uuid": "18c7773e-e778-4143-850f-25d48688d755",
            "id": "fcs_tlsc_ext.4.1_2",
            "description": "the TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuite signaling value in accordance with RFC 5746",
            "exclusive": false,
            "nestedGroups": []
          },
          "6a3c5a4f-1436-466d-82c1-520c1853f03c": {
            "type": "selectable",
            "uuid": "6a3c5a4f-1436-466d-82c1-520c1853f03c",
            "id": "fcs_tlsc_ext.4.1_3",
            "description": "rejection of all renegotiation attempts",
            "exclusive": false,
            "nestedGroups": []
          },
          "563f468d-5109-43a1-8978-97a69457bb28": {
            "type": "selectable",
            "uuid": "563f468d-5109-43a1-8978-97a69457bb28",
            "id": "fcs_tlsc_ext.4.1_4",
            "description": "hello request message is received",
            "exclusive": false,
            "nestedGroups": []
          },
          "1a0889ee-a46c-41ee-ae35-dd43534ac9d0": {
            "type": "selectable",
            "uuid": "1a0889ee-a46c-41ee-ae35-dd43534ac9d0",
            "id": "fcs_tlsc_ext.4.1_5",
            "description": "in no other case",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"TLS as a client\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n                The ST author claims the methods supported.\n              </p> <p>\n              A client supporting TLS 1.2 renegotiation may present either the \"renegotiation_info\" extension or the \n              signaling ciphersuite value TLS_EMPTY_RENEGOTIATION_INFO_SCSV in the initial \n              ClientHello message to indicate support for secure renegotiation.\n              </p> <p>\n                A client supporting TLS 1.3 must claim \"rejection of all renegotiation attempts.\" This option may also be claimed as a \n                method for TLS 1.2 renegotiation protection.\n              </p> <p>\n              The TLS_EMPTY_RENEGOTIATION_INFO_SCSV is the preferred mechanism for TLS 1.2 protection against insecure renegotiation when the\n              client does not renegotiate. \n              The ST author will claim the \u2018hello request message is received\u2019 option in the second selection to indicate support for this\n              mechanism.\n              </p> <p>\n              RFC 5746 allows the client to accept connections with servers that do not support the extension; \n              this FP refines RFC 5746 and requires the client to terminate sessions with such servers. \n              Thus, unexpected ServerHello messages include an initial ServerHello negotiating \n              TLS 1.2 that does not contain a renegotiation_info extension, \n              an initial ServerHello negotiating TLS 1.2 that has a renegotiation_info extension that is non-empty, \n              a subsequent ServerHello renegotiating TLS 1.2 that does not contain a renegotiation_info extension, \n              a subsequent ServerHello negotiating TLS 1.2 that has a renegotiation_info extension with an incorrect renegotiated_connection\n              value, and a ServerHello request message when renegotiation is not allowed (for TLS 1.3 or when the option is claimed for TLS 1.2). \n              </p> <p>\n              TLS 1.3 provides protection against insecure renegotiation by not allowing renegotiation. \n              If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, the client receives a ServerHello that attempts to negotiate TLS 1.3, and the ServerHello\n              also contains a non-empty renegotiation_info extension; the client will terminate the connection.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "6e71001e-0bfe-4da7-ac17-22c7557db6cb": {
        "tss": "<p>\n                The evaluator shall examine the TSS to ensure that TLS renegotiation protections are described in accordance with the requirements. \n                The evaluator shall ensure that any configurable features of the renegotiation protections are identified.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall examine the operational guidance to confirm that instructions for any configurable features of the renegotiation protection mechanisms are included.\n              </p>",
        "testIntroduction": "The evaluator shall perform the following tests as indicated. If TLS 1.2 is supported and one or more of the secure renegotiation methods defined in RFC 5746 is claimed, &lt;xref to=\"tls-client-accepts-renegotiation\"/&gt; is required. If TLS 1.2 is supported and the TSF (has a configuration that) rejects all TLS 1.2 renegotiation attempts, or if TLS 1.3 is supported, &lt;xref to=\"tls-client-prevents-renegotiation\"/&gt; is required.",
        "testClosing": "",
        "testLists": {
          "8824cdea-2504-41e6-b200-e516a1aa78e6": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "41840372-e2b9-4ab7-aafd-dc1546bb2b6b",
              "28659e8e-9df9-4f40-bddd-8c0210523745"
            ],
            "conclusion": ""
          },
          "d3cd9e24-ebfe-4709-beff-7838306605c9": {
            "parentTestUUID": "41840372-e2b9-4ab7-aafd-dc1546bb2b6b",
            "description": "",
            "testUUIDs": [
              "8c48297c-ba05-4aba-91d6-21c9932c8825",
              "a7d206a4-aafe-4bfc-9823-d1c5e7edee82"
            ],
            "conclusion": ""
          },
          "ea491618-9c31-40aa-ae64-1ea6939ca87e": {
            "parentTestUUID": "a7d206a4-aafe-4bfc-9823-d1c5e7edee82",
            "description": "",
            "testUUIDs": [
              "659c158a-834c-48bc-97b8-12df7214b504",
              "5d83921c-1c2f-40e3-91bc-a97a04983f15",
              "de931a6d-3323-4f8d-9dc9-d4a5a9229aad"
            ],
            "conclusion": ""
          },
          "2a13cb33-3469-4108-944b-1f615100f5fb": {
            "parentTestUUID": "28659e8e-9df9-4f40-bddd-8c0210523745",
            "description": "",
            "testUUIDs": [
              "2a80cd9b-3e20-4018-8470-2c4fc60ff724",
              "b03b2deb-a964-4320-862a-100385d18513"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "8c48297c-ba05-4aba-91d6-21c9932c8825": {
            "testListUUID": "d3cd9e24-ebfe-4709-beff-7838306605c9",
            "id": "tls-client-offers-renegotiation",
            "objective": "The evaluator shall initiate a TLS connection with a test server configured to negotiate a compliant TLS 1.2 handshake. \n                    The evaluator shall inspect the messages received by the test TLS 1.2 server. \n                    The evaluator shall observe that either the \u201crenegotiation_info\u201d field or the SCSV ciphersuite is included in the ClientHello message during the initial handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "659c158a-834c-48bc-97b8-12df7214b504": {
            "testListUUID": "ea491618-9c31-40aa-ae64-1ea6939ca87e",
            "id": "",
            "objective": "The evaluator shall configure the test TLS 1.2 server to send a renegotiation_info extension whose value indicates a non-zero length. \n                      The evaluator shall confirm that the TSF terminates the connection. \n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5d83921c-1c2f-40e3-91bc-a97a04983f15": {
            "testListUUID": "ea491618-9c31-40aa-ae64-1ea6939ca87e",
            "id": "",
            "objective": "The evaluator shall configure the test TLS 1.2 server to send a compliant renegotiation_info extension and observe the TSF successfully completes the TLS 1.2 connection.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "de931a6d-3323-4f8d-9dc9-d4a5a9229aad": {
            "testListUUID": "ea491618-9c31-40aa-ae64-1ea6939ca87e",
            "id": "",
            "objective": "The evaluator shall initiate a session renegotiation after completing a successful handshake with a test TLS 1.2 server that completes a successful TLS 1.2 handshake \n                      (as in &lt;xref to=\"tls-client-offers-renegotiation\"/&gt;) and then sends a HelloRequest from the test TLS server with a \n                      \u201crenegotiation_info\u201d extension that has an unexpected \u201cclient_verify_data\u201d or \u201cserver_verify_data\u201d \n                      value (modify a byte from a compliant response). The evaluator shall verify that the TSF terminates the connection.\n                      <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake error) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a7d206a4-aafe-4bfc-9823-d1c5e7edee82": {
            "testListUUID": "d3cd9e24-ebfe-4709-beff-7838306605c9",
            "id": "",
            "objective": "For each of the following sub-tests, the evaluator shall initiate a new TLS connection with a test TLS 1.2 server configured to send a renegotiation_info extension as specified, \n                    but otherwise complete a compliant TLS 1.2 session:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "ea491618-9c31-40aa-ae64-1ea6939ca87e"
            ]
          },
          "41840372-e2b9-4ab7-aafd-dc1546bb2b6b": {
            "testListUUID": "8824cdea-2504-41e6-b200-e516a1aa78e6",
            "id": "tls-client-accepts-renegotiation",
            "objective": "[conditional] If the TSF supports TLS 1.2 and supports a configuration to accept renegotiation requests for TLS 1.2, \n                  the evaluator shall follow any operational guidance to configure the TSF. The evaluator shall perform the following tests:  \n                ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "d3cd9e24-ebfe-4709-beff-7838306605c9"
            ]
          },
          "2a80cd9b-3e20-4018-8470-2c4fc60ff724": {
            "testListUUID": "2a13cb33-3469-4108-944b-1f615100f5fb",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.2 and supports a configuration to reject TLS 1.2 renegotiation, the evaluator shall follow the operational guidance as necessary to prevent renegotiation.  The evaluator shall initiate a TLS session between the so-configured TSF and a test TLS 1.2 server that is configured to perform a compliant handshake, followed by a HelloRequest. The evaluator shall confirm that the TSF completes the initial handshake successfully but does not initiate renegotiation after receiving the HelloRequest.\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b03b2deb-a964-4320-862a-100385d18513": {
            "testListUUID": "2a13cb33-3469-4108-944b-1f615100f5fb",
            "id": "",
            "objective": "[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS session between the TSF and a test TLS 1.3 server that completes a compliant TLS 1.3 handshake, \n                      followed by a HelloRetryRequest message. The evaluator shall observe that the TSF completes the initial TLS 1.3 handshake successfully, but terminates the session on receiving the HelloRetryRequest message.\n                      <p>\n                      It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, \n                      but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "28659e8e-9df9-4f40-bddd-8c0210523745": {
            "testListUUID": "8824cdea-2504-41e6-b200-e516a1aa78e6",
            "id": "tls-client-prevents-renegotiation",
            "objective": "[conditional] if the TSF supports a configuration that prevents renegotiation, the evaluator shall perform the following tests:\n                  ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "2a13cb33-3469-4108-944b-1f615100f5fb"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.5": {
    "title": "TLS Client Support for Session Resumption",
    "cc_id": "FCS_TLSC_EXT.5",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "99f5b51a-1ff5-4e94-93b5-d9881dd2bc35"
      ],
      "selections": [
        "faa33367-7fd1-43d8-9aad-a36ece92aa18"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption when acting as a TLS client.\n          ",
      "dependencies": "FCS_TLSC_EXT.1 TLS Client Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "54f057d7-1da1-4069-8076-f7b651a55799": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "a379ca2d-19fe-438a-8414-041d3caea531": {
        "elementXMLID": "fcs_tlsc_ext-5-1",
        "selectableGroups": {
          "group-129": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "3af2e48c-94b5-4de9-aef2-b71ace09ce50",
              "3562abf4-3f78-485e-b200-1ceab90a50ef",
              "9a256eb4-5226-4c1d-938e-405a1d6fa98f"
            ]
          }
        },
        "title": [
          {
            "text": "\n            The TSF shall support session resumption as a TLS client via the use of "
          },
          {
            "selections": "group-129"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "3af2e48c-94b5-4de9-aef2-b71ace09ce50": {
            "type": "selectable",
            "uuid": "3af2e48c-94b5-4de9-aef2-b71ace09ce50",
            "id": "fcs_tlsc_ext.5.1_1",
            "description": "session ID in accordance with RFC 5246",
            "exclusive": false,
            "nestedGroups": []
          },
          "3562abf4-3f78-485e-b200-1ceab90a50ef": {
            "type": "selectable",
            "uuid": "3562abf4-3f78-485e-b200-1ceab90a50ef",
            "id": "fcs_tlsc_ext.5.1_2",
            "description": "tickets in accordance with RFC 5077",
            "exclusive": false,
            "nestedGroups": []
          },
          "9a256eb4-5226-4c1d-938e-405a1d6fa98f": {
            "type": "selectable",
            "uuid": "9a256eb4-5226-4c1d-938e-405a1d6fa98f",
            "id": "tlsc_v13_resumption",
            "description": "PSK and tickets in accordance with RFC 8446",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              This SFR is claimed if \"session resumption\" is selected in FCS_TLSC_EXT.1.1.\n              </p> <p>\n              The ST author indicates which session resumption mechanisms are supported. \n              One or both of the first two options, \"session ID in accordance with RFC 5246\" and \"tickets in accordance with RFC 5077\" are claimed\n              if resumption of TLS 1.2 sessions is supported. \n              If resumption of TLS 1.3 sessions is supported, \"PSK and tickets in accordance with RFC 8446\" is selected, and the selection-based SFR FCS_TLSC_EXT.6 must also be claimed.\n              </p> <p>\n              While it is possible to perform session resumption using PSK ciphersuites in TLS 1.2, this is uncommon. \n              Validation of key establishment and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered in FCS_TLSC_EXT.1. \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "c5278dfc-929b-458c-a4fe-8301a00fc6be": {
        "tss": "<p>\n                The evaluator shall examine the TSS and confirm that the TLS client protocol description includes a description of the supported resumption mechanisms.\n              </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.\n              </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "e89b3881-1705-4ddd-b922-8660ca9511db": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "963757c1-0df9-44e0-a443-0827e6a05f5f",
              "2d784c5f-a9e9-4006-b40b-b83be8ccbf78"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "963757c1-0df9-44e0-a443-0827e6a05f5f": {
            "testListUUID": "e89b3881-1705-4ddd-b922-8660ca9511db",
            "id": "tls-client-successful-resumption",
            "objective": "For each supported TLS version and for each supported resumption mechanism that is supported for that version, \n                  the evaluator shall establish a new TLS session between the TSF and a compliant test TLS server that is configured to negotiate the indicated version \n                  and perform resumption using the indicated mechanism. \n                  The evaluator shall confirm that the TSF completes the initial TLS handshake and shall cause the TSF to close the session normally. \n                  The evaluator shall then cause the TSF to resume the session with the test TLS server using the indicated method and observe that the TSF successfully establishes the session.\n                  <p><b>Note:</b> For each method, successful establishment refers to proper use of the mechanism, to include compliant extensions and behavior, as indicated in the referenced RFC.\n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2d784c5f-a9e9-4006-b40b-b83be8ccbf78": {
            "testListUUID": "e89b3881-1705-4ddd-b922-8660ca9511db",
            "id": "",
            "objective": "(TLS 1.3 session id echo) [conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a new TLS 1.3 session with a test TLS server. \n                  The evaluator shall cause the test TLS server to send a TLS 1.3 ServerHello message \n                  (or a HelloRetryRequest if the TSF does not include the key_share extension) that contains a different value in the legacy_session_id field from the expected 32-byte value, and observe that the TSF terminates the session.\n                  <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, \n                  but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                  </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSC_EXT.6": {
    "title": "TLS Client TLS 1.3 Resumption Refinements",
    "cc_id": "FCS_TLSC_EXT.6",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [],
      "selections": [
        "9a256eb4-5226-4c1d-938e-405a1d6fa98f"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption behavior specific to TLS 1.3 when acting as a TLS client.\n          ",
      "dependencies": "FCS_TLSC_EXT.1 TLS Client Protocol<br/>\n            FCS_TLSC_EXT.5 TLS Client Support for Session Resumption\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "d95df164-9068-4872-806d-52df49a5f16e": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "e005aed8-7e78-4f5f-af52-7a22c5d57bb1": {
        "elementXMLID": "fcs_tlsc_ext-6-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall send a psk_key_exchange_modes extension with the value psk_dhe_ke when TLS 1.3 session resumption is offered. \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "e708ba1a-93a9-413f-93a2-5c45c0027b1d": {
        "elementXMLID": "fcs_tlsc_ext-6-2",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n                The TSF shall not send early data in TLS 1.3 sessions. \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"PSK and tickets in accordance with RFC 8446\" is selected in FCS_TLSC_EXT.5.1.\n              </p> <p>\n              This SFR is claimed when session resumption is supported for TLS 1.3. RFC 8446 allows pre-shared keys to be used directly \n              and also allows early data to be protected using only the pre-shared key. This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key establishment to ensure perfect forward secrecy for all sessions. \n            </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "7ffad2a4-5461-4763-860d-0a86fbaaf114": {
        "tss": "<p>\n                The evaluator shall examine the TSS to verify that the TLS client protocol description indicates that a PSK cannot be used without DHE or ECDHE and prohibits sending early data.\n                The evaluator shall examine the TSS to verify it lists all applications that can be secured by TLS 1.3 using pre-shared keys and \n                describes how each TLS 1.3 client application ensures data for the application is not sent using early data.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. \n                The evaluator shall ensure the operational guidance includes any instructions required to configure applications so the TLS 1.3 client implementation does not send early data.\n                </p>",
        "testIntroduction": "[conditional] For each application that is able to be secured via TLS 1.3 using PSK, the evaluator shall follow operational guidance to configure the application not to send early data. The evaluator shall cause the application to initiate a resumed TLS 1.3 session between the TSF and a compliant test TLS 1.3 server as in &lt;xref to=\"tls-client-successful-resumption\"/&gt; in FCS_TLSC_EXT.5. The evaluator shall observe that the TSF ClientHello for TLS 1.3 includes the psk_mode extension with the value psk_dhe_ke and sends a key share value for a supported group. The evaluator shall confirm that early data is not received by the test TLS server. <p><b>Note:</b> If no applications supported by the TOE provide data to TLS 1.3 that can be sent using PSK, this test is omitted.\n                </p>",
        "testClosing": "",
        "testLists": {},
        "tests": {},
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.1": {
    "title": "TLS Server Protocol",
    "cc_id": "FCS_TLSS_EXT.1",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "cd777e9b-1e09-4b8f-aa83-bd011a110ae8"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "The following actions should be auditable if FAU_GEN Security Audit Data Generation is included in the PP, PP-Module, functional package, or ST: <ul><li>Failure to establish a TLS session </li> </ul> ",
      "componentLeveling": " requires the TSF to implement TLS as a server in the specified manner.\n          ",
      "dependencies": "\n            FCS_CKM.1 Cryptographic Key Generation<br/>\n            FCS_CKM.2 Cryptographic Key Distribution<br/>\n            FCS_COP.1 Cryptographic Operation<br/>\n            FCS_RBG.1 Random Bit Generation (RBG)<br/>\n            FIA_X509_EXT.1 X.509 Certificate Validation<br/>\n            FIA_X509_EXT.2 X.509 Certificate Authentication\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "956455d7-a03a-403a-894b-0e83ca44d24c": {
        "description": "Failure to establish a TLS session",
        "items": [
          {
            "info": "Reason for failure",
            "optional": false
          }
        ],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "b9c51387-6a65-4d4c-9b81-4d9fd8fa76dc": {
        "elementXMLID": "fel-tlss-impl",
        "selectableGroups": {
          "group-130": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "74f8235d-27f6-4254-8522-ef30a39b2e93",
              "8ce2e72b-881f-4473-b68a-ce371b7ff3e1"
            ]
          },
          "group-131": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "e1131dca-00bd-4476-a477-3ae2ca8f03e9",
              "cc8cd872-b5d7-4c5f-8a66-ee58c367c24d",
              "a72d6b0c-f0e8-4e19-ba60-65b35907c7fb",
              "50a372e7-5b23-426c-aafd-d9ef945ed00f"
            ]
          }
        },
        "title": [
          {
            "text": " The TSF shall implement\n              "
          },
          {
            "selections": "group-130"
          },
          {
            "text": " as a server that supports additional functionality for session renegotiation protection and\n              "
          },
          {
            "selections": "group-131"
          },
          {
            "text": "\n              and shall reject connection attempts from clients supporting only TLS 1.1, TLS 1.0, or SSL versions.\n            "
          }
        ],
        "selectables": {
          "74f8235d-27f6-4254-8522-ef30a39b2e93": {
            "type": "selectable",
            "uuid": "74f8235d-27f6-4254-8522-ef30a39b2e93",
            "id": "fcs_tlss_ext.1.1_1",
            "description": "TLS 1.2 (RFC 5246)",
            "exclusive": false,
            "nestedGroups": []
          },
          "8ce2e72b-881f-4473-b68a-ce371b7ff3e1": {
            "type": "selectable",
            "uuid": "8ce2e72b-881f-4473-b68a-ce371b7ff3e1",
            "id": "fcs_tlss_ext.1.1_2",
            "description": "TLS 1.3 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "e1131dca-00bd-4476-a477-3ae2ca8f03e9": {
            "type": "selectable",
            "uuid": "e1131dca-00bd-4476-a477-3ae2ca8f03e9",
            "id": "tlss_mutual_auth",
            "description": "mutual authentication",
            "exclusive": false,
            "nestedGroups": []
          },
          "cc8cd872-b5d7-4c5f-8a66-ee58c367c24d": {
            "type": "selectable",
            "uuid": "cc8cd872-b5d7-4c5f-8a66-ee58c367c24d",
            "id": "tlss_downgrade_protection",
            "description": "supplemental downgrade protection",
            "exclusive": false,
            "nestedGroups": []
          },
          "a72d6b0c-f0e8-4e19-ba60-65b35907c7fb": {
            "type": "selectable",
            "uuid": "a72d6b0c-f0e8-4e19-ba60-65b35907c7fb",
            "id": "tlss_resumption",
            "description": "session resumption",
            "exclusive": false,
            "nestedGroups": []
          },
          "50a372e7-5b23-426c-aafd-d9ef945ed00f": {
            "type": "selectable",
            "uuid": "50a372e7-5b23-426c-aafd-d9ef945ed00f",
            "id": "fcs_tlss_ext.1.1_3",
            "description": "no optional functionality",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"TLS as a server\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n              These requirements will be revisited as new TLS versions are standardized by the IETF.\n              </p> <p>\n                Session renegotiation protection is required for both TLS 1.2 and TLS 1.3, and the ST must include the requirements from FCS_TLSS_EXT.4. \n                Within FCS_TLSS_EXT.4, options for implementation of secure session renegotiation for TLS 1.2 or rejecting renegotiation requests are claimed.\n              </p> <p>\n              If \"mutual authentication\" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.2. If the TOE implements TLS with mutual authentication, this selection must be made.\n              </p> <p>\n                Supplemental downgrade protection is claimed if both TLS 1.2 and TLS 1.3 are supported. If \"supplemental downgrade protection\" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.3. \n              If the TOE provides downgrade protection as indicated in RFC 8446, in particular, if TLS 1.3 is supported, this selection must be made. \n              </p> <p>\n              If \"session resumption\" is selected, then the ST must additionally include the requirements from FCS_TLSS_EXT.5.\n              </p>"
      },
      "fa8d6527-ee57-435a-84ba-a08df72186d6": {
        "elementXMLID": "fcs_tlss_ext-1-2",
        "selectableGroups": {
          "group-132": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "fcs_tlss_ext.1.2_1",
              "f593e06f-2859-4737-a9c0-1db8b9b0c47e"
            ]
          },
          "fcs_tlss_ext.1.2_1": {
            "description": [
              {
                "text": "TLS 1.2 ciphersuites:"
              },
              {
                "groups": [
                  "group-134"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-134": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "e8010a7f-ae5e-4dae-813b-935b7198ff61",
              "71d11364-5a02-4f73-888e-ddf9fa3ef9df",
              "877e5c81-4276-452d-886b-0a0487c9b775",
              "e896af7b-e9ad-46d9-8571-63b0e8f25b4a",
              "9ea74433-26fd-48d4-99dd-0d65aad1c399",
              "0d5b90fb-0154-4a3b-9980-727bc476b08f",
              "fcs_tlss_ext.1.2_8"
            ]
          },
          "fcs_tlss_ext.1.2_8": {
            "description": [
              {
                "text": "ciphersuites using pre-shared secrets:"
              },
              {
                "groups": [
                  "group-136"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-136": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "2cd1cdbe-e676-479d-8cd8-261c81faabfb",
              "51540f5b-cb38-45bb-9d08-15afe30d73db",
              "9b33691a-acf2-42d6-bf2a-266c03171faa"
            ]
          },
          "group-137": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "25930a07-a71d-4d69-8d20-b96a9a4f511b",
              "3e335251-e2d5-41d3-b8bd-73e567a8dc71",
              "0c4eff28-3f0d-469f-8bdd-a136f5bc46f6"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to support the following &lt;assignable&gt;list of supported TLS ciphersuites &lt;/assignable&gt; , offering the supported ciphersuites in a ClientHello message in preference order: &lt;assignable&gt;priority &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n              The TSF shall be able to support the following:\n              "
          },
          {
            "selections": "group-132"
          },
          {
            "text": "\n              using a preference order based on "
          },
          {
            "selections": "group-137"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "e8010a7f-ae5e-4dae-813b-935b7198ff61": {
            "type": "selectable",
            "uuid": "e8010a7f-ae5e-4dae-813b-935b7198ff61",
            "id": "fcs_tlss_ext.1.2_2",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "71d11364-5a02-4f73-888e-ddf9fa3ef9df": {
            "type": "selectable",
            "uuid": "71d11364-5a02-4f73-888e-ddf9fa3ef9df",
            "id": "fcs_tlss_ext.1.2_3",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "877e5c81-4276-452d-886b-0a0487c9b775": {
            "type": "selectable",
            "uuid": "877e5c81-4276-452d-886b-0a0487c9b775",
            "id": "fcs_tlss_ext.1.2_4",
            "description": "TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "e896af7b-e9ad-46d9-8571-63b0e8f25b4a": {
            "type": "selectable",
            "uuid": "e896af7b-e9ad-46d9-8571-63b0e8f25b4a",
            "id": "fcs_tlss_ext.1.2_5",
            "description": "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288",
            "exclusive": false,
            "nestedGroups": []
          },
          "9ea74433-26fd-48d4-99dd-0d65aad1c399": {
            "type": "selectable",
            "uuid": "9ea74433-26fd-48d4-99dd-0d65aad1c399",
            "id": "fcs_tlss_ext.1.2_6",
            "description": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "0d5b90fb-0154-4a3b-9980-727bc476b08f": {
            "type": "selectable",
            "uuid": "0d5b90fb-0154-4a3b-9980-727bc476b08f",
            "id": "fcs_tlss_ext.1.2_7",
            "description": "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 and RFC 8422",
            "exclusive": false,
            "nestedGroups": []
          },
          "2cd1cdbe-e676-479d-8cd8-261c81faabfb": {
            "type": "selectable",
            "uuid": "2cd1cdbe-e676-479d-8cd8-261c81faabfb",
            "id": "fcs_tlss_ext.1.2_9",
            "description": "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442",
            "exclusive": false,
            "nestedGroups": []
          },
          "51540f5b-cb38-45bb-9d08-15afe30d73db": {
            "type": "selectable",
            "uuid": "51540f5b-cb38-45bb-9d08-15afe30d73db",
            "id": "fcs_tlss_ext.1.2_10",
            "description": "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "9b33691a-acf2-42d6-bf2a-266c03171faa": {
            "type": "selectable",
            "uuid": "9b33691a-acf2-42d6-bf2a-266c03171faa",
            "id": "fcs_tlss_ext.1.2_11",
            "description": "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487",
            "exclusive": false,
            "nestedGroups": []
          },
          "f593e06f-2859-4737-a9c0-1db8b9b0c47e": {
            "type": "selectable",
            "uuid": "f593e06f-2859-4737-a9c0-1db8b9b0c47e",
            "id": "fcs_tlss_ext.1.2_12",
            "description": "TLS 1.3 ciphersuite TLS_AES_256_GCM_SHA384 as defined in RFC 8446, and shall not offer other TLS 1.3 ciphersuites",
            "exclusive": false,
            "nestedGroups": []
          },
          "25930a07-a71d-4d69-8d20-b96a9a4f511b": {
            "type": "selectable",
            "uuid": "25930a07-a71d-4d69-8d20-b96a9a4f511b",
            "id": "fcs_tlss_ext.1.2_13",
            "description": "RFC 9151 priority",
            "exclusive": false,
            "nestedGroups": []
          },
          "3e335251-e2d5-41d3-b8bd-73e567a8dc71": {
            "type": "selectable",
            "uuid": "3e335251-e2d5-41d3-b8bd-73e567a8dc71",
            "id": "fcs_tlss_ext.1.2_14",
            "description": "ClientHello ordering",
            "exclusive": false,
            "nestedGroups": []
          },
          "0c4eff28-3f0d-469f-8bdd-a136f5bc46f6": {
            "id": "fcs_tlss_ext.1.2_16",
            "description": "additional priority",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              The ST author should select the ciphersuites that are supported and must select at least one ciphersuite for each TLS version supported. \n              It is necessary to limit the ciphersuites that can be used administratively in an evaluated configuration on the server in the test environment. \n              If administrative steps need to be taken so that the ciphersuites negotiated by the implementation are limited to those in this requirement, then the appropriate instructions need to be contained in the guidance. \n              </p> <p>\n              The final selection indicates the TOE\u2019s preference for negotiating a ciphersuite. \n              RFC 9151 indicates the required ciphersuites for NSS systems and \"RFC 9151 priority\" is claimed if those ciphersuites are\n              selected whenever offered by the client. The final option is used to provide a specific preference ordering that does not agree\n              with either of the other options.               \n              </p> <p>\n              While indicated as mandatory in RFC 8446, the ciphersuite TLS_AES_128_GCM_SHA256 is disallowed by this SFR.\n              </p> <p>\n              The \u2018ClientHello ordering\u2019 option is claimed if client priority is considered; \n              if both are claimed, the ST author should indicate which is primary and which is secondary, and whether the priority scheme is configurable. \n              If other priority schemes or if tertiary priority is used, the ST author will claim the third option and describe the scheme in the ST.\n              </p>"
      },
      "4169286a-dd23-4524-9fc2-fecdb6ba9359": {
        "elementXMLID": "fcs_tlss_ext-1-3",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n            The TSF shall not establish a connection with a client that does not indicate support for at least one of the supported cryptographic\n            parameter sets.\n          "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                In TLS 1.2 handshakes, the cryptographic parameters are determined by the TLS 1.2 ciphersuite components passed in the ClientHello. In TLS 1.3, the cryptographic parameters are determined by the ciphersuite components and the supported group\n                extension. When both TLS 1.2 and TLS 1.3 are supported, cryptographic parameters are determined by the highest version\n                supported by the client.\n              </p> <p>\n                Ciphersuites for TLS 1.2 are of the form TLS_(key establishment algorithm)_WITH_(encryption algorithm)_(message digest algorithm)\n                and are listed in the TLS parameters section of the internet assignments at iana.org.\n              </p> <p>\n                Ciphersuites for TLS 1.3 are of the form TLS_(AEAD)_(HASH), where (AEAD) is of the form (encryption algorithm)_(symmetric key\n                length)_(mode) for an authenticated encryption with associated data specification (RFC 5116).\n              </p>"
      },
      "4ebbada1-071b-4989-bb02-16e1cc2e5097": {
        "elementXMLID": "fcs_tlss_ext-1-4",
        "selectableGroups": {
          "group-138": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "00766676-1e86-406a-8047-f73ed6e1c55d",
              "398d3aa9-1990-4072-9ece-839c6a93bb88"
            ]
          },
          "group-139": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "94fcdb6a-8178-4990-93a6-feba69a97a96",
              "af228e4e-c713-4245-851b-bdac851c7ca0",
              "4f91e2a5-a000-467c-b5e9-0d91d78cbcc9"
            ]
          },
          "group-140": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlss_ext.1.4_6",
              "fcs_tlss_ext.1.4_12",
              "fcs_tlss_ext.1.4_15",
              "ca6dac68-2a87-4a08-ad71-f4e3cf41ffb5",
              "429b4825-9986-4016-95fa-e74216df95d0",
              "fcs_tlss_ext.1.4_25",
              "eb2e055b-48f1-4bb7-996e-3690492c62aa"
            ]
          },
          "fcs_tlss_ext.1.4_6": {
            "description": [
              {
                "text": "signature_algorithms_cert extension (RFC 8446) indicating support for"
              },
              {
                "groups": [
                  "group-142"
                ]
              },
              {
                "text": ", and"
              },
              {
                "groups": [
                  "group-144"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-142": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "1c5cb271-bc8c-485b-a0d9-c6e25bdd7c90",
              "e95ac7d5-d686-47a7-bffd-50ce96515b18"
            ]
          },
          "group-144": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "46453433-bc35-4edc-9b62-5c46ffb7e5cd",
              "12a975d0-7fdb-4478-976d-785a6f8ab5fe",
              "79069467-845f-42bc-8e31-f0d9eea15213"
            ]
          },
          "fcs_tlss_ext.1.4_12": {
            "description": [
              {
                "text": "supported_versions extension (RFC 8446) indicating support for TLS 1.3 and"
              },
              {
                "groups": [
                  "group-146"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-146": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "c66af6c8-f43b-4bb4-87a5-cac4e4314f03",
              "630c565d-eeab-415e-97a4-501bc8ed9f32"
            ]
          },
          "fcs_tlss_ext.1.4_15": {
            "description": [
              {
                "text": "supported_groups extension indicating support for"
              },
              {
                "groups": [
                  "group-148"
                ]
              },
              {
                "text": "and"
              },
              {
                "groups": [
                  "group-150"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-148": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "254977a1-fcf4-4606-8087-3b6713e4ce3f",
              "be506b6c-77a6-4603-a01c-be59f72af625",
              "933ebb29-f0ab-4144-8f45-e4b4589dc26e"
            ]
          },
          "group-150": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "e521445f-8b9a-4da4-b5ec-ba159d02c99a",
              "2c28a753-7e28-4b2d-a94d-b821b332cb9e",
              "9856470b-5129-4601-b27f-42d289e60c2c",
              "6e5980b2-d5a0-43dc-99b1-37c09268054c"
            ]
          },
          "fcs_tlss_ext.1.4_25": {
            "description": [
              {
                "text": "extended_master_secret extension (RFC 7627) enforcing client support and"
              },
              {
                "groups": [
                  "group-152"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-152": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "65eba9ec-f4ce-44ad-9b35-3649eb0733a2",
              "38020ca1-e550-4820-8fa8-2ce05c808dd8"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall be able to process the following TLS ClientHello message extensions: &lt;ul&gt;&lt;li&gt;signature_algorithms extension (RFC 8446) indicating support for &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;ecdsa_secp384r1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pkcs1_sha384 (RFC 8446) &lt;/selectable&gt; &lt;/selectables&gt; , and &lt;selectables linebreak=\"yes\"&gt;&lt;selectable&gt;rsa_pss_pss_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;rsa_pss_rsae_sha384 (RFC 8446) &lt;/selectable&gt; &lt;selectable&gt;no other signature algorithms &lt;/selectable&gt; &lt;/selectables&gt; and &lt;/li&gt; &lt;/ul&gt; &lt;assignable&gt;other supported TLS extensions &lt;/assignable&gt; &lt;/title&gt; ",
        "title": [
          {
            "description": "\n            The TSF shall be able to process the following TLS ClientHello message extensions: \n             signature_algorithms extension (RFC 8446) indicating support for"
          },
          {
            "selections": "group-138"
          },
          {
            "description": ", and"
          },
          {
            "selections": "group-139"
          },
          {
            "description": "<ul><li>\n                and\n                </li></ul>"
          },
          {
            "selections": "group-140"
          },
          {
            "text": ".\n              \n          "
          }
        ],
        "selectables": {
          "00766676-1e86-406a-8047-f73ed6e1c55d": {
            "type": "selectable",
            "uuid": "00766676-1e86-406a-8047-f73ed6e1c55d",
            "id": "fcs_tlss_ext.1.4_1",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "398d3aa9-1990-4072-9ece-839c6a93bb88": {
            "type": "selectable",
            "uuid": "398d3aa9-1990-4072-9ece-839c6a93bb88",
            "id": "fcs_tlss_ext.1.4_2",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "94fcdb6a-8178-4990-93a6-feba69a97a96": {
            "type": "selectable",
            "uuid": "94fcdb6a-8178-4990-93a6-feba69a97a96",
            "id": "fcs_tlss_ext.1.4_3",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "af228e4e-c713-4245-851b-bdac851c7ca0": {
            "type": "selectable",
            "uuid": "af228e4e-c713-4245-851b-bdac851c7ca0",
            "id": "fcs_tlss_ext.1.4_4",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "4f91e2a5-a000-467c-b5e9-0d91d78cbcc9": {
            "type": "selectable",
            "uuid": "4f91e2a5-a000-467c-b5e9-0d91d78cbcc9",
            "id": "fcs_tlss_ext.1.4_5",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "1c5cb271-bc8c-485b-a0d9-c6e25bdd7c90": {
            "type": "selectable",
            "uuid": "1c5cb271-bc8c-485b-a0d9-c6e25bdd7c90",
            "id": "fcs_tlss_ext.1.4_7",
            "description": "ecdsa_secp384r1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "e95ac7d5-d686-47a7-bffd-50ce96515b18": {
            "type": "selectable",
            "uuid": "e95ac7d5-d686-47a7-bffd-50ce96515b18",
            "id": "fcs_tlss_ext.1.4_8",
            "description": "rsa_pkcs1_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "46453433-bc35-4edc-9b62-5c46ffb7e5cd": {
            "type": "selectable",
            "uuid": "46453433-bc35-4edc-9b62-5c46ffb7e5cd",
            "id": "fcs_tlss_ext.1.4_9",
            "description": "rsa_pss_pss_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "12a975d0-7fdb-4478-976d-785a6f8ab5fe": {
            "type": "selectable",
            "uuid": "12a975d0-7fdb-4478-976d-785a6f8ab5fe",
            "id": "fcs_tlss_ext.1.4_10",
            "description": "rsa_pss_rsae_sha384 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "79069467-845f-42bc-8e31-f0d9eea15213": {
            "type": "selectable",
            "uuid": "79069467-845f-42bc-8e31-f0d9eea15213",
            "id": "fcs_tlss_ext.1.4_11",
            "description": "no other signature algorithms",
            "exclusive": false,
            "nestedGroups": []
          },
          "c66af6c8-f43b-4bb4-87a5-cac4e4314f03": {
            "type": "selectable",
            "uuid": "c66af6c8-f43b-4bb4-87a5-cac4e4314f03",
            "id": "fcs_tlss_ext.1.4_13",
            "description": "TLS 1.2",
            "exclusive": false,
            "nestedGroups": []
          },
          "630c565d-eeab-415e-97a4-501bc8ed9f32": {
            "type": "selectable",
            "uuid": "630c565d-eeab-415e-97a4-501bc8ed9f32",
            "id": "fcs_tlss_ext.1.4_14",
            "description": "no other versions",
            "exclusive": false,
            "nestedGroups": []
          },
          "254977a1-fcf4-4606-8087-3b6713e4ce3f": {
            "type": "selectable",
            "uuid": "254977a1-fcf4-4606-8087-3b6713e4ce3f",
            "id": "fcs_tlss_ext.1.4_16",
            "description": "secp384r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "be506b6c-77a6-4603-a01c-be59f72af625": {
            "type": "selectable",
            "uuid": "be506b6c-77a6-4603-a01c-be59f72af625",
            "id": "fcs_tlss_ext.1.4_17",
            "description": "ffdhe3072 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "933ebb29-f0ab-4144-8f45-e4b4589dc26e": {
            "type": "selectable",
            "uuid": "933ebb29-f0ab-4144-8f45-e4b4589dc26e",
            "id": "fcs_tlss_ext.1.4_18",
            "description": "ffdhe4096 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "e521445f-8b9a-4da4-b5ec-ba159d02c99a": {
            "type": "selectable",
            "uuid": "e521445f-8b9a-4da4-b5ec-ba159d02c99a",
            "id": "fcs_tlss_ext.1.4_19",
            "description": "secp521r1 (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "2c28a753-7e28-4b2d-a94d-b821b332cb9e": {
            "type": "selectable",
            "uuid": "2c28a753-7e28-4b2d-a94d-b821b332cb9e",
            "id": "fcs_tlss_ext.1.4_20",
            "description": "ffdhe6144 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "9856470b-5129-4601-b27f-42d289e60c2c": {
            "type": "selectable",
            "uuid": "9856470b-5129-4601-b27f-42d289e60c2c",
            "id": "fcs_tlss_ext.1.4_21",
            "description": "ffdhe8192 (RFC 7919)",
            "exclusive": false,
            "nestedGroups": []
          },
          "6e5980b2-d5a0-43dc-99b1-37c09268054c": {
            "type": "selectable",
            "uuid": "6e5980b2-d5a0-43dc-99b1-37c09268054c",
            "id": "fcs_tlss_ext.1.4_22",
            "description": "no other supported groups",
            "exclusive": false,
            "nestedGroups": []
          },
          "ca6dac68-2a87-4a08-ad71-f4e3cf41ffb5": {
            "type": "selectable",
            "uuid": "ca6dac68-2a87-4a08-ad71-f4e3cf41ffb5",
            "id": "fcs_tlss_ext.1.4_23",
            "description": "key_share extension (RFC 8446)",
            "exclusive": false,
            "nestedGroups": []
          },
          "429b4825-9986-4016-95fa-e74216df95d0": {
            "type": "selectable",
            "uuid": "429b4825-9986-4016-95fa-e74216df95d0",
            "id": "fcs_tlss_ext.1.4_24",
            "description": "post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446), tls_cert_with_extern_psk (RFC 8773), and psk_key_exchange_modes (RFC 8446) indicating psk_dhe_ke (DHE or ECDHE) mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "65eba9ec-f4ce-44ad-9b35-3649eb0733a2": {
            "type": "selectable",
            "uuid": "65eba9ec-f4ce-44ad-9b35-3649eb0733a2",
            "id": "fcs_tlss_ext.1.4_26",
            "description": "allowing legacy clients",
            "exclusive": false,
            "nestedGroups": []
          },
          "38020ca1-e550-4820-8fa8-2ce05c808dd8": {
            "type": "selectable",
            "uuid": "38020ca1-e550-4820-8fa8-2ce05c808dd8",
            "id": "fcs_tlss_ext.1.4_27",
            "description": "no other enforcement mode",
            "exclusive": false,
            "nestedGroups": []
          },
          "eb2e055b-48f1-4bb7-996e-3690492c62aa": {
            "type": "selectable",
            "uuid": "eb2e055b-48f1-4bb7-996e-3690492c62aa",
            "id": "fcs_tlss_ext.1.4_28",
            "description": "no other extensions",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                Support for the signature_algorithms extension is optional in RFC 5246 but is mandated for this functional package in accordance with RFC 9151. Support for the signature_algorithms extension is mandatory in RFC 8446 and remains so in this functional package. Whether the TOE's implementation conforms to RFC 5246, RFC 8446, or both is dependent on whether the TOE supports TLS 1.2, TLS 1.3, or both.\n              </p> <p>\n            If support for TLS 1.3 is claimed in FCS_TLSS_EXT.1.1, the selections for supported_versions, supported_groups, and key_share are claimed in accordance with RFC 8446 and the \n            tls_cert_with_extern_psk extension is claimed in accordance with RFC 8773. \n            If TLS 1.3 is claimed, psk_key_exchange_modes indicating psk_dhe_ke mode is claimed in accordance with RFC 9151.\n            If support for TLS 1.3 is not claimed, supported_versions and key_share are not claimed.\n              </p> <p>\n                If TLS 1.2 is claimed, extended_master_secret extension must be claimed, with the ability to enforce client support, and optionally, the ability to support legacy clients. \n                The extended_master_secret extension (RFC 7627) selection cannot be claimed when TLS 1.3 is claimed.     \n              </p> <p>\n            If TLS 1.2 is supported and DHE or ECDHE ciphersuites are claimed in FCS_TLSS_EXT.1.2, the entry for supported_groups is claimed. Support for additional extensions is acceptable.\n            For signature_algorithms and signature_algorithms_certs (if supported), at least one of the signature schemes presented in the first sub-selection is claimed.\n              </p> <p>\n                For compatibility purposes, TLS clients may offer additional supported_groups values beyond what is specified in the selection.\n              </p>"
      },
      "bc879084-26dc-4872-aad4-2f3c2004ffcb": {
        "elementXMLID": "fel-tlss-key-est",
        "selectableGroups": {
          "group-153": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlss_ext.1.5_1",
              "fcs_tlss_ext.1.5_4",
              "fcs_tlss_ext.1.5_11"
            ]
          },
          "fcs_tlss_ext.1.5_1": {
            "description": [
              {
                "text": "RSA with size"
              },
              {
                "groups": [
                  "group-155"
                ]
              },
              {
                "text": "bits and no other sizes"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-155": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "f7fb1fa3-11e2-4489-98db-784d3a54995e",
              "4d237e8a-dc76-4f26-beef-41f2a4040f56"
            ]
          },
          "fcs_tlss_ext.1.5_4": {
            "description": [
              {
                "text": "Diffie-Hellman groups"
              },
              {
                "groups": [
                  "group-157"
                ]
              },
              {
                "text": "and no other groups, consistent with the client's supported_groups extension and"
              },
              {
                "groups": [
                  "group-159"
                ]
              },
              {
                "text": "extension"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-157": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "b63a0780-87e3-402d-867b-086322894de8",
              "c2d78c25-89ab-46e1-9f94-1741ac0fcb45",
              "aa7ce8b7-a53b-4235-8bb9-1da38a952a1e",
              "3d257cc0-6823-4c9a-8068-2d7fda6e9498"
            ]
          },
          "group-159": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "a618eb8a-65e4-4323-af73-7a2100b3b491",
              "28858567-5e77-441a-8710-e59d8089f53c"
            ]
          },
          "fcs_tlss_ext.1.5_11": {
            "description": [
              {
                "text": "ECDHE parameters using elliptic curves"
              },
              {
                "groups": [
                  "group-161"
                ]
              },
              {
                "text": "and no other curves, consistent with the client's supported_groups extension and"
              },
              {
                "groups": [
                  "group-163"
                ]
              },
              {
                "text": "extension and using non-compressed formatting for points"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-161": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "b29c2e2d-62f2-41bc-8b7c-2d40f67e40e4",
              "5cf44a57-4f5f-4ee3-97b3-d7fb0a4967b9",
              "fe2dce3a-db6b-42fc-ac13-938e7da4212a"
            ]
          },
          "group-163": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "fc583ba4-adc0-4a3e-8110-2c6ad84b134a",
              "3dc1734d-2c2d-4cc6-900a-ca16098e4956"
            ]
          }
        },
        "extCompDefTitle": "&lt;title&gt;The TSF shall perform key establishment for TLS using &lt;assignable&gt;key establishment parameters &lt;/assignable&gt; . &lt;/title&gt; ",
        "title": [
          {
            "text": "\n              The TSF shall perform key establishment for TLS using "
          },
          {
            "selections": "group-153"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "f7fb1fa3-11e2-4489-98db-784d3a54995e": {
            "type": "selectable",
            "uuid": "f7fb1fa3-11e2-4489-98db-784d3a54995e",
            "id": "fcs_tlss_ext.1.5_2",
            "description": "3072",
            "exclusive": false,
            "nestedGroups": []
          },
          "4d237e8a-dc76-4f26-beef-41f2a4040f56": {
            "type": "selectable",
            "uuid": "4d237e8a-dc76-4f26-beef-41f2a4040f56",
            "id": "fcs_tlss_ext.1.5_3",
            "description": "4096",
            "exclusive": false,
            "nestedGroups": []
          },
          "b63a0780-87e3-402d-867b-086322894de8": {
            "type": "selectable",
            "uuid": "b63a0780-87e3-402d-867b-086322894de8",
            "id": "fcs_tlss_ext.1.5_5",
            "description": "ffdhe3072",
            "exclusive": false,
            "nestedGroups": []
          },
          "c2d78c25-89ab-46e1-9f94-1741ac0fcb45": {
            "type": "selectable",
            "uuid": "c2d78c25-89ab-46e1-9f94-1741ac0fcb45",
            "id": "fcs_tlss_ext.1.5_6",
            "description": "ffdhe4096",
            "exclusive": false,
            "nestedGroups": []
          },
          "aa7ce8b7-a53b-4235-8bb9-1da38a952a1e": {
            "type": "selectable",
            "uuid": "aa7ce8b7-a53b-4235-8bb9-1da38a952a1e",
            "id": "fcs_tlss_ext.1.5_7",
            "description": "ffdhe6144",
            "exclusive": false,
            "nestedGroups": []
          },
          "3d257cc0-6823-4c9a-8068-2d7fda6e9498": {
            "type": "selectable",
            "uuid": "3d257cc0-6823-4c9a-8068-2d7fda6e9498",
            "id": "fcs_tlss_ext.1.5_8",
            "description": "ffdhe8192",
            "exclusive": false,
            "nestedGroups": []
          },
          "a618eb8a-65e4-4323-af73-7a2100b3b491": {
            "type": "selectable",
            "uuid": "a618eb8a-65e4-4323-af73-7a2100b3b491",
            "id": "fcs_tlss_ext.1.5_9",
            "description": "key share",
            "exclusive": false,
            "nestedGroups": []
          },
          "28858567-5e77-441a-8710-e59d8089f53c": {
            "type": "selectable",
            "uuid": "28858567-5e77-441a-8710-e59d8089f53c",
            "id": "fcs_tlss_ext.1.5_10",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          },
          "b29c2e2d-62f2-41bc-8b7c-2d40f67e40e4": {
            "type": "selectable",
            "uuid": "b29c2e2d-62f2-41bc-8b7c-2d40f67e40e4",
            "id": "fcs_tlss_ext.1.5_12",
            "description": "secp256r1",
            "exclusive": false,
            "nestedGroups": []
          },
          "5cf44a57-4f5f-4ee3-97b3-d7fb0a4967b9": {
            "type": "selectable",
            "uuid": "5cf44a57-4f5f-4ee3-97b3-d7fb0a4967b9",
            "id": "s-tls-secp384",
            "description": "secp384r1",
            "exclusive": false,
            "nestedGroups": []
          },
          "fe2dce3a-db6b-42fc-ac13-938e7da4212a": {
            "type": "selectable",
            "uuid": "fe2dce3a-db6b-42fc-ac13-938e7da4212a",
            "id": "fcs_tlss_ext.1.5_13",
            "description": "secp521r1",
            "exclusive": false,
            "nestedGroups": []
          },
          "fc583ba4-adc0-4a3e-8110-2c6ad84b134a": {
            "type": "selectable",
            "uuid": "fc583ba4-adc0-4a3e-8110-2c6ad84b134a",
            "id": "fcs_tlss_ext.1.5_14",
            "description": "key share",
            "exclusive": false,
            "nestedGroups": []
          },
          "3dc1734d-2c2d-4cc6-900a-ca16098e4956": {
            "type": "selectable",
            "uuid": "3dc1734d-2c2d-4cc6-900a-ca16098e4956",
            "id": "fcs_tlss_ext.1.5_15",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              TLS 1.2 and TLS 1.3 perform key establishment using different mechanisms.\n              </p> <p>If TLS 1.2 and RSA ciphersuites are supported, the ST author claims the \"RSA with key size...\" option and the\n                key sizes supported. The requirements apply to the RSA key size for the server's certificate and in the key exchange messages received by the server\n              </p> <p>\n              If TLS 1.2 and DHE are supported, the ST author may claim the \"Diffie-Hellman groups...\" The requirements apply\n              to the server key exchange messages sent by the TSF. \n              </p> <p>\n              If TLS 1.2 and supported_groups extension are supported (for ECDHE or DHE groups), the ST author claims the\n              \u201cDiffie_Hellman groups\u2026\u201d or \u201cECDHE parameters...\u201d according to the supported ciphersuites and supported_groups extension\n              values. This is required when ECDHE ciphersuites are supported and recommended when DHE ciphersuites are supported.\n              </p> <p>\n              If TLS 1.3 is supported, the ST author claims one or both of \"Diffie-Hellman groups...\" or \"ECDHE parameters...\" options, and\n              claims the \"key share\" options in the sub-selections. The requirements apply to the values of the supported_groups extension\n              and the key_share extension contained in the ServerHello message.              \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "b73d8d43-ce0b-42e4-b0f1-12ca563d524b": {
        "tss": "<p>\n                The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions, \n                are specified in accordance with RFC 5246 (TLS 1.2) and RFC 8446 (TLS 1.3 and updates to TLS 1.2) as appropriate. The evaluator shall check the description to see if beta TLS 1.3 versions are supported.\n                </p> <p>\n                  The evaluator shall verify that ciphersuites indicated in FCS_TLSS_EXT.1.2 are included in the description, and that none of the following ciphersuites are supported: ciphersuites indicating NULL, RC2, RC4, DES, IDEA, TDES, or AES-128 in the encryption algorithm component, indicating 'anon,' or indicating MD5 or SHA in the message digest algorithm component.\n                </p> <p>\n                The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_TLSS_EXT.1.4.\n                </p> <p>\n                The evaluator shall confirm that the TLS description includes the number and types of certificates that can be installed to represent the TOE.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that the TSF conforms to the requirements. \n                If the ST indicates that beta versions of TLS 1.3 are supported for backward compatibility, the evaluator shall ensure that the operational guidance provides instructions for disabling these versions.\n                </p> <p>\n                The evaluator shall review the operational guidance to ensure instructions on installing certificates representing the TOE are provided.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "09c17b14-5d29-49c3-ab16-05439ed7bd35": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "1b21d475-7f3b-4ac4-9077-861fb1b945e8",
              "4d4520cc-0461-4aee-8214-136c0b841517",
              "6ac9e595-bfde-4c70-b833-5dee94ee13bf",
              "5b035cf6-1a46-4daf-84c5-6a83c1b16bda",
              "5fa599d3-47e1-451f-9f2d-a1f8cc5cf372"
            ],
            "conclusion": ""
          },
          "f2618bc8-9b10-4066-98cd-d237e4399a05": {
            "parentTestUUID": "1b21d475-7f3b-4ac4-9077-861fb1b945e8",
            "description": "",
            "testUUIDs": [
              "3fcc2d25-ebbe-4829-bfe2-82bbbb631803",
              "f6fb52dc-db58-448b-b10e-72c0f735d63c",
              "6881ba6d-a34c-4453-b9eb-bd84b801f649"
            ],
            "conclusion": ""
          },
          "a66cb805-bb02-4631-a53c-0150587cb9a4": {
            "parentTestUUID": "4d4520cc-0461-4aee-8214-136c0b841517",
            "description": "",
            "testUUIDs": [
              "80c8a8da-db29-4c03-bee6-c2770c260aaf",
              "69c5d6be-29ba-40e7-ba7d-736fe29b044b"
            ],
            "conclusion": ""
          },
          "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4": {
            "parentTestUUID": "6ac9e595-bfde-4c70-b833-5dee94ee13bf",
            "description": "",
            "testUUIDs": [
              "898ba90b-634e-4797-bc93-8f3e0d02b493",
              "3b38f495-615b-4169-8e02-e7bbf40abd69",
              "e60495fa-898b-4aaa-83f7-c48ebe633948",
              "6556ecae-3e29-48c9-a1dc-dea78d896f77",
              "579d484e-b8c3-426c-928d-7b316fc69457"
            ],
            "conclusion": ""
          },
          "2427ddf0-d02a-4066-b423-05d1496369cb": {
            "parentTestUUID": "5b035cf6-1a46-4daf-84c5-6a83c1b16bda",
            "description": "",
            "testUUIDs": [
              "f169d34a-22c5-4d07-afbc-e335d782570b",
              "0b3e7476-5b8f-4f12-9b8b-587c1e7ccc2e"
            ],
            "conclusion": ""
          },
          "6990ec33-aeb3-480e-98f4-17a5a93d0eee": {
            "parentTestUUID": "f169d34a-22c5-4d07-afbc-e335d782570b",
            "description": "",
            "testUUIDs": [
              "801665a3-0500-45e1-8d2d-03959e7ae558",
              "3c59696e-ff22-4dc3-8834-79722eb7db48",
              "3fcfae80-274e-42f3-ab6f-f4f806f97401",
              "3ad35526-895c-4948-b754-ae3f9e3f4195"
            ],
            "conclusion": ""
          },
          "3d7446e8-58cf-4223-8ffa-facfe09f402a": {
            "parentTestUUID": "3fcfae80-274e-42f3-ab6f-f4f806f97401",
            "description": "",
            "testUUIDs": [
              "7c466fde-20cc-41ca-8d15-ba69dbdb7c85",
              "1370fab6-22d2-40e7-bae8-e3bdc0c4f34c",
              "f5674f4b-b62d-487e-ac07-17d0814fda05"
            ],
            "conclusion": ""
          },
          "79dcf7ed-c764-4757-a13b-b6f741ecbff2": {
            "parentTestUUID": "5fa599d3-47e1-451f-9f2d-a1f8cc5cf372",
            "description": "",
            "testUUIDs": [
              "4073d7f7-f7ca-44ab-82c5-aad391fab335",
              "dbcac65a-ef9a-483d-94e1-b0243fd07959",
              "c59bd1b1-f1c6-4d0e-8c93-64b337e655ea",
              "2a715505-1afe-495f-92b5-0a5c2a93228a",
              "90ab8a47-c821-4955-a55b-21a09cab6b32"
            ],
            "conclusion": ""
          },
          "76b1f820-3f69-4496-9139-757a2ef3e170": {
            "parentTestUUID": "4073d7f7-f7ca-44ab-82c5-aad391fab335",
            "description": "",
            "testUUIDs": [
              "6a458d93-4460-488b-93f6-da1d3cd97141",
              "a36987dd-3c02-459f-9fee-9687e7784eb3"
            ],
            "conclusion": ""
          },
          "26d6ab39-0170-41c6-bf0d-be791a3ee176": {
            "parentTestUUID": "c59bd1b1-f1c6-4d0e-8c93-64b337e655ea",
            "description": "",
            "testUUIDs": [
              "0ea99e79-bd25-4abe-baee-b542a30b49af",
              "b8b98db7-cdbd-4238-850c-0d20b80784dc",
              "b020c9b0-fcac-4636-a640-52bebc54f7f3",
              "0e4e49cf-ed56-4f29-96a4-7fae0a995cca",
              "cc0011f3-64fa-4c30-a791-774d5a63f4b2",
              "7f12c71f-eeaf-4b93-b668-8ef83c4fd47b"
            ],
            "conclusion": ""
          },
          "9eee089e-eb6c-428b-abc3-727009613ba5": {
            "parentTestUUID": "2a715505-1afe-495f-92b5-0a5c2a93228a",
            "description": "",
            "testUUIDs": [
              "893ba11e-bafb-4483-b365-8f4ca79b3bda",
              "c1851f59-e4d0-41a0-b5f0-29e5b7e6e113"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "3fcc2d25-ebbe-4829-bfe2-82bbbb631803": {
            "testListUUID": "f2618bc8-9b10-4066-98cd-d237e4399a05",
            "id": "tls-server-supported-configurations",
            "objective": "\n                        [conditional] If TLS 1.2 is supported, for each supported TLS 1.2 ciphersuite, the evaluator shall send a compliant TLS 1.2 ClientHello with the highest version or legacy version of 1.2 (value '03 03'), \n                        a single entry in the ciphersuites field consisting of the specific ciphersuite, and\n                        no supported_versions extension or key_share extension. The evaluator shall observe the TSF\u2019s ServerHello indicates TLS 1.2 in the highest version or legacy version field,  \n                        does not include a supported_versions or key_share extension, and indicates the specific ciphersuite in the ciphersuite field. \n                        If the ciphersuite requires certificate-based authentication, the evaluator shall observe that the TSF sends a valid certificate representing the TOE and successfully completes the TLS handshake. \n                        <p><b>Note:</b> The ciphersuites TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, \n                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487, if supported, do not require certificate-based authentication of the server. \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f6fb52dc-db58-448b-b10e-72c0f735d63c": {
            "testListUUID": "f2618bc8-9b10-4066-98cd-d237e4399a05",
            "id": "",
            "objective": "(TLS 1.2 support for TLS 1.3 clients) [conditional] If TLS 1.2 is supported and the TSF is configurable to support only TLS 1.2 (or if TLS 1.3 is not supported), \n                        and if the TSF supports DHE or ECDHE ciphersuites, the evaluator shall follow any operational guidance instructions necessary to configure the TSF to only support TLS 1.2. \n                        For each supported TLS 1.2 ciphersuite with DHE or ECDHE indicated as the key establishment method, \n                        the evaluator shall send a ClientHello with the highest version or legacy version of 1.2 (value '03 03'), \n                        a list of ciphersuites consisting of one or more TLS 1.3 ciphersuites followed by the specific TLS 1.2 ciphersuite and no other TLS 1.2 ciphersuites in the ciphersuites field, \n                        and including a TLS 1.3 supported_groups and key_share extension with consistent values. \n                        The evaluator shall observe that the TSF\u2019s ServerHello indicates TLS 1.2 in the highest version or legacy version field, \n                        does not include a supported_versions or key_share extension, and indicates the specific TLS 1.2 ciphersuite in the ciphersuite field. \n                        The evaluator shall observe that the TSF completes the TLS 1.2 handshake successfully.\n                        <p><b>Note:</b> Supported ciphersuites using RSA for key establishment should not be included in this test. \n                        The supported_groups extension sent by the test TLS client should be consistent with the TLS 1.2 ciphersuite (e.g., it should be an EC group if the ciphersuite is ECDHE).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6881ba6d-a34c-4453-b9eb-bd84b801f649": {
            "testListUUID": "f2618bc8-9b10-4066-98cd-d237e4399a05",
            "id": "",
            "objective": "(TLS 1.3 support) [conditional] If the TSF supports TLS 1.3, then for each supported TLS 1.3 ciphersuite and supported_group value,\n                        the evaluator shall send a compliant TLS 1.3 ClientHello indicating a list of one or more TLS 1.2 ciphersuites followed by the specific TLS 1.3 ciphersuite and no other ciphersuites in the ciphersuites field, \n                        a supported_versions extension indicating TLS 1.3 (value '03 04') only, \n                        a supported_groups extension indicating the selected group, and a key_share extension containing a value representing an element of the specific group. \n                        The evaluator shall observe the TSF\u2019s ServerHello contains the supported_versions extension indicating TLS 1.3, the specific ciphersuite in the selected ciphersuite field, \n                        and a key_share extension containing an element of the specific supported group. The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1b21d475-7f3b-4ac4-9077-861fb1b945e8": {
            "testListUUID": "09c17b14-5d29-49c3-ab16-05439ed7bd35",
            "id": "",
            "objective": "(supported configurations) The evaluator shall perform the following tests: \n                    <p><b>Note:</b> The connections in &lt;xref to=\"tls-server-supported-configurations\"/&gt; may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session.\n                    </p> <p>\n                    It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; \n                    it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).\n                    </p> <p>\n                    It is not necessary to pair every supported ciphersuite with every supported group. \n                    It is sufficient to use a set of ciphersuite and supported group pairs such that each ciphersuite and each supported group are included in this set.\n                    </p> <p>\n                    TLS 1.3 includes the supported_groups extension in the encrypted_extensions message. \n                    This message may be observed at the test client after it is decrypted to help verify the key_share is actually a member of the supported group requested.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "f2618bc8-9b10-4066-98cd-d237e4399a05"
            ]
          },
          "80c8a8da-db29-4c03-bee6-c2770c260aaf": {
            "testListUUID": "a66cb805-bb02-4631-a53c-0150587cb9a4",
            "id": "tls-server-obsolete-versions",
            "objective": "For each of SSL version 2, SSL version 3, TLS 1.0, TLS 1.1, and TLS 1.2 if it is not supported, \n                        the evaluator shall send a ClientHello to the TSF indicating the selected version as the highest version. The evaluator shall observe the TSF terminates the connection. \n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., protocol version, insufficient security) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "69c5d6be-29ba-40e7-ba7d-736fe29b044b": {
            "testListUUID": "a66cb805-bb02-4631-a53c-0150587cb9a4",
            "id": "tls-server-beta-versions",
            "objective": "[conditional] If TLS 1.3 is not supported, or if TLS 1.3 is supported and the ST indicates that it processes the legacy version field, then the evaluator shall follow the operational guidance to configure the TSF to ensure any supported beta TLS 1.3 versions are disabled, as necessary. \n                        The evaluator shall send the TSF a ClientHello message indicating the supported version (referred to as the legacy version in RFC 8446) \n                        with the value '03 04' and observe that the TSF responds with a ServerHello indicating the highest version supported.\n                        <p><b>Note:</b>&lt;xref to=\"tls-server-beta-versions\"/&gt; is intended to test the TSF response to non-standard versions, including beta versions of TLS 1.3. \n                        If the TSF supports such beta versions, the evaluator shall follow the operational guidance instructions to disable them prior to \n                        conducting &lt;xref to=\"tls-server-beta-versions\"/&gt;.\n                        </p> <p>\n                        Some TLS 1.3 implementations ignore the legacy version field and only check for the supported_versions extension to determine TLS 1.3 support by a client. \n                        It is preferred that the legacy version field should still be set to a standard version ('03 03') in the ServerHello, \n                        but it is acceptable that presence of the supported_versions indicating TLS 1.3 (value '03 04') overrides the legacy_version indication to determine highest supported version. In this case, this test is not performed.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4d4520cc-0461-4aee-8214-136c0b841517": {
            "testListUUID": "09c17b14-5d29-49c3-ab16-05439ed7bd35",
            "id": "",
            "objective": "(obsolete versions) The evaluator shall perform the following tests:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "a66cb805-bb02-4631-a53c-0150587cb9a4"
            ]
          },
          "898ba90b-634e-4797-bc93-8f3e0d02b493": {
            "testListUUID": "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4",
            "id": "",
            "objective": "(ciphersuite not supported) For each supported version, the evaluator shall follow the operational guidance, \n                        if available, to configure the TSF to disable a supported ciphersuite. \n                        The evaluator shall send a compliant ClientHello to the TSF indicating support for the specific version and a ciphersuites field containing this single disabled ciphersuite. \n                        The evaluator shall observe that the TOE rejects the connection.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                        </p> <p>\n                        If the TSF\u2019s ciphersuites are not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. \n                        Additional special cases of this test for special ciphersuites are performed separately.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3b38f495-615b-4169-8e02-e7bbf40abd69": {
            "testListUUID": "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4",
            "id": "tls-server-version-confusion",
            "objective": "(version confusion) For each supported version, the evaluator shall send a ClientHello that is compliant for the specific version\n                        that includes a list of ciphersuites consisting of a single ciphersuite not associated with that version. The evaluator shall observe that the TOE rejects the connection.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                        </p> <p>\n                        If TLS 1.2 is supported, &lt;xref to=\"tls-server-version-confusion\"/&gt; sends a TLS 1.3 ciphersuite to the TSF as a server negotiating TLS 1.2, using a supported TLS 1.3 ciphersuite if the TSF supports TLS 1.3. \n                          If TLS 1.3 is supported, &lt;xref to=\"tls-server-version-confusion\"/&gt; sends a TLS 1.2 ciphersuite with compatible supported_group, signature_algorithms, and key share to the TSF as a server negotiating TLS 1.3, using a supported TLS 1.2 ciphersuite if TLS 1.2 is supported. \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e60495fa-898b-4aaa-83f7-c48ebe633948": {
            "testListUUID": "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4",
            "id": "",
            "objective": "(null ciphersuite) For each supported version, the evaluator shall send a ClientHello indicating support for the version and include a ciphersuite list consisting of \n                        only the null ciphersuite (TLS_NULL_WITH_NULL_NULL, with the value '00 00') and observe that the TOE rejects the connection.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6556ecae-3e29-48c9-a1dc-dea78d896f77": {
            "testListUUID": "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4",
            "id": "",
            "objective": "<p>\n                      (anonymous connection request) The evaluator shall perform one or more of the following tests according to the supported TLS versions:\n                      </p> <p>\n                        [conditional] If TLS 1.2 is supported, the evaluator shall send the TSF a TLS 1.2 handshake that is compliant, except that the ciphersuites field includes a ciphersuite list consisting only of ciphersuites using the anonymous server authentication method and observe that the TOE rejects the connection.\n                      </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                        </p> <p>\n                        See IANA TLS parameters for available ciphersuites to be included in the ClientHello. \n                        The test ciphersuites list should include ciphersuites using supported cryptographic algorithms in as many of the other components as possible. \n                        For example, if the TSF supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the evaluator should include TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.\n                      </p> <p>\n                          [conditional] If TLS 1.3 is supported, the evaluator shall configure the TSF (if necessary) to not support anonymous server requests, and send the TSF a ClientHello containing the server_cert_type extension indicating only \u2018raw public key\u2019 type. The evaluator shall observe that the TSF either ignores the extension (the extension is not supported), proceeding with a normal TLS handshake, to include sending a valid certificate and certificate verify message, or it terminates the session (the extension is supported, but the anonymous server functionality is not supported). \n                        </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., unsupported_certificate) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "579d484e-b8c3-426c-928d-7b316fc69457": {
            "testListUUID": "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4",
            "id": "tls-server-deprecated-encryption",
            "objective": "<p>\n                        (disallowed encryption algorithm) The evaluator shall perform one or more of the following, depending on the supported versions: \n                        </p> <p>\n                          [conditional] If TLS 1.2 is supported, the evaluator shall send the TSF a TLS 1.2 ClientHello that is compliant with RFC 9591, except that the ciphersuites field is a list consisting only of ciphersuites indicating a disallowed encryption algorithm, including at least one each of NULL, RC2, RC4, DES, IDEA, TDES, and AES-128. The evaluator shall observe that the TOE rejects the connection.\n                        </p> <p><b>Note:</b> See IANA TLS parameters for available TLS 1.2 ciphersuites to be included. The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. For example, if the TSF supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test could include TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5, TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.\n                        </p> <p>\n                          [conditional] If TLS 1.3 is supported, the evaluator shall send the TSF a TLS 1.3 ClientHello that is compliant with RFC 9591, except that the ciphersuites field contains the single ciphersuite TLS_AES_128_GCM_SHA256. The evaluator shall observe that the TOE rejects the connection.\n                        </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, insufficient security) in response to this, but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6ac9e595-bfde-4c70-b833-5dee94ee13bf": {
            "testListUUID": "09c17b14-5d29-49c3-ab16-05439ed7bd35",
            "id": "",
            "objective": "(ciphersuites)  The evaluator shall perform the following tests on handling unexpected ciphersuites using a test TLS client \n                    sending handshake messages compliant with the negotiated version except as indicated in the test: \n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "3fae2c69-f3d9-4f5f-b483-4723dc0e9bb4"
            ]
          },
          "801665a3-0500-45e1-8d2d-03959e7ae558": {
            "testListUUID": "6990ec33-aeb3-480e-98f4-17a5a93d0eee",
            "id": "tls-server-correct-signature",
            "objective": "[conditional] If TLS 1.2 is supported, then for each supported value of the signature_algorithms extension, the evaluator shall provision a certificate with a key pair compatible with the specific signature_algorithm value and \n                            send the TSF a TLS 1.2 ClientHello that indicates all supported ciphersuites and has a signature_algorithms extension consisting of a single value matching the specific signature algorithm.\n                            <p>\n                            If the TSF supports the signature_algorithms_cert extension, the ClientHello also contains the value consistent with the provisioned certificate.\n                            </p> <p>\n                            The evaluator shall observe that the TSF negotiates TLS 1.2 with\n                            a TLS 1.2 ciphersuite that is compatible with the signature algorithm, and that it sends a certificate message containing the provisioned certificate with a key pair that is consistent \n                            with the specific signature_algorithm value (and signed using the signature_algorithms_cert extension value, if supported). \n                            </p> <p><b>Note:</b> For TLS 1.2, the ciphersuite describes the signature algorithm as RSA or ECDSA \n                            and is compatible with the certificate used if the signature algorithm component of the ciphersuite is of the same type as the signature value of the signature_algorithms extension. \n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3c59696e-ff22-4dc3-8834-79722eb7db48": {
            "testListUUID": "6990ec33-aeb3-480e-98f4-17a5a93d0eee",
            "id": "tls-server-correct-1-3-signature",
            "objective": "[conditional] If the TSF supports TLS 1.3, then for each supported value of the signature_algorithm, \n                            the evaluator shall provision a certificate with a key pair that is compatible with the specific signature_algorithm value, \n                            send a TLS 1.3 ClientHello that indicates a supported ciphersuite and has a signature_algorithms extension consisting of a single value matching the specific signature algorithm. \n                            <p>\n                            If the TSF supports the signature_algorithms_cert extension, the ClientHello also contains a signature_algorithms_cert extension with a value consistent with the provisioned certificate.\n                            </p> <p>\n                            The evaluator shall observe that the TSF sends a certificate message containing the provisioned certificate consistent with the \n                            specific signature_algorithm value (and signed using the signature_algorithms_cert extension value) and a certificate verify message using the signature_algorithms extension value.\n                            </p> <p><b>Note:</b> For TLS 1.3, the certificate message and certificate verify is encrypted. The evaluator shall confirm the values of these messages as received at the test TLS client, using logs, or using a test TLS client designed to expose the certificates after they are decrypted. \n                            </p> <p>\n                            It is not necessary to manually verify the signature used in the key exchange message (TLS 1.2) or certificate verify message (TLS 1.3). \n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7c466fde-20cc-41ca-8d15-ba69dbdb7c85": {
            "testListUUID": "3d7446e8-58cf-4223-8ffa-facfe09f402a",
            "id": "tls-server-mismatch-signature",
            "objective": "[conditional] If the TSF supports TLS 1.2, the evaluator shall repeat &lt;xref to=\"tls-server-correct-signature\"/&gt; with both the provisioned certificate indicated for \n                                &lt;xref to=\"tls-server-correct-signature\"/&gt; and a provisioned certificate using a public key that is not consistent with the \n                                signature_algorithm value, but signed by a CA using the signature algorithm specified in the ClientHello. \n                                The evaluator shall observe that the TSF\u2019s certificate message does not include the certificate that does not match \n                                the signature_algorithm value in the ClientHello. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1370fab6-22d2-40e7-bae8-e3bdc0c4f34c": {
            "testListUUID": "3d7446e8-58cf-4223-8ffa-facfe09f402a",
            "id": "tls-server-mismatch-1-3-signature",
            "objective": "[conditional] If TSF supports TLS 1.3, \n                                the evaluator shall similarly repeat &lt;xref to=\"tls-server-correct-1-3-signature\"/&gt; \n                                with both the provisioned certificate indicated for &lt;xref to=\"tls-server-correct-1-3-signature\"/&gt; and a provisioned certificate \n                                with public keys that are not consistent with the signature_algorithm value but which are signed by a CA \n                                using the signature_algorithm value specified in the ClientHello, \n                                and observe that the certificate message sent by the TSF does not include the certificate that \n                                does not match the value of the signature_algorithm entry in the ClientHello. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f5674f4b-b62d-487e-ac07-17d0814fda05": {
            "testListUUID": "3d7446e8-58cf-4223-8ffa-facfe09f402a",
            "id": "",
            "objective": "[conditional] If the ST also indicates support for the signature_algorithms_cert extension, \n                                the evaluator shall repeat &lt;xref to=\"tls-server-mismatch-signature\"/&gt; (if TLS 1.2 is supported) and &lt;xref to=\"tls-server-mismatch-1-3-signature\"/&gt; \n                                (if TLS 1.3 is supported) using additional provisioned certificates \n                                representing the TOE that use public keys consistent with the signature_algorithm value, \n                                but which are signed by CAs using signature algorithms that do not match the value of the signature_algorithms_cert in the ClientHello \n                                and observe that the TSF\u2019s certificate message does not include the certificate that does not match \n                                the signature_algorithms_cert values in the ClientHello.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "3fcfae80-274e-42f3-ab6f-f4f806f97401": {
            "testListUUID": "6990ec33-aeb3-480e-98f4-17a5a93d0eee",
            "id": "",
            "objective": "\n                            [conditional] If the ST indicates that the TSF supports provisioning of multiple certificates, \n                            the evaluator shall conduct the following sub-tests:\n                            ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "3d7446e8-58cf-4223-8ffa-facfe09f402a"
            ]
          },
          "3ad35526-895c-4948-b754-ae3f9e3f4195": {
            "testListUUID": "6990ec33-aeb3-480e-98f4-17a5a93d0eee",
            "id": "",
            "objective": "[conditional] If TLS 1.2 is supported, the evaluator shall provision a certificate as in &lt;xref to=\"tls-server-correct-signature\"/&gt;, \n                            but shall send a ClientHello that only offers ciphersuites whose signature component does not match the value of the signature_algorithms extension. The evaluator shall observe that the TSF terminates the handshake.\n                            <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, illegal parameter) in response to this, \n                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "f169d34a-22c5-4d07-afbc-e335d782570b": {
            "testListUUID": "2427ddf0-d02a-4066-b423-05d1496369cb",
            "id": "",
            "objective": "\n                        (signature algorithms) [conditional] If the TSF supports certificate-based authentication, \n                        then for each supported signature algorithm indicated in the ST, the evaluator shall perform the following sub-tests with certificates that represent the TOE. \n                        For each sub-test, the evaluator shall establish a certificate\n                        representing the TOE and using a public-private key pair suitable for the specific signature algorithm value, and signed by a certification authority\n                        that uses the same signature algorithm.\n                       <p>\n                        If the TSF also supports the signature_algorithms_cert extension, then for each value of the signature_algorithms_cert extension, \n                        the evaluator shall repeat the sub-tests \n                        \n                        using a certificate representing the TOE and using a key pair consistent with the signature algorithm, \n                        but signed by a certification authority using the signature algorithm specified in the signature_algorithms_cert extension. \n                       </p> <p><b>Note:</b> If TLS 1.2 is supported, the TSF supports certificate-based server authentication if the TLS 1.2 supported ciphersuites include ciphersuites other than \n                        TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442, TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, \n                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, and TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487. \n                        If these are the only supported ciphersuites, this test is omitted. If TLS 1.3 is supported, certificate-based server authentication is required, and the TLS 1.3 ClientHello for the test should not include the PSK extension.\n                       </p> <p>\n                        The evaluator shall follow operational guidance instructions to provision the TSF with one or more of these certificates as indicated in the following sub-tests:\n                       </p>",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "6990ec33-aeb3-480e-98f4-17a5a93d0eee"
            ]
          },
          "0b3e7476-5b8f-4f12-9b8b-587c1e7ccc2e": {
            "testListUUID": "2427ddf0-d02a-4066-b423-05d1496369cb",
            "id": "",
            "objective": "(extended_master_secret) [conditional] If TLS 1.2 is supported, the evaluator shall configure the TSF as necessary to enforce client support for extended master secret. The evaluator shall initiate a TLS 1.2 session with the TSF from a test TLS client for which the ClientHello does not include the extended_master_secret extension and observe that the TSF terminates the session.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake error) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5b035cf6-1a46-4daf-84c5-6a83c1b16bda": {
            "testListUUID": "09c17b14-5d29-49c3-ab16-05439ed7bd35",
            "id": "",
            "objective": "(extensions)\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "2427ddf0-d02a-4066-b423-05d1496369cb"
            ]
          },
          "6a458d93-4460-488b-93f6-da1d3cd97141": {
            "testListUUID": "76b1f820-3f69-4496-9139-757a2ef3e170",
            "id": "",
            "objective": "For each supported RSA key size, the evaluator shall provision the TSF with a valid certificate that has an RSA public key of that size. \n                            The evaluator shall initiate a valid TLS 1.2 handshake from a compliant test TLS 1.2 client and observe that the server certificate message matches the provisioned certificate.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "a36987dd-3c02-459f-9fee-9687e7784eb3": {
            "testListUUID": "76b1f820-3f69-4496-9139-757a2ef3e170",
            "id": "",
            "objective": "For each supported RSA key size, the evaluator shall send the TSF a compliant TLS 1.2 ClientHello, \n                            but in place of the client\u2019s key exchange message, the evaluator shall send the TSF a (non-compliant) key exchange message that is properly formatted but uses an invalid EncryptedPreMasterSecret \n                            field in the TLS handshake (e.g., modify a byte of a properly computed value). \n                            The evaluator shall attempt to complete the handshake using compliant client change cipher spec and finished messages and verify that the TSF terminates the handshake in a manner that is indistinguishable \n                            from a finished message error and does not send application data.\n                            <p><b>Note:</b> Mitigations for oracle attacks described in RFC 5246 Appendix D require the TSF to exhibit the same behavior for key establishment failures as it does for finished message failures. \n                            It is preferred that the TSF send a fatal decrypt failure error alert at the end of the handshake in both this case and for a finished message error,  \n                            but it is acceptable that the TSF terminate the session with another error alert, or without sending an error alert in either case. \n                            If the failure error alert is not for a decryption failure, the evaluator shall note that the TSF\u2019s response agrees with the response observed \n                            in the TLS 1.2 iteration of &lt;xref to=\"tls-server-rejects-bad-client-finished\"/&gt;. \n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "4073d7f7-f7ca-44ab-82c5-aad391fab335": {
            "testListUUID": "79dcf7ed-c764-4757-a13b-b6f741ecbff2",
            "id": "",
            "objective": "(TLS 1.2 RSA key establishment) [conditional] If TLS 1.2 is supported and if any of the supported TLS 1.2 ciphersuites in the ST includes RSA for the key establishment method, the evaluator shall perform the following sub-tests:\n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "76b1f820-3f69-4496-9139-757a2ef3e170"
            ]
          },
          "dbcac65a-ef9a-483d-94e1-b0243fd07959": {
            "testListUUID": "79dcf7ed-c764-4757-a13b-b6f741ecbff2",
            "id": "tls-server-rejects-bad-client-finished",
            "objective": "For each supported version, the evaluator shall initiate a compliant handshake up through the (implied for TLS 1.3) change cipher spec message. \n                        The evaluator shall then send a (non-compliant) client finished handshake message with an invalid \u2018verify data\u2019 value and \n                        verify that the server terminates the session and does not send any application data.\n                        <p><b>Note:</b> TLS 1.2 handshakes include explicit change cipher spec messages, \n                        but TLS 1.3 omits the change cipher spec message. If TLS 1.3 is supported, the modified finished message is sent as the final message from the client \n                        after receiving the server\u2019s second flight of handshake messages [encrypted extensions, (new ticket), (certificate, certificate verify), (certificate request)].\n                        </p> <p>\n                        It is preferred that the TSF send a fatal decryption failure error alert, but it is acceptable that the TSF terminate the session using another error alert or without sending an error alert.\n                        </p> <p>\n                        The finished message is encrypted. The invalid \u2018verify data\u2019 can be constructed by modifying a byte of a compliant finished message payload.\n                      </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "0ea99e79-bd25-4abe-baee-b542a30b49af": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "\n                            [conditional] If the TSF supports DHE ciphersuites and supports DHE groups in the supported_groups extension, \n                            then for each supported DHE group, the evaluator shall send the TSF a compliant TLS 1.2 ClientHello indicating a single ciphersuite that is\n                            compatible with the group and indicating the group in the supported_groups extension. \n                            The evaluator shall observe that the TSF negotiates TLS 1.2 using the indicated ciphersuite and that the server key exchange message indicates the specific group. \n                            The evaluator shall send the TOE a client key exchange with a valid point in the group and observe that the TSF successfully completes the session.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b8b98db7-cdbd-4238-850c-0d20b80784dc": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous test with identical ciphersuite and supported\n                            group extension values. After the TSF responds with a valid key exchange message, \n                            the evaluator shall send the TSF a client key exchange with the public key value '0.' The evaluator shall observe that the TSF terminates the session.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "b020c9b0-fcac-4636-a640-52bebc54f7f3": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous two tests including the same ciphersuite, but now instead indicating a group not supported by the TSF in the supported_groups extension. \n                            The evaluator shall observe that the TSF terminates the session.\n                            <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error) in response to this, \n                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "0e4e49cf-ed56-4f29-96a4-7fae0a995cca": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "[conditional] If the TSF supports ECDHE ciphersuites (and therefore supports ECDHE groups in the supported_groups extension), \n                            the evaluator shall send a ClientHello message indicating a single supported ECDHE ciphersuite and including the supported ECDHE group in the supported_groups extension. \n                            The evaluator shall observe that the TSF sends a key exchange message with a valid point of the specified group. \n                            The evaluator shall send the TSF a client key exchange message to the TSF consisting of a valid element in the supported group and observe that the TSF successfully completes the session.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "cc0011f3-64fa-4c30-a791-774d5a63f4b2": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous test with identical ciphersuite and supported group extension values. After the TSF sends the valid key exchange message, \n                            the evaluator shall send a ClientHello consisting of an invalid element of the supported group and observe that the TSF terminates the handshake.\n                          ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "7f12c71f-eeaf-4b93-b668-8ef83c4fd47b": {
            "testListUUID": "26d6ab39-0170-41c6-bf0d-be791a3ee176",
            "id": "",
            "objective": "\n                            The evaluator shall send a ClientHello to the TOE as in the previous two tests indicating the supported ECDHE ciphersuite, but now including an ECDHE group that is not supported. The evaluator shall observe that the TSF terminates the session. \n                            <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure, illegal parameter, handshake error, insufficient security) in response to this, \n                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).  \n                            </p> <p>\n                            An invalid ECDSA point consists of properly formatted x and y components, but for which the equation of the curve is not satisfied. To obtain an invalid point, the evaluator shall modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve. \n                            </p> <p>\n                            The IANA TLS parameters website lists registered ECDHE groups for use in selecting a non-supported group. If the TSF supports all registered ECDHE groups, it is acceptable to send the ClientHello without a supported_groups extension. The TSF should reject such a ClientHello, but it is acceptable for the TSF to default to a supported group. In this case, the TSF passes the test.\n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c59bd1b1-f1c6-4d0e-8c93-64b337e655ea": {
            "testListUUID": "79dcf7ed-c764-4757-a13b-b6f741ecbff2",
            "id": "",
            "objective": "(TLS 1.2 DHE or ECDHE key establishment) [conditional] If the TSF supports TLS 1.2 and supports DHE or ECDHE ciphersuites for TLS 1.2, then the evaluator shall perform the following sub-tests:\n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "26d6ab39-0170-41c6-bf0d-be791a3ee176"
            ]
          },
          "893ba11e-bafb-4483-b365-8f4ca79b3bda": {
            "testListUUID": "9eee089e-eb6c-428b-abc3-727009613ba5",
            "id": "",
            "objective": "The evaluator shall send the TSF a compliant TLS 1.3 ClientHello indicating a single key share value from the supported group and shall observe that the ServerHello \n                            includes valid key exchange parameters of the supported group, as specified by RFC 8446 section 4.2.8.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c1851f59-e4d0-41a0-b5f0-29e5b7e6e113": {
            "testListUUID": "9eee089e-eb6c-428b-abc3-727009613ba5",
            "id": "",
            "objective": "The evaluator shall send the TSF a TLS 1.3 ClientHello indicating a supported_groups value supported by the TSF \n                            but containing a key_share extension indicating an element claiming to be in the supported group that does not represent a valid element of the group. The evaluator shall observe that the TSF terminates the session.\n                            <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter, handshake failure, decryption failure) in response to this, \n                            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                            </p> <p>\n                            For DHE groups, the invalid element may be of the wrong length; \n                            for ECDHE groups, the invalid element has coordinates (x and y) that do not satisfy the equation of the elliptic curve. \n                            To obtain an invalid ECDHE point, the evaluator shall modify a byte of the y coordinate value of a valid point and confirm that the point is not on the curve.\n                            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2a715505-1afe-495f-92b5-0a5c2a93228a": {
            "testListUUID": "79dcf7ed-c764-4757-a13b-b6f741ecbff2",
            "id": "",
            "objective": "(TLS 1.3 key establishment) [conditional] If the TSF supports TLS 1.3, then for each supported group the evaluator shall perform the following sub-tests: \n                        ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "9eee089e-eb6c-428b-abc3-727009613ba5"
            ]
          },
          "90ab8a47-c821-4955-a55b-21a09cab6b32": {
            "testListUUID": "79dcf7ed-c764-4757-a13b-b6f741ecbff2",
            "id": "tls-server-no-finished-msg",
            "objective": "For each supported version, the evaluator shall initiate a TLS handshake from a test TLS client \n                        with compliant handshake messages negotiating the version and supported parameters \n                        to include the change cipher spec message (implied for TLS 1.3), but which omits the finished message and instead \n                        sends an application message containing random data. The evaluator shall observe that the TSF terminates the connection.\n                        <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., decryption failure) in response to this, \n                        but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                        </p> <p>\n                        Application data is indicated by the TLSCipherText ContentType field having value 23 (application data). \n                        The legacy record version '03 03' and length fields should match a valid TLSCipherText message of the same size.\n                        </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5fa599d3-47e1-451f-9f2d-a1f8cc5cf372": {
            "testListUUID": "09c17b14-5d29-49c3-ab16-05439ed7bd35",
            "id": "tls-server-key-exchange",
            "objective": "\n                    (key establishment) The evaluator shall perform the following tests to confirm compliant key establishment:\n                    ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "79dcf7ed-c764-4757-a13b-b6f741ecbff2"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.2": {
    "title": "TLS Server Support for Mutual Authentication",
    "cc_id": "FCS_TLSS_EXT.2",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "b9c51387-6a65-4d4c-9b81-4d9fd8fa76dc"
      ],
      "selections": [
        "e1131dca-00bd-4476-a477-3ae2ca8f03e9"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support mutually-authenticated TLS when acting as a TLS server.\n         ",
      "dependencies": "FCS_TLSS_EXT.1 TLS Server Protocol\n         ",
      "managementFunction": "No specific management functions are identified.\n         ",
      "toggle": true
    },
    "auditEvents": {
      "43f15a2b-43b8-44f4-9de5-122fad64efed": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "42842ccd-cab3-42b5-9a3b-9c9b2e360f45": {
        "elementXMLID": "fel-tlss-auth",
        "selectableGroups": {
          "group-164": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "5713d631-3d3c-430c-b012-8f48881cee77",
              "88c3347f-f727-4f99-80cb-5539ce0bc0c7"
            ]
          },
          "group-165": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "ec462b21-b08f-4f3f-ba2d-0ab817bb5226",
              "a00d116a-6fde-499a-8c79-dcdc40dff524"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support authentication of TLS clients using X.509v3 certificates during the TLS handshake and "
          },
          {
            "selections": "group-164"
          },
          {
            "text": " \n              using the certificate types indicated in the client\u2019s signature_algorithms and "
          },
          {
            "selections": "group-165"
          },
          {
            "text": " extension.\n            "
          }
        ],
        "selectables": {
          "5713d631-3d3c-430c-b012-8f48881cee77": {
            "type": "selectable",
            "uuid": "5713d631-3d3c-430c-b012-8f48881cee77",
            "id": "fcs_tlss_ext.2.1_1",
            "description": "during post-handshake requests",
            "exclusive": false,
            "nestedGroups": []
          },
          "88c3347f-f727-4f99-80cb-5539ce0bc0c7": {
            "type": "selectable",
            "uuid": "88c3347f-f727-4f99-80cb-5539ce0bc0c7",
            "id": "fcs_tlss_ext.2.1_2",
            "description": "at no other time",
            "exclusive": false,
            "nestedGroups": []
          },
          "ec462b21-b08f-4f3f-ba2d-0ab817bb5226": {
            "type": "selectable",
            "uuid": "ec462b21-b08f-4f3f-ba2d-0ab817bb5226",
            "id": "fcs_tlss_ext.2.1_3",
            "description": "signature_algorithms_cert",
            "exclusive": false,
            "nestedGroups": []
          },
          "a00d116a-6fde-499a-8c79-dcdc40dff524": {
            "type": "selectable",
            "uuid": "a00d116a-6fde-499a-8c79-dcdc40dff524",
            "id": "fcs_tlss_ext.2.1_4",
            "description": "no other",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"mutual authentication\" is selected in FCS_TLSS_EXT.1.1.\n              </p> <p>\n              TLS 1.3 supports authentication after completing the abbreviated handshake with pre-shared keys. \n              A server may send a client a certificate request after the finished message whenever the client includes the post-handshake authentication extension. \n              The ST author claims \u2018during post-handshake request\u2019 if this feature is supported. \n              If TLS 1.3 is not supported, or if the TLS post-handshake request extension is not recognized in a TLS 1.3 handshake, the ST author selects \u2018at no other time\u2019.\n              </p>"
      },
      "db9b4124-a032-4308-ac4e-dccd4d1ba07e": {
        "elementXMLID": "fel-tlss-x509-auth",
        "selectableGroups": {},
        "title": [
          {
            "text": "The TSF shall support authentication of TLS clients using X.509v3 certificates in accordance with "
          },
          {
            "description": " &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt; ."
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "18f36563-45b8-4531-836a-badd4849c660": {
        "elementXMLID": "fel-tlss-invalid-client-cert",
        "selectableGroups": {
          "group-166": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlss_ext.2.3_1",
              "fcs_tlss_ext.2.3_5",
              "e6b6c2c9-56e9-4dc6-816d-41748d30bd80"
            ]
          },
          "fcs_tlss_ext.2.3_1": {
            "description": [
              {
                "text": "continue establishment of a server-only authenticated TLS channel in accordance with FCS_TLSS_EXT.1 in support of"
              },
              {
                "groups": [
                  "group-168"
                ]
              },
              {
                "text": "when an empty certificate message is provided by the client"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-168": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "09a3cfee-65a4-4155-94da-a4ac70aec1bd",
              "7c8d9bb6-f3bb-4d24-b0bd-026a1d6cc493"
            ]
          },
          "fcs_tlss_ext.2.3_5": {
            "description": [
              {
                "text": "continue establishment of a mutually authenticated TLS channel when revocation status information for the"
              },
              {
                "groups": [
                  "group-170"
                ]
              },
              {
                "text": "is not available in support of"
              },
              {
                "groups": [
                  "group-172"
                ]
              },
              {
                "text": "as"
              },
              {
                "groups": [
                  "group-174"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-170": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "2279c594-0526-40aa-a466-12e08ba821f0",
              "2ff17f63-2546-4228-b0bb-4421606fe120",
              "43b086d6-fa63-4a16-8731-c5224e8e857b"
            ]
          },
          "group-172": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "2bfcb8f6-105f-4ef5-87f5-01a5edc16535",
              "0980729f-336b-4907-9c1c-c3e14c56cd4d"
            ]
          },
          "group-174": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "d976568a-23dc-40b1-839b-d89c81f5bae8",
              "c975e145-9033-45d1-ae1d-2c4766dfad00",
              "fcs_tlss_ext.2.3_15"
            ]
          },
          "fcs_tlss_ext.2.3_15": {
            "description": [
              {
                "text": "a TLS-specific default for"
              },
              {
                "groups": [
                  "b6a6dad5-14e1-4699-b12f-def3d6b388f9"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          }
        },
        "title": [
          {
            "text": "\n             The TSF shall be able to reject the establishment of a trusted channel if the requested client certificate is invalid and "
          },
          {
            "selections": "group-166"
          },
          {
            "text": ". \n           "
          }
        ],
        "selectables": {
          "09a3cfee-65a4-4155-94da-a4ac70aec1bd": {
            "type": "selectable",
            "uuid": "09a3cfee-65a4-4155-94da-a4ac70aec1bd",
            "id": "fcs_tlss_ext.2.3_2",
            "description": "all applications",
            "exclusive": false,
            "nestedGroups": []
          },
          "7c8d9bb6-f3bb-4d24-b0bd-026a1d6cc493": {
            "id": "fcs_tlss_ext.2.3_4",
            "description": "list of calling applications that accept both authenticated and unauthenticated client sessions",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "2279c594-0526-40aa-a466-12e08ba821f0": {
            "type": "selectable",
            "uuid": "2279c594-0526-40aa-a466-12e08ba821f0",
            "id": "fcs_tlss_ext.2.3_6",
            "description": "client's leaf certificate",
            "exclusive": false,
            "nestedGroups": []
          },
          "2ff17f63-2546-4228-b0bb-4421606fe120": {
            "id": "fcs_tlss_ext.2.3_8",
            "description": "specific intermediate CA certificates",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "43b086d6-fa63-4a16-8731-c5224e8e857b": {
            "type": "selectable",
            "uuid": "43b086d6-fa63-4a16-8731-c5224e8e857b",
            "id": "fcs_tlss_ext.2.3_9",
            "description": "any non-trust store certificate in the certificate chain",
            "exclusive": false,
            "nestedGroups": []
          },
          "2bfcb8f6-105f-4ef5-87f5-01a5edc16535": {
            "type": "selectable",
            "uuid": "2bfcb8f6-105f-4ef5-87f5-01a5edc16535",
            "id": "fcs_tlss_ext.2.3_10",
            "description": "all supported functions",
            "exclusive": false,
            "nestedGroups": []
          },
          "0980729f-336b-4907-9c1c-c3e14c56cd4d": {
            "id": "fcs_tlss_ext.2.3_12",
            "description": "list of calling supported functions configurable to perform certificate status information bypass processing",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "d976568a-23dc-40b1-839b-d89c81f5bae8": {
            "type": "selectable",
            "uuid": "d976568a-23dc-40b1-839b-d89c81f5bae8",
            "id": "fcs_tlss_ext.2.3_13",
            "description": "configured by an administrator",
            "exclusive": false,
            "nestedGroups": []
          },
          "c975e145-9033-45d1-ae1d-2c4766dfad00": {
            "type": "selectable",
            "uuid": "c975e145-9033-45d1-ae1d-2c4766dfad00",
            "id": "fcs_tlss_ext.2.3_14",
            "description": "confirmed by the supported function user",
            "exclusive": false,
            "nestedGroups": []
          },
          "b6a6dad5-14e1-4699-b12f-def3d6b388f9": {
            "id": "fcs_tlss_ext.2.3_16",
            "description": "subset of supported functions",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "e6b6c2c9-56e9-4dc6-816d-41748d30bd80": {
            "type": "selectable",
            "uuid": "e6b6c2c9-56e9-4dc6-816d-41748d30bd80",
            "id": "fcs_tlss_ext.2.3_17",
            "description": "no other processing options for missing or invalid client certificates",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n             The ST author claims any certificate processing exceptions that are allowed for specific calling applications. \n             The \"continue establishment of a server-only authenticated TLS channel\" selection is claimed if the TLS product supports applications that can \n             provide services to unauthenticated users if the user does not possess an appropriate certificate. \n             Within this selection, the ST author indicates which applications are able to support both authenticated and unauthenticated users.\n             </p> <p>\n             The ST author claims \"continue establishment of a mutually authenticated TLS channel\" if there is an administrator configuration or \n             user confirmation that revocation status information is not available for one or more of the certificates in the client\u2019s certificate chain. \n             If claimed, the ST author will describe in the assignment for intermediate values which CA certificates are included in the exception \n             (for example, \u201call intermediates but the issuing CA\u201d or \u201cspecific end-entity certificates as configured\u201d). \n             Within this selection, the ST author specifies which applications are impacted and which authorized user is allowed to approve continuing with the session \n             when revocation information is not available.</p> <p> \n             If an administrator configures whether a user may accept a certificate without status information, both selections are claimed. \n             The \"a TLS-specific default\" selection should only be chosen for applications that do not have access to revocation information. This\n             is not claimed when alternate revocation methods are claimed in FIA_X509_EXT.1 that apply to TLS client certificates.\n             Methods for obtaining revocation information are included in &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt; .\n             </p>"
      },
      "8892b77d-208d-4919-bec5-edaa3bf8ee55": {
        "elementXMLID": "fcs_tlss_ext-2-4",
        "selectableGroups": {
          "group-175": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "fcs_tlss_ext.2.4_1",
              "fcs_tlss_ext.2.4_11",
              "fcs_tlss_ext.2.4_20",
              "e6c5a0c7-26c3-4f64-a974-b78ed742c08d"
            ]
          },
          "fcs_tlss_ext.2.4_1": {
            "description": [
              {
                "text": "not establish a TLS session if an entry of the Distinguished Name or a"
              },
              {
                "groups": [
                  "group-177"
                ]
              },
              {
                "text": "in the Subject Alternate Name extension contained in the client certificate does not match one of the expected identifiers for the client in accordance with"
              },
              {
                "groups": [
                  "group-179"
                ]
              },
              {
                "text": "matching rules"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-177": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "de8cb1cc-700c-4084-9d4f-e796e31ce291",
              "d4ba51c2-bb6b-4394-93e9-eeb2754db672",
              "86ee269b-3339-4964-a7f1-cafea86f2917"
            ]
          },
          "group-179": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "55375338-64f0-4fc9-aad5-3fc0d3fa7720",
              "6c994bba-7342-4bec-ba93-266909c990db",
              "a655d410-54ee-4255-b427-a93fa57fa73e",
              "9408b3c8-9717-46ff-b97c-021b34163351"
            ]
          },
          "fcs_tlss_ext.2.4_11": {
            "description": [
              {
                "text": "pass the"
              },
              {
                "groups": [
                  "group-181"
                ]
              },
              {
                "text": "to"
              },
              {
                "groups": [
                  "c54f99a0-8b9c-4937-ba97-4e74ec33311e"
                ]
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-181": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "a4150ee3-49a6-4a31-8d45-4f796002e937",
              "3b71300a-53b0-459b-a091-193a2063744d",
              "e31a2477-198f-4bab-938a-086f7bb4448c",
              "016c5ef6-377d-458e-bb91-2f48b573817c",
              "6a952c12-1fa2-4809-8b54-7f658da25994"
            ]
          },
          "fcs_tlss_ext.2.4_20": {
            "description": [
              {
                "text": "pass initial name constraints of type"
              },
              {
                "groups": [
                  "group-183"
                ]
              },
              {
                "text": "to the certification path processing function to verify, in accordance with FIA_X509_EXT.1, that the presented identifier matches an expected client identifier"
              }
            ],
            "exclusive": false,
            "notSelectable": false
          },
          "group-183": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "6e9a06c3-e62e-4f89-b2eb-d0f4bae9a790",
              "d2687169-bbec-4786-a465-127b008c8b24",
              "e7746ce0-6f7f-4f84-8545-ca90aaf25a02",
              "89354300-afbc-4388-8308-b40e490a13ba"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall be able to "
          },
          {
            "selections": "group-175"
          },
          {
            "text": ".\n           "
          }
        ],
        "selectables": {
          "de8cb1cc-700c-4084-9d4f-e796e31ce291": {
            "type": "selectable",
            "uuid": "de8cb1cc-700c-4084-9d4f-e796e31ce291",
            "id": "fcs_tlss_ext.2.4_2",
            "description": "rfc822_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "d4ba51c2-bb6b-4394-93e9-eeb2754db672": {
            "type": "selectable",
            "uuid": "d4ba51c2-bb6b-4394-93e9-eeb2754db672",
            "id": "fcs_tlss_ext.2.4_3",
            "description": "dns_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "86ee269b-3339-4964-a7f1-cafea86f2917": {
            "id": "fcs_tlss_ext.2.4_5",
            "description": "supported name types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "55375338-64f0-4fc9-aad5-3fc0d3fa7720": {
            "type": "selectable",
            "uuid": "55375338-64f0-4fc9-aad5-3fc0d3fa7720",
            "id": "fcs_tlss_ext.2.4_6",
            "description": "RFC 5322",
            "exclusive": false,
            "nestedGroups": []
          },
          "6c994bba-7342-4bec-ba93-266909c990db": {
            "type": "selectable",
            "uuid": "6c994bba-7342-4bec-ba93-266909c990db",
            "id": "fcs_tlss_ext.2.4_7",
            "description": "RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "a655d410-54ee-4255-b427-a93fa57fa73e": {
            "type": "selectable",
            "uuid": "a655d410-54ee-4255-b427-a93fa57fa73e",
            "id": "fcs_tlss_ext.2.4_8",
            "description": "RFC 5280",
            "exclusive": false,
            "nestedGroups": []
          },
          "9408b3c8-9717-46ff-b97c-021b34163351": {
            "id": "fcs_tlss_ext.2.4_10",
            "description": "RFC for the supported name type",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "a4150ee3-49a6-4a31-8d45-4f796002e937": {
            "type": "selectable",
            "uuid": "a4150ee3-49a6-4a31-8d45-4f796002e937",
            "id": "fcs_tlss_ext.2.4_12",
            "description": "validated certificate",
            "exclusive": false,
            "nestedGroups": []
          },
          "3b71300a-53b0-459b-a091-193a2063744d": {
            "type": "selectable",
            "uuid": "3b71300a-53b0-459b-a091-193a2063744d",
            "id": "fcs_tlss_ext.2.4_13",
            "description": "RFC 5322 name normalized according to RFC 5322",
            "exclusive": false,
            "nestedGroups": []
          },
          "e31a2477-198f-4bab-938a-086f7bb4448c": {
            "type": "selectable",
            "uuid": "e31a2477-198f-4bab-938a-086f7bb4448c",
            "id": "fcs_tlss_ext.2.4_14",
            "description": "DNS name normalized according to RFC 6125",
            "exclusive": false,
            "nestedGroups": []
          },
          "016c5ef6-377d-458e-bb91-2f48b573817c": {
            "id": "fcs_tlss_ext.2.4_16",
            "description": "list of RFC 5280 name types and normalization rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "6a952c12-1fa2-4809-8b54-7f658da25994": {
            "id": "fcs_tlss_ext.2.4_18",
            "description": "list of 'other' name types and standard normalization rules",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "c54f99a0-8b9c-4937-ba97-4e74ec33311e": {
            "id": "fcs_tlss_ext.2.4_19",
            "description": "list of calling applications capable of making access decisions",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "6e9a06c3-e62e-4f89-b2eb-d0f4bae9a790": {
            "type": "selectable",
            "uuid": "6e9a06c3-e62e-4f89-b2eb-d0f4bae9a790",
            "id": "fcs_tlss_ext.2.4_21",
            "description": "directory name",
            "exclusive": false,
            "nestedGroups": []
          },
          "d2687169-bbec-4786-a465-127b008c8b24": {
            "type": "selectable",
            "uuid": "d2687169-bbec-4786-a465-127b008c8b24",
            "id": "fcs_tlss_ext.2.4_22",
            "description": "rfc_822_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "e7746ce0-6f7f-4f84-8545-ca90aaf25a02": {
            "type": "selectable",
            "uuid": "e7746ce0-6f7f-4f84-8545-ca90aaf25a02",
            "id": "fcs_tlss_ext.2.4_23",
            "description": "dns_name",
            "exclusive": false,
            "nestedGroups": []
          },
          "89354300-afbc-4388-8308-b40e490a13ba": {
            "id": "fcs_tlss_ext.2.4_25",
            "description": "supported name types",
            "assignment": true,
            "exclusive": false,
            "notSelectable": false
          },
          "e6c5a0c7-26c3-4f64-a974-b78ed742c08d": {
            "type": "selectable",
            "uuid": "e6c5a0c7-26c3-4f64-a974-b78ed742c08d",
            "id": "fcs_tlss_ext.2.4_26",
            "description": "associate a PSK to a specific reference identifier",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n             Authorization for services provided by the applications that are protected by the TLS session is determined by the supported\n             function establishing a set of reference identifiers, by passing the received identifiers to the supported function, or by passing\n             initial name constraints to the certification path validation function. \n             The ST author indicates the methods supported and, for each method supported, indicates all name types supported; if name types are\n             processed by the TSF, at least one name type is required. \n             In the assignment of the first option, the ST author indicates all name types and the corresponding method for matching in the sub-selections. \n             In the second method option, the ST author indicates which name type normalizations the product supports. \n             If the product passes the entire validated certificate to the application, no normalization of the names contained in the certificate is expected. \n             If the third method is claimed, the ST author indicates which name types are supported for formulating initial name constraints.\n             </p> <p>\n             If name normalization is claimed, care should be taken regarding wildcards and IP addresses. \n             IP addresses embedded in DNS host names and in Directory Name CN components have been observed to include non-standard wildcard designations including the \u2018*\u2019 character. \n             Any embedded IP addresses should use standard CIDR notation and should not include nonstandard encoding. \n             </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "90d18655-1f37-4d0b-b805-7db2eda18243": {
        "tss": "<p>\n\t          The evaluator shall ensure that the TSS description required per &lt;no-link&gt;FIA_X509_EXT.2.1 &lt;/no-link&gt;  includes the use of client-side certificates for TLS mutual authentication, \n\t        and that the description includes any certificate validation exception rules and the name types supported for matching to reference identifiers for all applications that use TLS. \n\t        The evaluator shall examine the TSS to ensure that any CN-embedded name types that are used include a description of the encoding and matching rules.</p> <p>\n\t          The evaluator shall ensure that the TSS includes a description of each response option claimed in &lt;xref to=\"fel-tlss-invalid-client-cert\"/&gt;, to include the supporting functions using the option, and the behavior of functions exercising a non-authenticated option or exception processing (if claimed).\n\t        </p>",
        "introduction": "",
        "guidance": "<p>\n\t          The evaluator shall verify that the operational guidance includes instructions for configuring trust stores for client-side certificates used in TLS mutual authentication. \n\t        The evaluator shall ensure that the operational guidance includes instructions for configuring the server to require mutual authentication of clients using these certificates and for configuring any certificate validation exception rules. \n\t        The evaluator shall ensure that the operational guidance includes instructions for configuring reference identifiers normalized or matched by the TSF and matching rules for the supported name types.\n\t        </p>",
        "testIntroduction": "The evaluator shall use TLS as a function to verify that the validation rules in &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  are adhered to and shall perform the tests listed below in conjunction with testing for &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt;  . The evaluator shall apply the operational guidance to configure the server to require TLS mutual authentication of clients for these tests unless overridden by instructions in the test activity. <p><b>Note:</b> TLS 1.3 is a fundamentally different protocol than TLS 1.2, so even though the certificate validation and name checking tests are identical for both versions, it is likely that early deployments of TLS 1.3 may use a different code-base that warrants independent testing. If both TLS 1.2 and TLS 1.3 are supported and the evaluator can verify that the TSF uses the same code-base for certificate validation and name checking for both TLS 1.3 and TLS 1.2, it is acceptable that testing be performed for only one version for these tests.\n\t        </p>",
        "testClosing": "",
        "testLists": {
          "d291e881-d731-4f5d-a856-fa91ac6acfef": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "035e61f6-bfd2-4e6f-8954-9bab9c134ea1",
              "6e27d1db-9b87-4fdd-b266-2be49c9a73d9",
              "f811563f-12ca-4ba8-937d-d2b004c27928"
            ],
            "conclusion": ""
          },
          "95f9396c-cefd-4e42-9cae-671da1761a0e": {
            "parentTestUUID": "6e27d1db-9b87-4fdd-b266-2be49c9a73d9",
            "description": "",
            "testUUIDs": [
              "c5206f75-9c1c-4919-8ce5-a624c98c5f81",
              "d52b75cb-feb5-4ac4-b1fd-a982a13615a7"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "035e61f6-bfd2-4e6f-8954-9bab9c134ea1": {
            "testListUUID": "d291e881-d731-4f5d-a856-fa91ac6acfef",
            "id": "",
            "objective": "\n\t            For each supported version, the evaluator shall follow the operational guidance to configure the TOE to require valid client authentication with no exceptions in support of a function (configured, as necessary) that does not allow unauthenticated sessions, and initiate a TLS session from a compliant TLS test client \n\t            supporting that version. The evaluator shall ensure that the test client sends a certificate_list structure which has a length of zero. The evaluator shall verify the TSF terminates the session and no application data flows. \n\t            <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure, bad certificate, unknown certificate, unknown CA) in response to this, \n\t            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n\t            </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "c5206f75-9c1c-4919-8ce5-a624c98c5f81": {
            "testListUUID": "95f9396c-cefd-4e42-9cae-671da1761a0e",
            "id": "",
            "objective": "[conditional]: If the TSF supports non-authenticated session establishment when receiving an empty certificate message, \n\t                the evaluator shall initiate a TLS handshake from a compliant test TLS client supporting the version and providing a certificate message \n\t                containing a certificate_list structure of length zero. The evaluator shall confirm that the TSF notifies the calling application that the user is unauthenticated.\n\t                <p><b>Note:</b> Specific procedures for determining that the calling application is notified will vary based on the application. \n\t                If an API to the calling application is not available, the evaluator may attempt to configure the calling application to provide a different response \n\t                (e.g., require authentication for flagged data) for authenticated and non-authenticated users and make a request at the test client that results in a response \n\t                indicating the application is treating the client as non-authenticated.\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "d52b75cb-feb5-4ac4-b1fd-a982a13615a7": {
            "testListUUID": "95f9396c-cefd-4e42-9cae-671da1761a0e",
            "id": "",
            "objective": "[conditional] If the TSF supports exceptions for when revocation status information is unavailable, \n\t                then the evaluator shall follow the operational guidance to attempt to establish a narrowly defined exception for which both exempt and non-exempt certificates can be established. \n\t                The evaluator shall establish a primary certificate chain for the test client that only exhibits the allowed exception \n\t                and one or more alternate certificate chains for the test client that do not pass the exception rule, as necessary to test the boundaries of the exception rules. \n\t                <p>\n\t                The evaluator shall follow the operational guidance to remove any cached revocation status information for the test client\u2019s primary certificate chain. \n\t                The evaluator shall initiate a valid TLS session from the test client that presents the primary certificate for the test client, \n\t                provide any feedback requested by the TSF to confirm the exception, and observe that the TSF allows the certificate and completes the TLS handshake successfully. \n\t                </p> <p>\n\t                For each alternate certificate chain, the evaluator shall repeat the session initiation from the test client but present the alternate certificate chain and observe that the TSF terminates the session.\n\t                </p> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., bad certificate, unknown certificate, access denied, handshake error) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n\t                </p> <p>\n\t                The alternate certificate chains are intended to test the boundaries of the exception rules. \n\t                For example, if the exception rule indicates that only leaf certificates are exempt, the evaluator shall include an alternate certificate chain for which a CA certificate\u2019s revocation information is advertised but is not available; \n\t                if the exception can be configured for an explicit leaf certificate, or particular subjects, an alternate chain will be included that does not include an excepted certificate or subject. \n\t                If the exception rules can be configured for all certificates having advertised revocation information, an alternate certificate chain can include an expired certificate \u2013 only one additional validity failure \n\t                (e.g., expired certificate) is required in this case. More comprehensive validity failure handling is addressed by testing for &lt;no-link&gt;FIA_X509_EXT.1 &lt;/no-link&gt; .\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "6e27d1db-9b87-4fdd-b266-2be49c9a73d9": {
            "testListUUID": "d291e881-d731-4f5d-a856-fa91ac6acfef",
            "id": "",
            "objective": "[conditional] If the ST indicates that the TSF supports establishment of a TLS session for missing or invalid certificates, then for each supported version, \n\t            and for each supported response option for a missing or invalid certificate indicated in FCS_TLSS_EXT.2.3, the evaluator shall configure the TSF according to the operational guidance \n\t            to respond as indicated for the calling application. The evaluator shall send client handshake messages from a test TLS client as indicated for each sub-test. The evaluator shall perform the following sub-tests:\n\t            ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "95f9396c-cefd-4e42-9cae-671da1761a0e"
            ]
          },
          "f811563f-12ca-4ba8-937d-d2b004c27928": {
            "testListUUID": "d291e881-d731-4f5d-a856-fa91ac6acfef",
            "id": "",
            "objective": "For each supported version, the evaluator shall configure the TSF to negotiate the version and require client authentication and perform the following steps: <ul><li>For each supported name matching method indicated in FCS_TLSS_EXT.2.4, and for each name type supported by the matching method,\n\t              the evaluator shall establish a valid primary certificate chain with a leaf certificate containing a single name of the supported type matching a reference ID and a valid alternate certificate chain with a leaf certificate containing a single name indicating a different name of the same type not matching a reference ID. </li> <li>[conditional] If any of the supported name types include CN encoding of a name type also supported as a SAN entry, the evaluator shall \n\t              \n\t              establish additional certificate chains:\n\t              <ul><li>The evaluator shall establish a primary certificate chain with multiple names, to include a leaf certificate with: \n\t                <ul><li>a SAN entry that matches the name in the primary certificate chain with single names, of the same SAN name type; and </li> <li>a CN entry encoding the same SAN type which matches the name in the alternate certificate chain with single names of the CN encoding of the same SAN name type;</li></ul></li> <li>The evaluator shall establish an alternate certificate chain with multiple names, to include a leaf certificate with:\n\t                <ul><li>a SAN entry that matches the name in the alternate certificate chain with single names, of the same SAN name type; and</li> <li>a CN entry encoding the same SAN type which matches the name in the primary certificate chain with single names, of the CN encoding of the same SAN name type.</li></ul></li></ul></li> <li>[conditional] If any of the supported name types include CN encoding, the evaluator shall follow the operational guidance to configure the TSF, \n\t              establishing trust in the root CA for all primary and alternate certificate chains. \n\t              The evaluator shall configure the TSF and any relevant TOE applications that use TLS for client authentication as necessary to establish reference identifiers that match the names in the client\u2019s primary certificate chains \n\t              with single names, but not matching any of the names in the alternate certificate chains with single names.</li> <li>For each primary certificate chain (with single or multiple names), the evaluator shall initiate a TLS session from the test TLS client that is configured to present the primary certificate chain \n\t              in a certificate message and a valid certificate verify message in response to the server\u2019s certificate request message. \n\t              The evaluator shall confirm that the TSF accepts the certificate and completes the authenticated TLS session successfully.</li> <li>For each alternate certificate chain (with single or multiple names), the evaluator shall initiate a TLS session from the test TLS client that is configured \n\t              to present the alternate certificate chain in a certificate message and a valid certificate verify message in response to the server\u2019s certificate request message. \n\t              The evaluator shall confirm that the TSF terminates the session.</li></ul> <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., access denied) in response to this, \n\t            but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t            </p> <p>\n\t            The intent of this test is to confirm that for each method that the TSF uses to match name types presented in validated certificates, \n\t            it is able to recognize both matching and non-matching names. \n\t            Names of special types implicitly encoded in the CN entry of the certificate subject name are especially prone to error since they may only be validated \n\t            by the issuing CA as a directory name (RDN) type, especially if the issuing CA is unaware of the intended encoding as a different name type. \n\t            It is a best practice that when the CN is interpreted as an embedded name type other than RDN, an explicitly encoded SAN entry should take precedence.\n\t            </p> <p>\n\t            TLS 1.3 certificate requests from the test server and client certificate and certificate verify messages are encrypted. The evaluator shall confirm that the TSF sends the appropriate messages by examining the messages received at the test TLS 1.3 server and by inspecting any relevant server logs. The evaluator may also take advantage of the calling application to demonstrate that the TOE receives data configured at the test TLS server.\n\t          </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.3": {
    "title": "TLS Server Downgrade Protection",
    "cc_id": "FCS_TLSS_EXT.3",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "b9c51387-6a65-4d4c-9b81-4d9fd8fa76dc"
      ],
      "selections": [
        "cc8cd872-b5d7-4c5f-8a66-ee58c367c24d"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to implement version downgrade protection when acting as a TLS server.\n          ",
      "dependencies": "FCS_TLSS_EXT.1 TLS Server Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "eb032224-8874-4941-b0c9-c6b083f1e3d6": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "aa4e76d4-0df3-4aa0-923b-0c3bd70d9126": {
        "elementXMLID": "fcs_tlss_ext-3-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall set the ServerHello extension to a random value concatenated with the TLS 1.2 downgrade indicator when negotiating TLS 1.2 as indicated in RFC 8446, Section 4.1.3.\n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if \"supplemental downgrade protection\" is selected in FCS_TLSS_EXT.1.1. \n              </p> <p>\n              RFC 8446 requires both the TLS 1.2 downgrade indicator as well as an indicator for TLS 1.1 and below. \n              This FP requires the server to reject attempts to establish TLS 1.1 and below, making this mechanism redundant. \n              However, products may still implement both indicators to be compliant with the RFC. \n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "77cbb24d-8450-4d09-b132-a499ea43dd0f": {
        "tss": "<p>\n          The evaluator shall examine the TSS and confirm that the TLS description includes details on the session downgrade protections that are supported.\n          </p>",
        "introduction": "",
        "guidance": "<p>\n          The evaluator shall examine the operational guidance to confirm that instructions are included to configure the TSF to support only TLS 1.3 and to provide the associated downgrade indications.\n        </p>",
        "testIntroduction": "The evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate only TLS 1.3 and to provide the associated downgrade indications. The evaluator shall send a TLS ClientHello to the TOE that indicates support for only TLS 1.2. The evaluator shall observe that the TSF sends a ServerHello with the last eight bytes of the server random value equal to 44 4F 57 4E 47 52 44 01.",
        "testClosing": "",
        "testLists": {},
        "tests": {},
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.4": {
    "title": "TLS Server Support for Renegotiation",
    "cc_id": "FCS_TLSS_EXT.4",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "2f476ac7-697d-431b-995b-c0298cc95285"
      ],
      "selections": [
        "cd777e9b-1e09-4b8f-aa83-bd011a110ae8"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session renegotiation when acting as a TLS server.\n\t  ",
      "dependencies": "FCS_TLSS_EXT.1 TLS Server Protocol\n\t  ",
      "managementFunction": "No specific management functions are identified.\n\t  ",
      "toggle": true
    },
    "auditEvents": {
      "ef778ee2-0612-450b-be56-6c0a7cdbf9e7": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "0fc0cc12-84b7-4a58-b669-844f0ecb3f3f": {
        "elementXMLID": "fcs_tlss_ext-4-1",
        "selectableGroups": {
          "group-184": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "c0351d12-39ee-4a3f-a8ae-71ddfac467e1",
              "6fe6f2a1-bc95-487a-ac9b-4c9c77068bf5"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall support secure TLS renegotiation through the use of "
          },
          {
            "selections": "group-184"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "c0351d12-39ee-4a3f-a8ae-71ddfac467e1": {
            "type": "selectable",
            "uuid": "c0351d12-39ee-4a3f-a8ae-71ddfac467e1",
            "id": "fcs_tlss_ext.4.1_1",
            "description": "the \"renegotiation_info\" TLS extension in accordance with RFC 5746",
            "exclusive": false,
            "nestedGroups": []
          },
          "6fe6f2a1-bc95-487a-ac9b-4c9c77068bf5": {
            "type": "selectable",
            "uuid": "6fe6f2a1-bc95-487a-ac9b-4c9c77068bf5",
            "id": "fcs_tlss_ext.4.1_2",
            "description": "not allowing session renegotiation",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "aeeae6b0-e051-4cc7-a1e8-56da3b6c31f5": {
        "elementXMLID": "fcs_tlss_ext-4-2",
        "selectableGroups": {
          "group-185": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "2397c5bc-b373-439c-a534-f81cfbb30794",
              "36e69a5f-264c-4457-928b-ea70e8353be1"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall\n              "
          },
          {
            "selections": "group-185"
          },
          {
            "text": ".\n            "
          }
        ],
        "selectables": {
          "2397c5bc-b373-439c-a534-f81cfbb30794": {
            "type": "selectable",
            "uuid": "2397c5bc-b373-439c-a534-f81cfbb30794",
            "id": "fcs_tlss_ext.4.2_1",
            "description": "indicate support for renegotiating a TLS 1.2 session by including the renegotiation_info extension in the ServerHello message when a ClientHello with the renegotiation_info extension is received and shall terminate a session if neither of the renegotiation_info or TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuites are indicated in the client hello",
            "exclusive": false,
            "nestedGroups": []
          },
          "36e69a5f-264c-4457-928b-ea70e8353be1": {
            "type": "selectable",
            "uuid": "36e69a5f-264c-4457-928b-ea70e8353be1",
            "id": "fcs_tlss_ext.4.2_2",
            "description": "not allow renegotiation",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "0783f871-ca76-43a0-bd03-ae809e11dc8b": {
        "elementXMLID": "fcs_tlss_ext-4-3",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n\t      The TSF shall terminate the session if an unexpected ClientHello is received during an active TLS session.\n\t    "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              This SFR is claimed if \"TLS as a server\" is selected in FCS_TLS_EXT.1.1.\n              </p> <p>\n              If the TSF supports TLS 1.2, the ST author claims either method of protecting against insecure renegotiation attempts. The first\n              selection refines RFC 5746. RFC 5746 defines an extension to TLS 1.2 that binds renegotiation handshakes to the cryptography in\n              the original handshake, but allows interoperability with clients that do not follow RFC 5746. \n              As a refinement of the RFC, servers that support TLS 1.2 renegotiation will terminate a session if neither of the methods\n              described in RFC 5746 are offered by the client.               \n              Alternatively, a TLS server supporting TLS 1.2 may negotiate TLS 1.2 without any RFC 5746 client renegotiation indicators \n              if it always terminates an existing session when a new ClientHello is received, similar to the implementation of TLS 1.3. \n              </p> <p>\n              If the TSF supports TLS 1.3, the ST author must claim \"does not allow renegotiation.\"\n              TLS 1.3 does not allow renegotiation. Termination, as indicated in FCS_TLSS_EXT.4.3, covers TLS 1.3 sessions as well as TLS 1.2\n              sessions where the ClientHello received does not comply with RFC 5746, or when configured to reject renegotiation (if the\n              product is configurable).\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "30e49cc1-e2d5-4b0b-b736-e66ac606aef7": {
        "tss": "<p>\n\t        The evaluator shall examine the TSS to confirm that the TLS description includes details on session renegotiation protection methods supported, \n\t        to include when renegotiation is prohibited.\n\t        </p>",
        "introduction": "",
        "guidance": "<p>\n\t        The evaluator shall examine the operational guidance to confirm that any instructions that are needed to meet the requirements are included. \n\t        If TLS 1.2 is supported, and the TSF is configurable to use RFC 5746 methods or to deny renegotiation, \n\t        the evaluator shall ensure that the operational guidance includes instructions for configuring the TSF in this manner.\n\t        </p>",
        "testIntroduction": "The evaluator shall perform the following tests, as indicated based on supported secure renegotiation methods. The conditions: \u2018support for renegotiation\u2019, \u2018allowing renegotiation,\u2019 or \u2018supporting RFC 5746 methods\u2019 imply that the TSF supports TLS 1.2. TLS 1.3 does not allow renegotiation. For each test, the evaluator shall use a test TLS client able to construct the indicated messages and expose messages received from the TSF.",
        "testClosing": "",
        "testLists": {
          "485bfbf1-01a8-4fc7-83bb-cbcfa7da70cf": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "62bbdb66-232b-420a-9584-cdfbb74f5d87",
              "d88bfa51-74bc-4998-a52b-6ace6242edcd"
            ],
            "conclusion": ""
          },
          "b3ab3117-2df5-426c-a475-966ed2db3e3a": {
            "parentTestUUID": "62bbdb66-232b-420a-9584-cdfbb74f5d87",
            "description": "",
            "testUUIDs": [
              "a7554161-18c2-4310-b71e-ed1a30da0b61",
              "5e921bcf-decb-4a21-bda2-d6a05d6b58ed"
            ],
            "conclusion": ""
          },
          "76adb55a-03a4-48b0-badd-56458fa2389f": {
            "parentTestUUID": "d88bfa51-74bc-4998-a52b-6ace6242edcd",
            "description": "",
            "testUUIDs": [
              "030d6369-8c32-41e1-aadb-070fa2bfd574",
              "11049cb9-1dee-4b5e-a89c-f7d388371f75",
              "2756da22-2a7c-4f46-9946-ae28a69f84d2",
              "e164b201-759f-4964-b70b-0ef6991a35c2",
              "0e6e1f3a-1d9c-4e6e-bb8d-919e77ae3e1a",
              "64a0a031-6e57-4e32-96ea-d7698aa43f8c"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "a7554161-18c2-4310-b71e-ed1a30da0b61": {
            "testListUUID": "b3ab3117-2df5-426c-a475-966ed2db3e3a",
            "id": "",
            "objective": "The evaluator shall send an initial ClientHello without the renegotiation_info extension and without including the signaling ciphersuite value, TLS_EMPTY_RENEGOTIATION_INFO_SCSV. \n\t                The evaluator shall observe that the TSF terminates the session.\n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "5e921bcf-decb-4a21-bda2-d6a05d6b58ed": {
            "testListUUID": "b3ab3117-2df5-426c-a475-966ed2db3e3a",
            "id": "",
            "objective": "\n\t                The evaluator shall send an initial ClientHello with the renegotiation_info extension indicating a renegotiated_connection length greater than zero. The evaluator shall observe that the TSF terminates the session. \n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "62bbdb66-232b-420a-9584-cdfbb74f5d87": {
            "testListUUID": "485bfbf1-01a8-4fc7-83bb-cbcfa7da70cf",
            "id": "",
            "objective": "(RFC 5746 compliant TLS 1.2 initial handshake) [conditional] \n\t            If the TSF supports renegotiation, the evaluator shall follow the operational guidance as necessary to configure the TSF to enforce RFC 5746 methods. \n\t            The evaluator shall initiate a TLS 1.2 session from a test TLS client for each of the following sub-tests:\n\t            ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "b3ab3117-2df5-426c-a475-966ed2db3e3a"
            ]
          },
          "030d6369-8c32-41e1-aadb-070fa2bfd574": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, the evaluator shall configure the TSF to support RFC 5746 methods, \n\t                send an initial handshake with a valid renegotiation extension, \n\t                send a new TLS 1.2 ClientHello on the TLS 1.2 channel containing the renegotiation_info extension indicating valid client_verify_data, and observe the TSF successfully completes the handshake.",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "11049cb9-1dee-4b5e-a89c-f7d388371f75": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, the evaluator shall send an initial ClientHello containing a valid renegotiation extension, \n\t                 send a new TLS 1.2 ClientHello on the TLS 1.2 channel with the signaling ciphersuite value, TLS_ EMPTY_RENEGOTIATION_INFO_SCSV, and observe that the TSF terminates the session.\n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., handshake failure) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "2756da22-2a7c-4f46-9946-ae28a69f84d2": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "[conditional] If the TSF allows renegotiation, for each TLS 1.2 renegotiation method claimed in accordance with RFC 5746, \n\t                the evaluator shall send an initial ClientHello indicating the method, send a new TLS 1.2 ClientHello on the TLS 1.2 channel without a renegotiation_info extension, and observe that the TSF terminates the session.\n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "e164b201-759f-4964-b70b-0ef6991a35c2": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "[conditional]: If the TSF allows renegotiation, for each TLS 1.2 renegotiation method claimed in accordance with RFC 5746, \n\t                the evaluator shall send an initial ClientHello indicating the method, \n\t                send a new TLS 1.2 ClientHello on the TLS 1.2 channel with a renegotiation_info extension indicating an invalid client_verify_data value (modify a byte of a valid value), and observe that the TSF terminates the session.\n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "0e6e1f3a-1d9c-4e6e-bb8d-919e77ae3e1a": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "[conditional]  If the TSF rejects renegotiation for TLS 1.2, the evaluator shall follow the operational guidance as necessary to configure the TSF to reject renegotiation. The evaluator shall initiate a valid initial session, send a valid ClientHello on the non-renegotiable TLS channel, and observe that the TSF does not perform renegotiation of the TLS channel.\n\t              ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "64a0a031-6e57-4e32-96ea-d7698aa43f8c": {
            "testListUUID": "76adb55a-03a4-48b0-badd-56458fa2389f",
            "id": "",
            "objective": "\n\t                [conditional]  If the TSF supports TLS 1.3, the evaluator shall follow the operational guidance as necessary to configure the TSF to negotiate the version. The evaluator shall initiate a valid initial session for the specified version, send a valid ClientHello on the non-renegotiable TLS channel, and observe that the TSF terminates the session.\n\t                <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., unexpected message) in response to this, \n\t                but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert).\n\t                </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "d88bfa51-74bc-4998-a52b-6ace6242edcd": {
            "testListUUID": "485bfbf1-01a8-4fc7-83bb-cbcfa7da70cf",
            "id": "",
            "objective": "\n\t            (renegotiation attempt) For each of the following sub-tests, the evaluator shall establish a compliant TLS channel with an initial handshake that uses the indicated secure renegotiation method for the version indicated. \n\t            Without closing the session, the evaluator shall send a second ClientHello within the channel specific to the version as indicated:\n\t            ",
            "dependencies": [],
            "nestedTestListUUIDs": [
              "76adb55a-03a4-48b0-badd-56458fa2389f"
            ]
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.5": {
    "title": "TLS Server Support for Session Resumption",
    "cc_id": "FCS_TLSS_EXT.5",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [
        "b9c51387-6a65-4d4c-9b81-4d9fd8fa76dc"
      ],
      "selections": [
        "a72d6b0c-f0e8-4e19-ba60-65b35907c7fb"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption when acting as a TLS server.\n          ",
      "dependencies": "FCS_TLSS_EXT.1 TLS Server Protocol\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "140f133e-d8d3-442c-ac19-ece528a89a2f": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "344c83c4-e2e7-41bd-bd1f-c86123b84c91": {
        "elementXMLID": "fcs_tlss_ext-5-1",
        "selectableGroups": {
          "group-186": {
            "onlyOne": false,
            "linebreak": false,
            "groups": [
              "15bf8882-fc2c-436a-a02f-130d15b712a5",
              "f8ab261a-15e8-4c57-aba1-e53a9be2223f",
              "d92b77ed-2408-4709-9671-aebfebe9876f"
            ]
          }
        },
        "title": [
          {
            "text": "\n              The TSF shall support session resumption as a TLS server via the use of "
          },
          {
            "selections": "group-186"
          },
          {
            "text": ". \n            "
          }
        ],
        "selectables": {
          "15bf8882-fc2c-436a-a02f-130d15b712a5": {
            "type": "selectable",
            "uuid": "15bf8882-fc2c-436a-a02f-130d15b712a5",
            "id": "fcs_tlss_ext.5.1_1",
            "description": "session ID in accordance with RFC 5246",
            "exclusive": false,
            "nestedGroups": []
          },
          "f8ab261a-15e8-4c57-aba1-e53a9be2223f": {
            "type": "selectable",
            "uuid": "f8ab261a-15e8-4c57-aba1-e53a9be2223f",
            "id": "fcs_tlss_ext.5.1_2",
            "description": "tickets in accordance with RFC 5077",
            "exclusive": false,
            "nestedGroups": []
          },
          "d92b77ed-2408-4709-9671-aebfebe9876f": {
            "type": "selectable",
            "uuid": "d92b77ed-2408-4709-9671-aebfebe9876f",
            "id": "tlss_v13_resumption",
            "description": "PSK and tickets in accordance with RFC 8446",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n              This SFR is claimed if \"session resumption\" is selected in FCS_TLSS_EXT.1.1.\n              </p> <p>\n              The ST author indicates which session resumption mechanisms are supported. \n              If TLS 1.2 is supported, one or both of the first two options, \"session ID in accordance with RFC 5246\" and \"tickets in\n              accordance with RFC 5077\" are claimed. \n              If TLS 1.3 is supported, \"PSK and tickets in accordance with RFC 8446\" is selected, and the selection-based SFR FCS_TLSS_EXT.6 must also be claimed.\n              </p> <p>\n              While it is possible to perform session resumption using PSK ciphersuites in TLS 1.2, this is uncommon. \n              Validation of key establishment and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered in FCS_TLSS_EXT.1.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "51b36e99-1f17-467f-8ef9-67d7935a198a": {
        "tss": "<p>\n                The evaluator shall examine the TSS and confirm that the TLS server protocol description includes a description of the supported resumption mechanisms.\n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall ensure the operational guidance describes instructions for any configurable features of the resumption mechanism.\n                </p>",
        "testIntroduction": "The evaluator shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "1b5df359-b8c2-44a5-a681-167084247d93": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "8c56dc96-ca6f-4913-bb39-59757c47e8ec",
              "1f07973d-52da-4627-9690-c1ac67844243"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "8c56dc96-ca6f-4913-bb39-59757c47e8ec": {
            "testListUUID": "1b5df359-b8c2-44a5-a681-167084247d93",
            "id": "tls-server-successful-resumption",
            "objective": "For each supported version, and for each supported resumption method for that version, \n                    the evaluator shall establish a compliant initial TLS session with the TOE for the version using the specified method. \n                    The evaluator shall close the successful session and initiate resumption using the specified mechanism. \n                    The evaluator shall observe that the TSF successfully establishes the resumed session in accordance with the requirements. ",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "1f07973d-52da-4627-9690-c1ac67844243": {
            "testListUUID": "1b5df359-b8c2-44a5-a681-167084247d93",
            "id": "",
            "objective": "For each supported version and each supported resumption method for that version, \n                    the evaluator shall send a compliant ClientHello message supporting only the specific version and indicating support for the resumption method. \n                    The evaluator shall allow the TOE and test client to continue with the compliant handshake until resumption information is established but then cause a fatal error to terminate the session. \n                    The evaluator shall then send a new ClientHello in an attempt to resume the session with the resumption information provided \n                    and verify that the TSF does not resume the session, but instead either terminates the session or completes a full handshake, ignoring the resumption information.\n                    <p><b>Note:</b> For TLS 1.2, resumption information should be established at the point the TSF sends a ServerHello, either acknowledging the session-based resumption \n                      or acknowledging support for ticket-based resumption and sending a NewSessionTicket handshake message. \n                    A TLS 1.2 session can then be terminated by sending a modified finished message. \n                    For TLS 1.3, the NewSessionTicket message is sent after the finished message; once received by the client, the session can be terminated by modifying a byte of the encrypted application data. \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLSS_EXT.6": {
    "title": "TLS Server TLS 1.3 Resumption Refinements",
    "cc_id": "FCS_TLSS_EXT.6",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": true,
    "selections": {
      "components": [],
      "elements": [],
      "selections": [
        "d92b77ed-2408-4709-9671-aebfebe9876f"
      ]
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to support session resumption behavior specific to DTLS 1.3 when acting as a TLS server.\n          ",
      "dependencies": "FCS_TLSS_EXT.1 TLS Server Protocol<br/>\n            FCS_TLSS_EXT.5 TLS Server Support for Session Resumption\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "756aef5e-6615-44b9-90d3-facfa162ad90": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "7a85367c-32bb-49f7-a36b-fb809889d440": {
        "elementXMLID": "fcs_tlss_ext-6-1",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall support TLS 1.3 resumption using PSK with psk_key_exchange_modes extension with the value psk_dhe_ke.  \n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": ""
      },
      "7bdbd261-c017-41c2-be66-5c0daa979c55": {
        "elementXMLID": "fcs_tlss_ext-6-2",
        "selectableGroups": {},
        "title": [
          {
            "text": "\n              The TSF shall ignore early data received in TLS 1.3 sessions.\n            "
          }
        ],
        "selectables": {},
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "<p>\n                This SFR is claimed if TLS 1.3 is supported and \"PSK and tickets in accordance with RFC 8446\" is selected in FCS_TLSS_EXT.5.1.\n              </p> <p>\n              RFC 8446 allows pre-shared keys to be used directly \n              and also allows early data to be protected using only the pre-shared key. This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key establishment to ensure perfect forward secrecy for all sessions.\n              </p>"
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "095e1f35-3071-4b45-be73-8802957e5b80": {
        "tss": "<p>\n                The evaluator shall examine the TSS to confirm that the TLS description includes details on session resumption for TLS 1.3, \n                describes each application capable of using TLS 1.3 with PSK, and describes how the TSF and application respond to client attempts to use early data (including via logging or observable responses). \n                The evaluator shall confirm that the TLS description shows that only the psk_dhe_ke psk_key_exchange_modes is supported and that early information is ignored. \n                </p>",
        "introduction": "",
        "guidance": "<p>\n                The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. \n                </p>",
        "testIntroduction": "The evaluator shall follow the operational guidance to configure the TSF to negotiate TLS 1.3 and shall perform the following tests:",
        "testClosing": "",
        "testLists": {
          "4a8ccd4b-4ba0-4421-83e3-bc8646d594e2": {
            "parentTestUUID": null,
            "description": "",
            "testUUIDs": [
              "82464033-7b4b-44e1-a9ca-c0d646735313",
              "57673bfb-a0dc-4945-9421-e6eec0f6e92a"
            ],
            "conclusion": ""
          }
        },
        "tests": {
          "82464033-7b4b-44e1-a9ca-c0d646735313": {
            "testListUUID": "4a8ccd4b-4ba0-4421-83e3-bc8646d594e2",
            "id": "",
            "objective": "The evaluator shall attempt a resumed session (see FCS_TLSS_EXT.5 &lt;xref to=\"tls-server-successful-resumption\"/&gt;) but using psk_ke mode as the value for the psk_key_exchange_modes extension in the resumption ClientHello. \n                    The evaluator shall observe that the TSF refuses to resume the session, either by completing a full TLS 1.3 handshake or by terminating the session.\n                    <p><b>Note:</b> It is preferred that the TSF sends a fatal error alert message (e.g., illegal parameter) in response to this, \n                    but it is acceptable that the TSF terminates the connection silently (i.e., without sending a fatal error alert). \n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          },
          "57673bfb-a0dc-4945-9421-e6eec0f6e92a": {
            "testListUUID": "4a8ccd4b-4ba0-4421-83e3-bc8646d594e2",
            "id": "",
            "objective": "\n                    The evaluator shall establish a valid TLS 1.3 session with the TOE and send the data as application data after the finished messages have been verified, \n                    and observe the response. The evaluator shall then configure the TOE to clear the response and initiate a resumed session\n                    (see FCS_TLSS_EXT.5 &lt;xref to=\"tls-server-successful-resumption\"/&gt;) with a test TLS 1.3 client attempting to provide\n                    the same data in early data. \n                    The evaluator shall observe that the TSF does not react to the early data as it did when presented as application data \n                    after the finished messages, indicating that the data was ignored.\n                    <p><b>Note:</b> The specific early data used may depend on the applications calling the TLS session and should be selected to initiate an observable response in the TSF or calling application as described in the ST. \n                    For HTTPS, for example, the early data can be an HTTP POST that updates data at the TOE, which can then be observed via a user interface for the application if the data was \n                    posted or via application logging indicating that the operation failed.\n                    </p>",
            "dependencies": [],
            "nestedTestListUUIDs": []
          }
        },
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  },
  "FCS_TLS_EXT.1": {
    "title": "TLS Protocol",
    "cc_id": "FCS_TLS_EXT.1",
    "iteration_id": "",
    "xml_id": "",
    "definition": "",
    "optional": false,
    "objective": false,
    "selectionBased": false,
    "selections": {
      "components": [],
      "elements": [],
      "selections": []
    },
    "useCaseBased": false,
    "useCases": [],
    "implementationDependent": false,
    "reasons": [],
    "tableOpen": false,
    "objectives": [],
    "extendedComponentDefinition": {
      "audit": "There are no auditable events foreseen. ",
      "componentLeveling": " requires the TSF to specify whether it implements TLS or DTLS as a client or as a server.\n          ",
      "dependencies": "No dependencies.\n          ",
      "managementFunction": "No specific management functions are identified.\n          ",
      "toggle": true
    },
    "auditEvents": {
      "03ce9895-ee4b-4365-a65e-2d9b34d61e3c": {
        "items": [],
        "optional": false
      }
    },
    "open": false,
    "elements": {
      "2f476ac7-697d-431b-995b-c0298cc95285": {
        "elementXMLID": "fel-tls-usage",
        "selectableGroups": {
          "group-1": {
            "onlyOne": false,
            "linebreak": true,
            "groups": [
              "6f4ccf3d-f268-4462-a602-02bfb4823d60",
              "cd777e9b-1e09-4b8f-aa83-bd011a110ae8",
              "d9b19690-8bd0-4e8c-9868-28936ce04915",
              "e9ee3ce6-6dff-47de-805d-73a48a63c2ea"
            ]
          }
        },
        "title": [
          {
            "text": "The TSF shall implement\n        "
          },
          {
            "selections": "group-1"
          },
          {
            "text": ".\n        "
          }
        ],
        "selectables": {
          "6f4ccf3d-f268-4462-a602-02bfb4823d60": {
            "type": "selectable",
            "uuid": "6f4ccf3d-f268-4462-a602-02bfb4823d60",
            "id": "tlsc_impl",
            "description": "TLS as a client",
            "exclusive": false,
            "nestedGroups": []
          },
          "cd777e9b-1e09-4b8f-aa83-bd011a110ae8": {
            "type": "selectable",
            "uuid": "cd777e9b-1e09-4b8f-aa83-bd011a110ae8",
            "id": "tlss_impl",
            "description": "TLS as a server",
            "exclusive": false,
            "nestedGroups": []
          },
          "d9b19690-8bd0-4e8c-9868-28936ce04915": {
            "type": "selectable",
            "uuid": "d9b19690-8bd0-4e8c-9868-28936ce04915",
            "id": "dtlsc_impl",
            "description": "DTLS as a client",
            "exclusive": false,
            "nestedGroups": []
          },
          "e9ee3ce6-6dff-47de-805d-73a48a63c2ea": {
            "type": "selectable",
            "uuid": "e9ee3ce6-6dff-47de-805d-73a48a63c2ea",
            "id": "dtlss_impl",
            "description": "DTLS as a server",
            "exclusive": false,
            "nestedGroups": []
          }
        },
        "isManagementFunction": false,
        "managementFunctions": {
          "tableName": "Management Functions",
          "statusMarkers": "",
          "rows": [],
          "columns": [
            {
              "headerName": "#",
              "field": "rowNum",
              "editable": false,
              "resizable": true,
              "type": "Index",
              "flex": 0.5
            },
            {
              "headerName": "ID",
              "field": "id",
              "editable": true,
              "resizable": true,
              "type": "Editor",
              "flex": 1
            },
            {
              "headerName": "Management Function",
              "field": "textArray",
              "editable": false,
              "resizable": true,
              "type": "Button",
              "flex": 2
            }
          ]
        },
        "note": "\n              If <i>TLS as a client</i> is selected, then the\n              ST must include the requirements from FCS_TLSC_EXT.1 and FCS_TLSC_EXT.4.\n              <br/>\n              If <i>TLS as a server</i> is selected, then the\n              ST must include the requirements from FCS_TLSS_EXT.1 and FCS_TLSS_EXT.4.\n              <br/><br/>\n              If <i>DTLS as a client</i> is selected, then the\n              ST must include the requirements from FCS_DTLSC_EXT.1 and FCS_DTLSC_EXT.4.\n              <br/>\n              If <i>DTLS as a server</i> is selected, then the\n              ST must include the requirements from FCS_DTLSS_EXT.1 and FCS_DTLSS_EXT.4.\n            "
      }
    },
    "invisible": false,
    "evaluationActivities": {
      "85780584-5e69-46f2-87cf-186db4e0f98a": {
        "tss": "<p>\n                The evaluator shall examine the TSS to verify that the TLS and DTLS claims are consistent with those selected in the SFR (e.g., if FCS_TLS_EXT.1.1 claims \"TLS as a client,\" the evaluator shall ensure that FCS_TLSC_EXT.1 is claimed as part of the TSF at minimum).\n                </p>",
        "introduction": "",
        "guidance": "",
        "testIntroduction": " <p>\n                There are no test activities for this SFR; the following information is provided as an overview of the expected functionality and test environment for all subsequent SFRs.\n                </p> <p><b>Test Environment:</b></p> <p>\n                Tests for TLS 1.2 and TLS 1.3 include examination of the handshake messages and behavior of the TSF when presented with unexpected or invalid messages. \n                For TLS 1.2 and below, previous versions of this Functional Package only required visibility of network traffic and the ability to modify a valid handshake message sent to the TSF.\n                </p> <p>&lt;figure entity=\"images/figure2.png\" title=\"Test environment for TLS 1.2 using network traffic visibility and control tools\" id=\"Figure2\"/&gt;</p> <p>\n                TLS 1.3 introduces the encryption of handshake messages subsequent to the ServerHello exchange which prevents visibility and control using midpoint capabilities. \n                To achieve equivalent validation of TLS 1.3 requires the ability to modify the traffic underlying the encryption applied after the ServerHello message. \n                This can be achieved by introducing additional control of the messages sent, and visibility of messages received by the test TLS client, \n                (when validating TLS server functionality) or the test server (when validating TLS client functionality).\n                </p> <p>&lt;figure entity=\"images/figure3.png\" title=\"Test environment for TLS 1.3 using custom endpoint capabilities for visibility and control\" id=\"Figure3\"/&gt;</p> <p>\n                Typically, a compliant TLS 1.3 library modified to provide visibility and control of the handshake messages prior to encryption suffices for all tests. \n                Such modification will require the test client, test server, or both to be validated. \n                </p> <p>\n                Since validations of products supporting only TLS 1.2 are still expected under this Package, \n                the test environment for TLS 1.2-only validations may include network sniffers and man-in-the-middle products that do not require such \n                modifications to a compliant TLS 1.2 library. \n                For consistency, a compliant TLS client (or TLS server) together with the network sniffers and man-in-the-middle capabilities \n                will also be referred to as a test TLS client (or test TLS server, respectively) in the following evaluation activities.\n                </p> &lt;figure entity=\"images/figure4.png\" title=\"Combined test environment for TLS 1.2 and TLS 1.3 using both network tools and custom endpoint capabilities\" id=\"Figure4\"/&gt; ",
        "testClosing": "",
        "testLists": {},
        "tests": {},
        "level": "element",
        "isNoTest": false,
        "noTest": ""
      }
    },
    "modifiedSfr": false,
    "additionalSfr": false,
    "consistencyRationale": "",
    "notNew": null,
    "xPathDetails": {}
  }
}