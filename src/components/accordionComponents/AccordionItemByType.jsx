// Imports
import { useMemo } from "react";
import PropTypes from "prop-types";
import { useSelector } from "react-redux";
import { Card } from "@material-tailwind/react";
import { defaultBasePP } from "../../reducers/SFRs/sfrBasePPsSlice.js";
import { deepCopy } from "../../utils/deepCopy.js";
import { getSfrMaps } from "../../utils/securityComponents.jsx";
import CompliantTargetsOfEvaluation from "./CompliantTargetsOfEvaluation.jsx";
import ConformanceClaims from "./ConformanceClaims.jsx";
import EditorSection from "./EditorSection.jsx";
import SecurityContent from "./SecurityContent.jsx";
import Terms from "../editorComponents/Terms.jsx";

/**
 * The AccordionItemByType content
 * @param type the accordion type
 *        values: appendixI, compliantTargetsOfEvaluation, conformanceClaims, editor, terms, threats, objectives, sfrs, sars, sfrBasePPs
 * @param uuid the uuid of the accordion item
 * @param section the section number used for the accordion item header
 * @param accordionUUID the parent accordion uuid
 * @constructor
 */
function AccordionItemByType({ type, uuid, section, accordionUUID }) {
  // Prop Validation
  AccordionItemByType.propTypes = {
    type: PropTypes.string.isRequired,
    uuid: PropTypes.string.isRequired,
    section: PropTypes.string.isRequired,
    accordionUUID: PropTypes.string.isRequired,
  };

  // Constants
  const editors = useSelector((state) => state.editors);
  const terms = useSelector((state) => state.terms);
  const threats = useSelector((state) => state.threats);
  const objectives = useSelector((state) => state.objectives);
  const sfrs = useSelector((state) => state.sfrs.sections);
  const sars = useSelector((state) => state.sars.sections);
  const sfrSections = useSelector((state) => state.sfrSections);
  const sfrBasePPs = useSelector((state) => state.sfrBasePPs);

  // Helper Methods
  /**
   * Gets the title tooltip
   * @returns {string}
   */
  const getTitleToolTip = () => {
    let title = "";

    // Get the title
    if (type === "editor") {
      title = editors.hasOwnProperty(uuid) && editors[uuid].hasOwnProperty("title") ? editors[uuid].title : "";
    } else if (type === "terms") {
      title = terms.hasOwnProperty(uuid) && terms[uuid].hasOwnProperty("title") ? terms[uuid].title : "";
    }

    // Get the tooltip
    switch (title) {
      case "Common Criteria Terms":
        return "Terms that come directly from the Common Criteria. These boilerplate terms will be generated by transforms and are not visible here.";
      case "Technical Terms":
        return "Terms that are used in this document that do not appear in the Common Criteria Terms section.";
      case "TOE Overview":
        return "Description of the TOE (Target of Evaluation).";
      default:
        return "";
    }
  };

  // Components
  /**
   * The SecurityContentSection
   * @param props the props
   * @returns {JSX.Element}
   * @constructor
   */
  const SecurityContentSection = (props) => {
    // Prop Validation
    SecurityContentSection.propTypes = {
      title: PropTypes.string.isRequired,
      definition: PropTypes.string.isRequired,
      item: PropTypes.object,
      sfrList: PropTypes.object,
      sarList: PropTypes.array,
      open: PropTypes.bool.isRequired,
    };

    // Constants
    const { title, definition, item, sfrList, sarList, open } = props;

    // Return Method
    return (
      <SecurityContent
        uuid={uuid}
        accordionUUID={accordionUUID}
        title={title}
        contentType={type}
        definition={definition ? definition : ""}
        item={item}
        sfrList={sfrList}
        sarList={sarList}
        section={section}
        open={open}
      />
    );
  };

  // Use Memos
  /**
   * The TextEditorSection content
   */
  const TextEditorSection = useMemo(() => {
    if (type === "editor") {
      return <EditorSection accordionUUID={accordionUUID} uuid={uuid} section={section} tootip={getTitleToolTip()} />;
    }
  }, [accordionUUID, uuid, section, type, editors]);
  /**
   * The TermsSection content
   */
  const TermsSection = useMemo(() => {
    if (type === "terms") {
      let termList = terms[uuid];
      const { title, open, showAddButton } = termList;
      const tooltip = getTitleToolTip();

      return (
        <Terms
          uuid={uuid}
          accordionUUID={accordionUUID}
          title={title}
          section={section}
          open={open}
          titleTooltip={tooltip}
          showAddButton={showAddButton ?? true}
        />
      );
    }
  }, [accordionUUID, uuid, section, type, terms]);
  /**
   * The ThreatsSection content
   */
  const ThreatsSection = useMemo(() => {
    if (type === "threats") {
      let threatList = threats[uuid];
      const { title, definition, open } = threatList;

      return SecurityContentSection({ title, definition, item: threatList, open });
    }
  }, [accordionUUID, uuid, section, type, threats]);
  /**
   * The ObjectivesSection content
   */
  const ObjectivesSection = useMemo(() => {
    if (type === "objectives") {
      let objectivesList = objectives[uuid];
      const { title, definition, open } = objectivesList;

      return SecurityContentSection({ title, definition, item: objectivesList, open });
    }
  }, [accordionUUID, uuid, section, type, objectives]);
  /**
   * The SfrsSection content
   */
  const SfrsSection = useMemo(() => {
    if (type === "sfrs") {
      let sfr = sfrs[uuid];
      let sfrList = sfrSections[uuid];
      const { title, definition, open } = sfr;

      return SecurityContentSection({ title, definition, sfrList, open });
    }
  }, [accordionUUID, uuid, section, type, sfrs, sfrSections]);
  /**
   * The SarsSection content
   */
  const SarsSection = useMemo(() => {
    if (type === "sars") {
      let sar = sars[uuid];
      const { title, summary: definition, componentIDs: sarList, open } = sar;

      return SecurityContentSection({ title, definition, sarList, open });
    }
  }, [accordionUUID, uuid, section, type, sars]);
  /**
   * The SfrBasePPsSection content
   */
  const SfrBasePPsSection = useMemo(() => {
    if (type === "sfrBasePPs") {
      const sfrBasePP = sfrBasePPs[uuid] || {};
      const { declarationAndRef = null, open = false } = sfrBasePP;
      const { name: title = "" } = declarationAndRef || deepCopy(defaultBasePP.declarationAndRef);

      return SecurityContentSection({ title, section, open });
    }
  }, [accordionUUID, uuid, section, type, sfrs, sfrBasePPs]);

  // Return Method
  return (
    <div className='w-full'>
      {type === "appendixI" && <Card className='mb-1 mt-[-4px] p-6'>The Acronyms Appendix will be generated by the transforms in the resulting document.</Card>}
      {type === "compliantTargetsOfEvaluation" && (
        <CompliantTargetsOfEvaluation section={section} accordionUUID={accordionUUID} uuid={uuid} sfrMaps={getSfrMaps()} />
      )}
      {type === "conformanceClaims" && <ConformanceClaims />}
      {TextEditorSection}
      {TermsSection}
      {ThreatsSection}
      {ObjectivesSection}
      {SfrsSection}
      {SarsSection}
      {SfrBasePPsSection}
    </div>
  );
}

// Export AccordionItemByType.jsx
export default AccordionItemByType;
